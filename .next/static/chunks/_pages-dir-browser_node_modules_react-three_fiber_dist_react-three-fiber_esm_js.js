"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_node_modules_react-three_fiber_dist_react-three-fiber_esm_js"],{

/***/ "(pages-dir-browser)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ useStore),\n/* harmony export */   B: () => (/* binding */ Block),\n/* harmony export */   C: () => (/* binding */ useThree),\n/* harmony export */   D: () => (/* binding */ useFrame),\n/* harmony export */   E: () => (/* binding */ ErrorBoundary),\n/* harmony export */   F: () => (/* binding */ useGraph),\n/* harmony export */   G: () => (/* binding */ useLoader),\n/* harmony export */   _: () => (/* binding */ _roots),\n/* harmony export */   a: () => (/* binding */ useMutableCallback),\n/* harmony export */   b: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   c: () => (/* binding */ createRoot),\n/* harmony export */   d: () => (/* binding */ unmountComponentAtNode),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   f: () => (/* binding */ createPointerEvents),\n/* harmony export */   g: () => (/* binding */ createEvents),\n/* harmony export */   h: () => (/* binding */ flushGlobalEffects),\n/* harmony export */   i: () => (/* binding */ isRef),\n/* harmony export */   j: () => (/* binding */ addEffect),\n/* harmony export */   k: () => (/* binding */ addAfterEffect),\n/* harmony export */   l: () => (/* binding */ addTail),\n/* harmony export */   m: () => (/* binding */ invalidate),\n/* harmony export */   n: () => (/* binding */ advance),\n/* harmony export */   o: () => (/* binding */ createPortal),\n/* harmony export */   p: () => (/* binding */ flushSync),\n/* harmony export */   q: () => (/* binding */ context),\n/* harmony export */   r: () => (/* binding */ reconciler),\n/* harmony export */   s: () => (/* binding */ applyProps),\n/* harmony export */   t: () => (/* binding */ threeTypes),\n/* harmony export */   u: () => (/* binding */ useBridge),\n/* harmony export */   v: () => (/* binding */ getRootState),\n/* harmony export */   w: () => (/* binding */ dispose),\n/* harmony export */   x: () => (/* binding */ act),\n/* harmony export */   y: () => (/* binding */ buildGraph),\n/* harmony export */   z: () => (/* binding */ useInstanceHandle)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-reconciler/constants */ \"(pages-dir-browser)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(pages-dir-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var zustand_traditional__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/traditional */ \"(pages-dir-browser)/./node_modules/zustand/esm/traditional.mjs\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! suspend-react */ \"(pages-dir-browser)/./node_modules/suspend-react/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ \"(pages-dir-browser)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduler */ \"(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(scheduler__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! its-fine */ \"(pages-dir-browser)/./node_modules/its-fine/dist/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\n\n\n\n\n\n\nvar threeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\n/**\r\n * Returns the instance's initial (outmost) root.\r\n */\nfunction findInitialRoot(instance) {\n  let root = instance.root;\n  while (root.getState().previousRoot) root = root.getState().previousRoot;\n  return root;\n}\n/**\r\n * Safely flush async effects when testing, simulating a legacy root.\r\n * @deprecated Import from React instead. import { act } from 'react'\r\n */\n// Reference with computed key to break Webpack static analysis\n// https://github.com/webpack/webpack/issues/14814\nconst act = react__WEBPACK_IMPORTED_MODULE_0__['act' + ''];\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\nconst isRef = obj => obj && obj.hasOwnProperty('current');\nconst isColorRepresentation = value => value != null && (typeof value === 'string' || typeof value === 'number' || value.isColor);\n\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */\nconst useIsomorphicLayoutEffect = /* @__PURE__ */((_window$document, _window$navigator) => typeof window !== 'undefined' && (((_window$document = window.document) == null ? void 0 : _window$document.createElement) || ((_window$navigator = window.navigator) == null ? void 0 : _window$navigator.product) === 'ReactNative'))() ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useMutableCallback(fn) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fn);\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn]);\n  return ref;\n}\n/**\r\n * Bridges renderer Context and StrictMode from a primary renderer.\r\n */\nfunction useBridge() {\n  const fiber = (0,its_fine__WEBPACK_IMPORTED_MODULE_5__.useFiber)();\n  const ContextBridge = (0,its_fine__WEBPACK_IMPORTED_MODULE_5__.useContextBridge)();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    children\n  }) => {\n    const strict = !!(0,its_fine__WEBPACK_IMPORTED_MODULE_5__.traverseFiber)(fiber, true, node => node.type === react__WEBPACK_IMPORTED_MODULE_0__.StrictMode);\n    const Root = strict ? react__WEBPACK_IMPORTED_MODULE_0__.StrictMode : react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Root, {\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ContextBridge, {\n        children: children\n      })\n    });\n  }, [fiber, ContextBridge]);\n}\nfunction Block({\n  set\n}) {\n  useIsomorphicLayoutEffect(() => {\n    set(new Promise(() => null));\n    return () => set(false);\n  }, [set]);\n  return null;\n}\n\n// NOTE: static members get down-level transpiled to mutations which break tree-shaking\nconst ErrorBoundary = /* @__PURE__ */(_ErrorBoundary => (_ErrorBoundary = class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n  }\n  componentDidCatch(err) {\n    this.props.set(err);\n  }\n  render() {\n    return this.state.error ? null : this.props.children;\n  }\n}, _ErrorBoundary.getDerivedStateFromError = () => ({\n  error: true\n}), _ErrorBoundary))();\nfunction calculateDpr(dpr) {\n  var _window$devicePixelRa;\n  // Err on the side of progress by assuming 2x dpr if we can't detect it\n  // This will happen in workers where window is defined but dpr isn't.\n  const target = typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) != null ? _window$devicePixelRa : 2 : 1;\n  return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n\n/**\r\n * Returns instance root state\r\n */\nfunction getRootState(obj) {\n  var _r3f;\n  return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n}\n// A collection of compare functions\nconst is = {\n  obj: a => a === Object(a) && !is.arr(a) && typeof a !== 'function',\n  fun: a => typeof a === 'function',\n  str: a => typeof a === 'string',\n  num: a => typeof a === 'number',\n  boo: a => typeof a === 'boolean',\n  und: a => a === void 0,\n  nul: a => a === null,\n  arr: a => Array.isArray(a),\n  equ(a, b, {\n    arrays = 'shallow',\n    objects = 'reference',\n    strict = true\n  } = {}) {\n    // Wrong type or one of the two undefined, doesn't match\n    if (typeof a !== typeof b || !!a !== !!b) return false;\n    // Atomic, just compare a against b\n    if (is.str(a) || is.num(a) || is.boo(a)) return a === b;\n    const isObj = is.obj(a);\n    if (isObj && objects === 'reference') return a === b;\n    const isArr = is.arr(a);\n    if (isArr && arrays === 'reference') return a === b;\n    // Array or Object, shallow compare first to see if it's a match\n    if ((isArr || isObj) && a === b) return true;\n    // Last resort, go through keys\n    let i;\n    // Check if a has all the keys of b\n    for (i in a) if (!(i in b)) return false;\n    // Check if values between keys match\n    if (isObj && arrays === 'shallow' && objects === 'shallow') {\n      for (i in strict ? b : a) if (!is.equ(a[i], b[i], {\n        strict,\n        objects: 'reference'\n      })) return false;\n    } else {\n      for (i in strict ? b : a) if (a[i] !== b[i]) return false;\n    }\n    // If i is undefined\n    if (is.und(i)) {\n      // If both arrays are empty we consider them equal\n      if (isArr && a.length === 0 && b.length === 0) return true;\n      // If both objects are empty we consider them equal\n      if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n      // Otherwise match them by value\n      if (a !== b) return false;\n    }\n    return true;\n  }\n};\n\n// Collects nodes and materials from a THREE.Object3D\nfunction buildGraph(object) {\n  const data = {\n    nodes: {},\n    materials: {},\n    meshes: {}\n  };\n  if (object) {\n    object.traverse(obj => {\n      if (obj.name) data.nodes[obj.name] = obj;\n      if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n      if (obj.isMesh && !data.meshes[obj.name]) data.meshes[obj.name] = obj;\n    });\n  }\n  return data;\n}\n// Disposes an object and all its properties\nfunction dispose(obj) {\n  if (obj.type !== 'Scene') obj.dispose == null ? void 0 : obj.dispose();\n  for (const p in obj) {\n    const prop = obj[p];\n    if ((prop == null ? void 0 : prop.type) !== 'Scene') prop == null ? void 0 : prop.dispose == null ? void 0 : prop.dispose();\n  }\n}\nconst REACT_INTERNAL_PROPS = ['children', 'key', 'ref'];\n\n// Gets only instance props from reconciler fibers\nfunction getInstanceProps(queue) {\n  const props = {};\n  for (const key in queue) {\n    if (!REACT_INTERNAL_PROPS.includes(key)) props[key] = queue[key];\n  }\n  return props;\n}\n\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(target, root, type, props) {\n  const object = target;\n\n  // Create instance descriptor\n  let instance = object == null ? void 0 : object.__r3f;\n  if (!instance) {\n    instance = {\n      root,\n      type,\n      parent: null,\n      children: [],\n      props: getInstanceProps(props),\n      object,\n      eventCount: 0,\n      handlers: {},\n      isHidden: false\n    };\n    if (object) object.__r3f = instance;\n  }\n  return instance;\n}\nfunction resolve(root, key) {\n  let target = root[key];\n  if (!key.includes('-')) return {\n    root,\n    key,\n    target\n  };\n\n  // Resolve pierced target\n  target = root;\n  for (const part of key.split('-')) {\n    var _target;\n    key = part;\n    root = target;\n    target = (_target = target) == null ? void 0 : _target[key];\n  }\n\n  // TODO: change key to 'foo-bar' if target is undefined?\n\n  return {\n    root,\n    key,\n    target\n  };\n}\n\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child) {\n  if (is.str(child.props.attach)) {\n    // If attaching into an array (foo-0), create one\n    if (INDEX_REGEX.test(child.props.attach)) {\n      const index = child.props.attach.replace(INDEX_REGEX, '');\n      const {\n        root,\n        key\n      } = resolve(parent.object, index);\n      if (!Array.isArray(root[key])) root[key] = [];\n    }\n    const {\n      root,\n      key\n    } = resolve(parent.object, child.props.attach);\n    child.previousAttach = root[key];\n    root[key] = child.object;\n  } else if (is.fun(child.props.attach)) {\n    child.previousAttach = child.props.attach(parent.object, child.object);\n  }\n}\nfunction detach(parent, child) {\n  if (is.str(child.props.attach)) {\n    const {\n      root,\n      key\n    } = resolve(parent.object, child.props.attach);\n    const previous = child.previousAttach;\n    // When the previous value was undefined, it means the value was never set to begin with\n    if (previous === undefined) delete root[key];\n    // Otherwise set the previous value\n    else root[key] = previous;\n  } else {\n    child.previousAttach == null ? void 0 : child.previousAttach(parent.object, child.object);\n  }\n  delete child.previousAttach;\n}\nconst RESERVED_PROPS = [...REACT_INTERNAL_PROPS,\n// Instance props\n'args', 'dispose', 'attach', 'object', 'onUpdate',\n// Behavior flags\n'dispose'];\nconst MEMOIZED_PROTOTYPES = new Map();\nfunction getMemoizedPrototype(root) {\n  let ctor = MEMOIZED_PROTOTYPES.get(root.constructor);\n  try {\n    if (!ctor) {\n      ctor = new root.constructor();\n      MEMOIZED_PROTOTYPES.set(root.constructor, ctor);\n    }\n  } catch (e) {\n    // ...\n  }\n  return ctor;\n}\n\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, newProps) {\n  const changedProps = {};\n\n  // Sort through props\n  for (const prop in newProps) {\n    // Skip reserved keys\n    if (RESERVED_PROPS.includes(prop)) continue;\n    // Skip if props match\n    if (is.equ(newProps[prop], instance.props[prop])) continue;\n\n    // Props changed, add them\n    changedProps[prop] = newProps[prop];\n\n    // Reset pierced props\n    for (const other in newProps) {\n      if (other.startsWith(`${prop}-`)) changedProps[other] = newProps[other];\n    }\n  }\n\n  // Reset removed props for HMR\n  for (const prop in instance.props) {\n    if (RESERVED_PROPS.includes(prop) || newProps.hasOwnProperty(prop)) continue;\n    const {\n      root,\n      key\n    } = resolve(instance.object, prop);\n\n    // https://github.com/mrdoob/three.js/issues/21209\n    // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n    // has no means to do this. Hence we curate a small collection of value-classes\n    // with their respective constructor/set arguments\n    // For removed props, try to set default values, if possible\n    if (root.constructor && root.constructor.length === 0) {\n      // create a blank slate of the instance and copy the particular parameter.\n      const ctor = getMemoizedPrototype(root);\n      if (!is.und(ctor)) changedProps[key] = ctor[key];\n    } else {\n      // instance does not have constructor, just set it to 0\n      changedProps[key] = 0;\n    }\n  }\n  return changedProps;\n}\n\n// https://github.com/mrdoob/three.js/pull/27042\n// https://github.com/mrdoob/three.js/pull/22748\nconst colorMaps = ['map', 'emissiveMap', 'sheenColorMap', 'specularColorMap', 'envMap'];\nconst EVENT_REGEX = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;\n// This function applies a set of changes to the instance\nfunction applyProps(object, props) {\n  var _instance$object;\n  const instance = object.__r3f;\n  const rootState = instance && findInitialRoot(instance).getState();\n  const prevHandlers = instance == null ? void 0 : instance.eventCount;\n  for (const prop in props) {\n    let value = props[prop];\n\n    // Don't mutate reserved keys\n    if (RESERVED_PROPS.includes(prop)) continue;\n\n    // Deal with pointer events, including removing them if undefined\n    if (instance && EVENT_REGEX.test(prop)) {\n      if (typeof value === 'function') instance.handlers[prop] = value;else delete instance.handlers[prop];\n      instance.eventCount = Object.keys(instance.handlers).length;\n      continue;\n    }\n\n    // Ignore setting undefined props\n    // https://github.com/pmndrs/react-three-fiber/issues/274\n    if (value === undefined) continue;\n    let {\n      root,\n      key,\n      target\n    } = resolve(object, prop);\n\n    // Layers must be written to the mask property\n    if (target instanceof three__WEBPACK_IMPORTED_MODULE_6__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_6__.Layers) {\n      target.mask = value.mask;\n    }\n    // Set colors if valid color representation for automatic conversion (copy)\n    else if (target instanceof three__WEBPACK_IMPORTED_MODULE_6__.Color && isColorRepresentation(value)) {\n      target.set(value);\n    }\n    // Copy if properties match signatures and implement math interface (likely read-only)\n    else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && typeof target.copy === 'function' && value != null && value.constructor && target.constructor === value.constructor) {\n      target.copy(value);\n    }\n    // Set array types\n    else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && Array.isArray(value)) {\n      if (typeof target.fromArray === 'function') target.fromArray(value);else target.set(...value);\n    }\n    // Set literal types\n    else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && typeof value === 'number') {\n      // Allow setting array scalars\n      if (typeof target.setScalar === 'function') target.setScalar(value);\n      // Otherwise just set single value\n      else target.set(value);\n    }\n    // Else, just overwrite the value\n    else {\n      var _root$key;\n      root[key] = value;\n\n      // Auto-convert sRGB texture parameters for built-in materials\n      // https://github.com/pmndrs/react-three-fiber/issues/344\n      // https://github.com/mrdoob/three.js/pull/25857\n      if (rootState && !rootState.linear && colorMaps.includes(key) && (_root$key = root[key]) != null && _root$key.isTexture &&\n      // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n      root[key].format === three__WEBPACK_IMPORTED_MODULE_6__.RGBAFormat && root[key].type === three__WEBPACK_IMPORTED_MODULE_6__.UnsignedByteType) {\n        // NOTE: this cannot be set from the renderer (e.g. sRGB source textures rendered to P3)\n        root[key].colorSpace = three__WEBPACK_IMPORTED_MODULE_6__.SRGBColorSpace;\n      }\n    }\n  }\n\n  // Register event handlers\n  if (instance != null && instance.parent && rootState != null && rootState.internal && (_instance$object = instance.object) != null && _instance$object.isObject3D && prevHandlers !== instance.eventCount) {\n    const object = instance.object;\n    // Pre-emptively remove the instance from the interaction manager\n    const index = rootState.internal.interaction.indexOf(object);\n    if (index > -1) rootState.internal.interaction.splice(index, 1);\n    // Add the instance to the interaction manager only when it has handlers\n    if (instance.eventCount && object.raycast !== null) {\n      rootState.internal.interaction.push(object);\n    }\n  }\n\n  // Auto-attach geometries and materials\n  if (instance && instance.props.attach === undefined) {\n    if (instance.object.isBufferGeometry) instance.props.attach = 'geometry';else if (instance.object.isMaterial) instance.props.attach = 'material';\n  }\n\n  // Instance was updated, request a frame\n  if (instance) invalidateInstance(instance);\n  return object;\n}\nfunction invalidateInstance(instance) {\n  var _instance$root;\n  if (!instance.parent) return;\n  instance.props.onUpdate == null ? void 0 : instance.props.onUpdate(instance.object);\n  const state = (_instance$root = instance.root) == null ? void 0 : _instance$root.getState == null ? void 0 : _instance$root.getState();\n  if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateCamera(camera, size) {\n  // Do not mess with the camera if it belongs to the user\n  // https://github.com/pmndrs/react-three-fiber/issues/92\n  if (camera.manual) return;\n  if (isOrthographicCamera(camera)) {\n    camera.left = size.width / -2;\n    camera.right = size.width / 2;\n    camera.top = size.height / 2;\n    camera.bottom = size.height / -2;\n  } else {\n    camera.aspect = size.width / size.height;\n  }\n  camera.updateProjectionMatrix();\n}\nconst isObject3D = object => object == null ? void 0 : object.isObject3D;\n\nfunction makeId(event) {\n  return (event.eventObject || event.object).uuid + '/' + event.index + event.instanceId;\n}\n\n/**\r\n * Release pointer captures.\r\n * This is called by releasePointerCapture in the API, and when an object is removed.\r\n */\nfunction releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n  const captureData = captures.get(obj);\n  if (captureData) {\n    captures.delete(obj);\n    // If this was the last capturing object for this pointer\n    if (captures.size === 0) {\n      capturedMap.delete(pointerId);\n      captureData.target.releasePointerCapture(pointerId);\n    }\n  }\n}\nfunction removeInteractivity(store, object) {\n  const {\n    internal\n  } = store.getState();\n  // Removes every trace of an object from the data store\n  internal.interaction = internal.interaction.filter(o => o !== object);\n  internal.initialHits = internal.initialHits.filter(o => o !== object);\n  internal.hovered.forEach((value, key) => {\n    if (value.eventObject === object || value.object === object) {\n      // Clear out intersects, they are outdated by now\n      internal.hovered.delete(key);\n    }\n  });\n  internal.capturedMap.forEach((captures, pointerId) => {\n    releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n  });\n}\nfunction createEvents(store) {\n  /** Calculates delta */\n  function calculateDistance(event) {\n    const {\n      internal\n    } = store.getState();\n    const dx = event.offsetX - internal.initialClick[0];\n    const dy = event.offsetY - internal.initialClick[1];\n    return Math.round(Math.sqrt(dx * dx + dy * dy));\n  }\n\n  /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */\n  function filterPointerEvents(objects) {\n    return objects.filter(obj => ['Move', 'Over', 'Enter', 'Out', 'Leave'].some(name => {\n      var _r3f;\n      return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers['onPointer' + name];\n    }));\n  }\n  function intersect(event, filter) {\n    const state = store.getState();\n    const duplicates = new Set();\n    const intersections = [];\n    // Allow callers to eliminate event objects\n    const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n    // Reset all raycaster cameras to undefined\n    for (let i = 0; i < eventsObjects.length; i++) {\n      const state = getRootState(eventsObjects[i]);\n      if (state) {\n        state.raycaster.camera = undefined;\n      }\n    }\n    if (!state.previousRoot) {\n      // Make sure root-level pointer and ray are set up\n      state.events.compute == null ? void 0 : state.events.compute(event, state);\n    }\n    function handleRaycast(obj) {\n      const state = getRootState(obj);\n      // Skip event handling when noEvents is set, or when the raycasters camera is null\n      if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n\n      // When the camera is undefined we have to call the event layers update function\n      if (state.raycaster.camera === undefined) {\n        var _state$previousRoot;\n        state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n        // If the camera is still undefined we have to skip this layer entirely\n        if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n      }\n\n      // Intersect object by object\n      return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n    }\n\n    // Collect events\n    let hits = eventsObjects\n    // Intersect objects\n    .flatMap(handleRaycast)\n    // Sort by event priority and distance\n    .sort((a, b) => {\n      const aState = getRootState(a.object);\n      const bState = getRootState(b.object);\n      if (!aState || !bState) return a.distance - b.distance;\n      return bState.events.priority - aState.events.priority || a.distance - b.distance;\n    })\n    // Filter out duplicates\n    .filter(item => {\n      const id = makeId(item);\n      if (duplicates.has(id)) return false;\n      duplicates.add(id);\n      return true;\n    });\n\n    // https://github.com/mrdoob/three.js/issues/16031\n    // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n    if (state.events.filter) hits = state.events.filter(hits, state);\n\n    // Bubble up the events, find the event source (eventObject)\n    for (const hit of hits) {\n      let eventObject = hit.object;\n      // Bubble event up\n      while (eventObject) {\n        var _r3f2;\n        if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n          ...hit,\n          eventObject\n        });\n        eventObject = eventObject.parent;\n      }\n    }\n\n    // If the interaction is captured, make all capturing targets part of the intersect.\n    if ('pointerId' in event && state.internal.capturedMap.has(event.pointerId)) {\n      for (let captureData of state.internal.capturedMap.get(event.pointerId).values()) {\n        if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n      }\n    }\n    return intersections;\n  }\n\n  /**  Handles intersections by forwarding them to handlers */\n  function handleIntersects(intersections, event, delta, callback) {\n    // If anything has been found, forward it to the event listeners\n    if (intersections.length) {\n      const localState = {\n        stopped: false\n      };\n      for (const hit of intersections) {\n        let state = getRootState(hit.object);\n\n        // If the object is not managed by R3F, it might be parented to an element which is.\n        // Traverse upwards until we find a managed parent and use its state instead.\n        if (!state) {\n          hit.object.traverseAncestors(obj => {\n            const parentState = getRootState(obj);\n            if (parentState) {\n              state = parentState;\n              return false;\n            }\n          });\n        }\n        if (state) {\n          const {\n            raycaster,\n            pointer,\n            camera,\n            internal\n          } = state;\n          const unprojectedPoint = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n          const hasPointerCapture = id => {\n            var _internal$capturedMap, _internal$capturedMap2;\n            return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n          };\n          const setPointerCapture = id => {\n            const captureData = {\n              intersection: hit,\n              target: event.target\n            };\n            if (internal.capturedMap.has(id)) {\n              // if the pointerId was previously captured, we add the hit to the\n              // event capturedMap.\n              internal.capturedMap.get(id).set(hit.eventObject, captureData);\n            } else {\n              // if the pointerId was not previously captured, we create a map\n              // containing the hitObject, and the hit. hitObject is used for\n              // faster access.\n              internal.capturedMap.set(id, new Map([[hit.eventObject, captureData]]));\n            }\n            event.target.setPointerCapture(id);\n          };\n          const releasePointerCapture = id => {\n            const captures = internal.capturedMap.get(id);\n            if (captures) {\n              releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n            }\n          };\n\n          // Add native event props\n          let extractEventProps = {};\n          // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n          for (let prop in event) {\n            let property = event[prop];\n            // Only copy over atomics, leave functions alone as these should be\n            // called as event.nativeEvent.fn()\n            if (typeof property !== 'function') extractEventProps[prop] = property;\n          }\n          let raycastEvent = {\n            ...hit,\n            ...extractEventProps,\n            pointer,\n            intersections,\n            stopped: localState.stopped,\n            delta,\n            unprojectedPoint,\n            ray: raycaster.ray,\n            camera: camera,\n            // Hijack stopPropagation, which just sets a flag\n            stopPropagation() {\n              // https://github.com/pmndrs/react-three-fiber/issues/596\n              // Events are not allowed to stop propagation if the pointer has been captured\n              const capturesForPointer = 'pointerId' in event && internal.capturedMap.get(event.pointerId);\n\n              // We only authorize stopPropagation...\n              if (\n              // ...if this pointer hasn't been captured\n              !capturesForPointer ||\n              // ... or if the hit object is capturing the pointer\n              capturesForPointer.has(hit.eventObject)) {\n                raycastEvent.stopped = localState.stopped = true;\n                // Propagation is stopped, remove all other hover records\n                // An event handler is only allowed to flush other handlers if it is hovered itself\n                if (internal.hovered.size && Array.from(internal.hovered.values()).find(i => i.eventObject === hit.eventObject)) {\n                  // Objects cannot flush out higher up objects that have already caught the event\n                  const higher = intersections.slice(0, intersections.indexOf(hit));\n                  cancelPointer([...higher, hit]);\n                }\n              }\n            },\n            // there should be a distinction between target and currentTarget\n            target: {\n              hasPointerCapture,\n              setPointerCapture,\n              releasePointerCapture\n            },\n            currentTarget: {\n              hasPointerCapture,\n              setPointerCapture,\n              releasePointerCapture\n            },\n            nativeEvent: event\n          };\n\n          // Call subscribers\n          callback(raycastEvent);\n          // Event bubbling may be interrupted by stopPropagation\n          if (localState.stopped === true) break;\n        }\n      }\n    }\n    return intersections;\n  }\n  function cancelPointer(intersections) {\n    const {\n      internal\n    } = store.getState();\n    for (const hoveredObj of internal.hovered.values()) {\n      // When no objects were hit or the the hovered object wasn't found underneath the cursor\n      // we call onPointerOut and delete the object from the hovered-elements map\n      if (!intersections.length || !intersections.find(hit => hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n        const eventObject = hoveredObj.eventObject;\n        const instance = eventObject.__r3f;\n        internal.hovered.delete(makeId(hoveredObj));\n        if (instance != null && instance.eventCount) {\n          const handlers = instance.handlers;\n          // Clear out intersects, they are outdated by now\n          const data = {\n            ...hoveredObj,\n            intersections\n          };\n          handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n          handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n        }\n      }\n    }\n  }\n  function pointerMissed(event, objects) {\n    for (let i = 0; i < objects.length; i++) {\n      const instance = objects[i].__r3f;\n      instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n    }\n  }\n  function handlePointer(name) {\n    // Deal with cancelation\n    switch (name) {\n      case 'onPointerLeave':\n      case 'onPointerCancel':\n        return () => cancelPointer([]);\n      case 'onLostPointerCapture':\n        return event => {\n          const {\n            internal\n          } = store.getState();\n          if ('pointerId' in event && internal.capturedMap.has(event.pointerId)) {\n            // If the object event interface had onLostPointerCapture, we'd call it here on every\n            // object that's getting removed. We call it on the next frame because onLostPointerCapture\n            // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n            // happen in the object it originated from, leaving components in a in-between state.\n            requestAnimationFrame(() => {\n              // Only release if pointer-up didn't do it already\n              if (internal.capturedMap.has(event.pointerId)) {\n                internal.capturedMap.delete(event.pointerId);\n                cancelPointer([]);\n              }\n            });\n          }\n        };\n    }\n\n    // Any other pointer goes here ...\n    return function handleEvent(event) {\n      const {\n        onPointerMissed,\n        internal\n      } = store.getState();\n\n      // prepareRay(event)\n      internal.lastEvent.current = event;\n\n      // Get fresh intersects\n      const isPointerMove = name === 'onPointerMove';\n      const isClickEvent = name === 'onClick' || name === 'onContextMenu' || name === 'onDoubleClick';\n      const filter = isPointerMove ? filterPointerEvents : undefined;\n      const hits = intersect(event, filter);\n      const delta = isClickEvent ? calculateDistance(event) : 0;\n\n      // Save initial coordinates on pointer-down\n      if (name === 'onPointerDown') {\n        internal.initialClick = [event.offsetX, event.offsetY];\n        internal.initialHits = hits.map(hit => hit.eventObject);\n      }\n\n      // If a click yields no results, pass it back to the user as a miss\n      // Missed events have to come first in order to establish user-land side-effect clean up\n      if (isClickEvent && !hits.length) {\n        if (delta <= 2) {\n          pointerMissed(event, internal.interaction);\n          if (onPointerMissed) onPointerMissed(event);\n        }\n      }\n      // Take care of unhover\n      if (isPointerMove) cancelPointer(hits);\n      function onIntersect(data) {\n        const eventObject = data.eventObject;\n        const instance = eventObject.__r3f;\n\n        // Check presence of handlers\n        if (!(instance != null && instance.eventCount)) return;\n        const handlers = instance.handlers;\n\n        /*\r\n        MAYBE TODO, DELETE IF NOT: \r\n          Check if the object is captured, captured events should not have intersects running in parallel\r\n          But wouldn't it be better to just replace capturedMap with a single entry?\r\n          Also, are we OK with straight up making picking up multiple objects impossible?\r\n          \r\n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \r\n        if (pointerId !== undefined) {\r\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\r\n          if (capturedMeshSet) {\r\n            const captured = capturedMeshSet.get(eventObject)\r\n            if (captured && captured.localState.stopped) return\r\n          }\r\n        }*/\n\n        if (isPointerMove) {\n          // Move event ...\n          if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n            // When enter or out is present take care of hover-state\n            const id = makeId(data);\n            const hoveredItem = internal.hovered.get(id);\n            if (!hoveredItem) {\n              // If the object wasn't previously hovered, book it and call its handler\n              internal.hovered.set(id, data);\n              handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n              handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n            } else if (hoveredItem.stopped) {\n              // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n              data.stopPropagation();\n            }\n          }\n          // Call mouse move\n          handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n        } else {\n          // All other events ...\n          const handler = handlers[name];\n          if (handler) {\n            // Forward all events back to their respective handlers with the exception of click events,\n            // which must use the initial target\n            if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n              // Missed events have to come first\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n              // Now call the handler\n              handler(data);\n            }\n          } else {\n            // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n            if (isClickEvent && internal.initialHits.includes(eventObject)) {\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n            }\n          }\n        }\n      }\n      handleIntersects(hits, event, delta, onIntersect);\n    };\n  }\n  return {\n    handlePointer\n  };\n}\n\nconst isRenderer = def => !!(def != null && def.render);\nconst context = /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst createStore = (invalidate, advance) => {\n  const rootStore = (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_7__.createWithEqualityFn)((set, get) => {\n    const position = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n    const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n    const tempTarget = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n    function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n      const {\n        width,\n        height,\n        top,\n        left\n      } = size;\n      const aspect = width / height;\n      if (target.isVector3) tempTarget.copy(target);else tempTarget.set(...target);\n      const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n      if (isOrthographicCamera(camera)) {\n        return {\n          width: width / camera.zoom,\n          height: height / camera.zoom,\n          top,\n          left,\n          factor: 1,\n          distance,\n          aspect\n        };\n      } else {\n        const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n        const h = 2 * Math.tan(fov / 2) * distance; // visible height\n        const w = h * (width / height);\n        return {\n          width: w,\n          height: h,\n          top,\n          left,\n          factor: width / w,\n          distance,\n          aspect\n        };\n      }\n    }\n    let performanceTimeout = undefined;\n    const setPerformanceCurrent = current => set(state => ({\n      performance: {\n        ...state.performance,\n        current\n      }\n    }));\n    const pointer = new three__WEBPACK_IMPORTED_MODULE_6__.Vector2();\n    const rootState = {\n      set,\n      get,\n      // Mock objects that have to be configured\n      gl: null,\n      camera: null,\n      raycaster: null,\n      events: {\n        priority: 1,\n        enabled: true,\n        connected: false\n      },\n      scene: null,\n      xr: null,\n      invalidate: (frames = 1) => invalidate(get(), frames),\n      advance: (timestamp, runGlobalEffects) => advance(timestamp, runGlobalEffects, get()),\n      legacy: false,\n      linear: false,\n      flat: false,\n      controls: null,\n      clock: new three__WEBPACK_IMPORTED_MODULE_6__.Clock(),\n      pointer,\n      mouse: pointer,\n      frameloop: 'always',\n      onPointerMissed: undefined,\n      performance: {\n        current: 1,\n        min: 0.5,\n        max: 1,\n        debounce: 200,\n        regress: () => {\n          const state = get();\n          // Clear timeout\n          if (performanceTimeout) clearTimeout(performanceTimeout);\n          // Set lower bound performance\n          if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n          // Go back to upper bound performance after a while unless something regresses meanwhile\n          performanceTimeout = setTimeout(() => setPerformanceCurrent(get().performance.max), state.performance.debounce);\n        }\n      },\n      size: {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n      },\n      viewport: {\n        initialDpr: 0,\n        dpr: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        aspect: 0,\n        distance: 0,\n        factor: 0,\n        getCurrentViewport\n      },\n      setEvents: events => set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      })),\n      setSize: (width, height, top = 0, left = 0) => {\n        const camera = get().camera;\n        const size = {\n          width,\n          height,\n          top,\n          left\n        };\n        set(state => ({\n          size,\n          viewport: {\n            ...state.viewport,\n            ...getCurrentViewport(camera, defaultTarget, size)\n          }\n        }));\n      },\n      setDpr: dpr => set(state => {\n        const resolved = calculateDpr(dpr);\n        return {\n          viewport: {\n            ...state.viewport,\n            dpr: resolved,\n            initialDpr: state.viewport.initialDpr || resolved\n          }\n        };\n      }),\n      setFrameloop: (frameloop = 'always') => {\n        const clock = get().clock;\n\n        // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n        clock.stop();\n        clock.elapsedTime = 0;\n        if (frameloop !== 'never') {\n          clock.start();\n          clock.elapsedTime = 0;\n        }\n        set(() => ({\n          frameloop\n        }));\n      },\n      previousRoot: undefined,\n      internal: {\n        // Events\n        interaction: [],\n        hovered: new Map(),\n        subscribers: [],\n        initialClick: [0, 0],\n        initialHits: [],\n        capturedMap: new Map(),\n        lastEvent: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n        // Updates\n        active: false,\n        frames: 0,\n        priority: 0,\n        subscribe: (ref, priority, store) => {\n          const internal = get().internal;\n          // If this subscription was given a priority, it takes rendering into its own hands\n          // For that reason we switch off automatic rendering and increase the manual flag\n          // As long as this flag is positive there can be no internal rendering at all\n          // because there could be multiple render subscriptions\n          internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n          internal.subscribers.push({\n            ref,\n            priority,\n            store\n          });\n          // Register subscriber and sort layers from lowest to highest, meaning,\n          // highest priority renders last (on top of the other frames)\n          internal.subscribers = internal.subscribers.sort((a, b) => a.priority - b.priority);\n          return () => {\n            const internal = get().internal;\n            if (internal != null && internal.subscribers) {\n              // Decrease manual flag if this subscription had a priority\n              internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n              // Remove subscriber from list\n              internal.subscribers = internal.subscribers.filter(s => s.ref !== ref);\n            }\n          };\n        }\n      }\n    };\n    return rootState;\n  });\n  const state = rootStore.getState();\n  let oldSize = state.size;\n  let oldDpr = state.viewport.dpr;\n  let oldCamera = state.camera;\n  rootStore.subscribe(() => {\n    const {\n      camera,\n      size,\n      viewport,\n      gl,\n      set\n    } = rootStore.getState();\n\n    // Resize camera and renderer on changes to size and pixelratio\n    if (size.width !== oldSize.width || size.height !== oldSize.height || viewport.dpr !== oldDpr) {\n      oldSize = size;\n      oldDpr = viewport.dpr;\n      // Update camera & renderer\n      updateCamera(camera, size);\n      if (viewport.dpr > 0) gl.setPixelRatio(viewport.dpr);\n      const updateStyle = typeof HTMLCanvasElement !== 'undefined' && gl.domElement instanceof HTMLCanvasElement;\n      gl.setSize(size.width, size.height, updateStyle);\n    }\n\n    // Update viewport once the camera changes\n    if (camera !== oldCamera) {\n      oldCamera = camera;\n      // Update viewport\n      set(state => ({\n        viewport: {\n          ...state.viewport,\n          ...state.viewport.getCurrentViewport(camera)\n        }\n      }));\n    }\n  });\n\n  // Invalidate on any change\n  rootStore.subscribe(state => invalidate(state));\n\n  // Return root state\n  return rootStore;\n};\n\n/**\r\n * Exposes an object's {@link Instance}.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\r\n *\r\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\r\n */\nfunction useInstanceHandle(ref) {\n  const instance = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(instance, () => ref.current.__r3f, [ref]);\n  return instance;\n}\n\n/**\r\n * Returns the R3F Canvas' Zustand store. Useful for [transient updates](https://github.com/pmndrs/zustand#transient-updates-for-often-occurring-state-changes).\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usestore\r\n */\nfunction useStore() {\n  const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\n  if (!store) throw new Error('R3F: Hooks can only be used within the Canvas component!');\n  return store;\n}\n\n/**\r\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\r\n */\nfunction useThree(selector = state => state, equalityFn) {\n  return useStore()(selector, equalityFn);\n}\n\n/**\r\n * Executes a callback before render in a shared frame loop.\r\n * Can order effects with render priority or manually render with a positive priority.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\r\n */\nfunction useFrame(callback, renderPriority = 0) {\n  const store = useStore();\n  const subscribe = store.getState().internal.subscribe;\n  // Memoize ref\n  const ref = useMutableCallback(callback);\n  // Subscribe on mount, unsubscribe on unmount\n  useIsomorphicLayoutEffect(() => subscribe(ref, renderPriority, store), [renderPriority, subscribe, store]);\n  return null;\n}\n\n/**\r\n * Returns a node graph of an object with named nodes & materials.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\r\n */\nfunction useGraph(object) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => buildGraph(object), [object]);\n}\nconst memoizedLoaders = new WeakMap();\nconst isConstructor$1 = value => {\n  var _value$prototype;\n  return typeof value === 'function' && (value == null ? void 0 : (_value$prototype = value.prototype) == null ? void 0 : _value$prototype.constructor) === value;\n};\nfunction loadingFn(extensions, onProgress) {\n  return function (Proto, ...input) {\n    let loader;\n\n    // Construct and cache loader if constructor was passed\n    if (isConstructor$1(Proto)) {\n      loader = memoizedLoaders.get(Proto);\n      if (!loader) {\n        loader = new Proto();\n        memoizedLoaders.set(Proto, loader);\n      }\n    } else {\n      loader = Proto;\n    }\n\n    // Apply loader extensions\n    if (extensions) extensions(loader);\n\n    // Go through the urls and load them\n    return Promise.all(input.map(input => new Promise((res, reject) => loader.load(input, data => {\n      if (isObject3D(data == null ? void 0 : data.scene)) Object.assign(data, buildGraph(data.scene));\n      res(data);\n    }, onProgress, error => reject(new Error(`Could not load ${input}: ${error == null ? void 0 : error.message}`))))));\n  };\n}\n\n/**\r\n * Synchronously loads and caches assets with a three loader.\r\n *\r\n * Note: this hook's caller must be wrapped with `React.Suspense`\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\r\n */\nfunction useLoader(loader, input, extensions, onProgress) {\n  // Use suspense to load async assets\n  const keys = Array.isArray(input) ? input : [input];\n  const results = (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.suspend)(loadingFn(extensions, onProgress), [loader, ...keys], {\n    equal: is.equ\n  });\n  // Return the object(s)\n  return Array.isArray(input) ? results : results[0];\n}\n\n/**\r\n * Preloads an asset into cache as a side-effect.\r\n */\nuseLoader.preload = function (loader, input, extensions) {\n  const keys = Array.isArray(input) ? input : [input];\n  return (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.preload)(loadingFn(extensions), [loader, ...keys]);\n};\n\n/**\r\n * Removes a loaded asset from cache.\r\n */\nuseLoader.clear = function (loader, input) {\n  const keys = Array.isArray(input) ? input : [input];\n  return (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.clear)([loader, ...keys]);\n};\n\nfunction createReconciler(config) {\n  const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2___default()(config);\n  reconciler.injectIntoDevTools({\n    bundleType: typeof process !== 'undefined' && \"development\" !== 'production' ? 1 : 0,\n    rendererPackageName: '@react-three/fiber',\n    version: react__WEBPACK_IMPORTED_MODULE_0__.version\n  });\n  return reconciler;\n}\nconst NoEventPriority = 0;\n\n// TODO: handle constructor overloads\n// https://github.com/pmndrs/react-three-fiber/pull/2931\n// https://github.com/microsoft/TypeScript/issues/37079\n\nconst catalogue = {};\nconst PREFIX_REGEX = /^three(?=[A-Z])/;\nconst toPascalCase = type => `${type[0].toUpperCase()}${type.slice(1)}`;\nlet i = 0;\nconst isConstructor = object => typeof object === 'function';\nfunction extend(objects) {\n  if (isConstructor(objects)) {\n    const Component = `${i++}`;\n    catalogue[Component] = objects;\n    return Component;\n  } else {\n    Object.assign(catalogue, objects);\n  }\n}\nfunction validateInstance(type, props) {\n  // Get target from catalogue\n  const name = toPascalCase(type);\n  const target = catalogue[name];\n\n  // Validate element target\n  if (type !== 'primitive' && !target) throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n\n  // Validate primitives\n  if (type === 'primitive' && !props.object) throw new Error(`R3F: Primitives without 'object' are invalid!`);\n\n  // Throw if an object or literal was passed for args\n  if (props.args !== undefined && !Array.isArray(props.args)) throw new Error('R3F: The args prop must be an array!');\n}\nfunction createInstance(type, props, root) {\n  var _props$object;\n  // Remove three* prefix from elements if native element not present\n  type = toPascalCase(type) in catalogue ? type : type.replace(PREFIX_REGEX, '');\n  validateInstance(type, props);\n\n  // Regenerate the R3F instance for primitives to simulate a new object\n  if (type === 'primitive' && (_props$object = props.object) != null && _props$object.__r3f) delete props.object.__r3f;\n  return prepare(props.object, root, type, props);\n}\nfunction hideInstance(instance) {\n  if (!instance.isHidden) {\n    var _instance$parent;\n    if (instance.props.attach && (_instance$parent = instance.parent) != null && _instance$parent.object) {\n      detach(instance.parent, instance);\n    } else if (isObject3D(instance.object)) {\n      instance.object.visible = false;\n    }\n    instance.isHidden = true;\n    invalidateInstance(instance);\n  }\n}\nfunction unhideInstance(instance) {\n  if (instance.isHidden) {\n    var _instance$parent2;\n    if (instance.props.attach && (_instance$parent2 = instance.parent) != null && _instance$parent2.object) {\n      attach(instance.parent, instance);\n    } else if (isObject3D(instance.object) && instance.props.visible !== false) {\n      instance.object.visible = true;\n    }\n    instance.isHidden = false;\n    invalidateInstance(instance);\n  }\n}\n\n// https://github.com/facebook/react/issues/20271\n// This will make sure events and attach are only handled once when trees are complete\nfunction handleContainerEffects(parent, child, beforeChild) {\n  // Bail if tree isn't mounted or parent is not a container.\n  // This ensures that the tree is finalized and React won't discard results to Suspense\n  const state = child.root.getState();\n  if (!parent.parent && parent.object !== state.scene) return;\n\n  // Create & link object on first run\n  if (!child.object) {\n    var _child$props$object, _child$props$args;\n    // Get target from catalogue\n    const target = catalogue[toPascalCase(child.type)];\n\n    // Create object\n    child.object = (_child$props$object = child.props.object) != null ? _child$props$object : new target(...((_child$props$args = child.props.args) != null ? _child$props$args : []));\n    child.object.__r3f = child;\n  }\n\n  // Set initial props\n  applyProps(child.object, child.props);\n\n  // Append instance\n  if (child.props.attach) {\n    attach(parent, child);\n  } else if (isObject3D(child.object) && isObject3D(parent.object)) {\n    const childIndex = parent.object.children.indexOf(beforeChild == null ? void 0 : beforeChild.object);\n    if (beforeChild && childIndex !== -1) {\n      // If the child is already in the parent's children array, move it to the new position\n      // Otherwise, just insert it at the target position\n      const existingIndex = parent.object.children.indexOf(child.object);\n      if (existingIndex !== -1) {\n        parent.object.children.splice(existingIndex, 1);\n        const adjustedIndex = existingIndex < childIndex ? childIndex - 1 : childIndex;\n        parent.object.children.splice(adjustedIndex, 0, child.object);\n      } else {\n        child.object.parent = parent.object;\n        parent.object.children.splice(childIndex, 0, child.object);\n        child.object.dispatchEvent({\n          type: 'added'\n        });\n        parent.object.dispatchEvent({\n          type: 'childadded',\n          child: child.object\n        });\n      }\n    } else {\n      parent.object.add(child.object);\n    }\n  }\n\n  // Link subtree\n  for (const childInstance of child.children) handleContainerEffects(child, childInstance);\n\n  // Tree was updated, request a frame\n  invalidateInstance(child);\n}\nfunction appendChild(parent, child) {\n  if (!child) return;\n\n  // Link instances\n  child.parent = parent;\n  parent.children.push(child);\n\n  // Attach tree once complete\n  handleContainerEffects(parent, child);\n}\nfunction insertBefore(parent, child, beforeChild) {\n  if (!child || !beforeChild) return;\n\n  // Link instances\n  child.parent = parent;\n  const childIndex = parent.children.indexOf(beforeChild);\n  if (childIndex !== -1) parent.children.splice(childIndex, 0, child);else parent.children.push(child);\n\n  // Attach tree once complete\n  handleContainerEffects(parent, child, beforeChild);\n}\nfunction disposeOnIdle(object) {\n  if (typeof object.dispose === 'function') {\n    const handleDispose = () => {\n      try {\n        object.dispose();\n      } catch {\n        // no-op\n      }\n    };\n\n    // In a testing environment, cleanup immediately\n    if (typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined') handleDispose();\n    // Otherwise, using a real GPU so schedule cleanup to prevent stalls\n    else (0,scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_scheduleCallback)(scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_IdlePriority, handleDispose);\n  }\n}\nfunction removeChild(parent, child, dispose) {\n  if (!child) return;\n\n  // Unlink instances\n  child.parent = null;\n  const childIndex = parent.children.indexOf(child);\n  if (childIndex !== -1) parent.children.splice(childIndex, 1);\n\n  // Eagerly tear down tree\n  if (child.props.attach) {\n    detach(parent, child);\n  } else if (isObject3D(child.object) && isObject3D(parent.object)) {\n    parent.object.remove(child.object);\n    removeInteractivity(findInitialRoot(child), child.object);\n  }\n\n  // Allow objects to bail out of unmount disposal with dispose={null}\n  const shouldDispose = child.props.dispose !== null && dispose !== false;\n\n  // Recursively remove instance children\n  for (let i = child.children.length - 1; i >= 0; i--) {\n    const node = child.children[i];\n    removeChild(child, node, shouldDispose);\n  }\n  child.children.length = 0;\n\n  // Unlink instance object\n  delete child.object.__r3f;\n\n  // Dispose object whenever the reconciler feels like it.\n  // Never dispose of primitives because their state may be kept outside of React!\n  // In order for an object to be able to dispose it\n  //   - has a dispose method\n  //   - cannot be a <primitive object={...} />\n  //   - cannot be a THREE.Scene, because three has broken its own API\n  if (shouldDispose && child.type !== 'primitive' && child.object.type !== 'Scene') {\n    disposeOnIdle(child.object);\n  }\n\n  // Tree was updated, request a frame for top-level instance\n  if (dispose === undefined) invalidateInstance(child);\n}\nfunction setFiberRef(fiber, publicInstance) {\n  for (const _fiber of [fiber, fiber.alternate]) {\n    if (_fiber !== null) {\n      if (typeof _fiber.ref === 'function') {\n        _fiber.refCleanup == null ? void 0 : _fiber.refCleanup();\n        const cleanup = _fiber.ref(publicInstance);\n        if (typeof cleanup === 'function') _fiber.refCleanup = cleanup;\n      } else if (_fiber.ref) {\n        _fiber.ref.current = publicInstance;\n      }\n    }\n  }\n}\nconst reconstructed = [];\nfunction swapInstances() {\n  // Detach instance\n  for (const [instance] of reconstructed) {\n    const parent = instance.parent;\n    if (parent) {\n      if (instance.props.attach) {\n        detach(parent, instance);\n      } else if (isObject3D(instance.object) && isObject3D(parent.object)) {\n        parent.object.remove(instance.object);\n      }\n      for (const child of instance.children) {\n        if (child.props.attach) {\n          detach(instance, child);\n        } else if (isObject3D(child.object) && isObject3D(instance.object)) {\n          instance.object.remove(child.object);\n        }\n      }\n    }\n\n    // If the old instance is hidden, we need to unhide it.\n    // React assumes it can discard instances since they're pure for DOM.\n    // This isn't true for us since our lifetimes are impure and longliving.\n    // So, we manually check if an instance was hidden and unhide it.\n    if (instance.isHidden) unhideInstance(instance);\n\n    // Dispose of old object if able\n    if (instance.object.__r3f) delete instance.object.__r3f;\n    if (instance.type !== 'primitive') disposeOnIdle(instance.object);\n  }\n\n  // Update instance\n  for (const [instance, props, fiber] of reconstructed) {\n    instance.props = props;\n    const parent = instance.parent;\n    if (parent) {\n      var _instance$props$objec, _instance$props$args;\n      // Get target from catalogue\n      const target = catalogue[toPascalCase(instance.type)];\n\n      // Create object\n      instance.object = (_instance$props$objec = instance.props.object) != null ? _instance$props$objec : new target(...((_instance$props$args = instance.props.args) != null ? _instance$props$args : []));\n      instance.object.__r3f = instance;\n      setFiberRef(fiber, instance.object);\n\n      // Set initial props\n      applyProps(instance.object, instance.props);\n      if (instance.props.attach) {\n        attach(parent, instance);\n      } else if (isObject3D(instance.object) && isObject3D(parent.object)) {\n        parent.object.add(instance.object);\n      }\n      for (const child of instance.children) {\n        if (child.props.attach) {\n          attach(instance, child);\n        } else if (isObject3D(child.object) && isObject3D(instance.object)) {\n          instance.object.add(child.object);\n        }\n      }\n\n      // Tree was updated, request a frame\n      invalidateInstance(instance);\n    }\n  }\n  reconstructed.length = 0;\n}\n\n// Don't handle text instances, make it no-op\nconst handleTextInstance = () => {};\nconst NO_CONTEXT = {};\nlet currentUpdatePriority = NoEventPriority;\n\n// https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberFlags.js\nconst NoFlags = 0;\nconst Update = 4;\nconst reconciler = /* @__PURE__ */createReconciler({\n  isPrimaryRenderer: false,\n  warnsIfNotActing: false,\n  supportsMutation: true,\n  supportsPersistence: false,\n  supportsHydration: false,\n  createInstance,\n  removeChild,\n  appendChild,\n  appendInitialChild: appendChild,\n  insertBefore,\n  appendChildToContainer(container, child) {\n    const scene = container.getState().scene.__r3f;\n    if (!child || !scene) return;\n    appendChild(scene, child);\n  },\n  removeChildFromContainer(container, child) {\n    const scene = container.getState().scene.__r3f;\n    if (!child || !scene) return;\n    removeChild(scene, child);\n  },\n  insertInContainerBefore(container, child, beforeChild) {\n    const scene = container.getState().scene.__r3f;\n    if (!child || !beforeChild || !scene) return;\n    insertBefore(scene, child, beforeChild);\n  },\n  getRootHostContext: () => NO_CONTEXT,\n  getChildHostContext: () => NO_CONTEXT,\n  commitUpdate(instance, type, oldProps, newProps, fiber) {\n    var _newProps$args, _oldProps$args, _newProps$args2;\n    validateInstance(type, newProps);\n    let reconstruct = false;\n\n    // Reconstruct primitives if object prop changes\n    if (instance.type === 'primitive' && oldProps.object !== newProps.object) reconstruct = true;\n    // Reconstruct instance if args were added or removed\n    else if (((_newProps$args = newProps.args) == null ? void 0 : _newProps$args.length) !== ((_oldProps$args = oldProps.args) == null ? void 0 : _oldProps$args.length)) reconstruct = true;\n    // Reconstruct instance if args were changed\n    else if ((_newProps$args2 = newProps.args) != null && _newProps$args2.some((value, index) => {\n      var _oldProps$args2;\n      return value !== ((_oldProps$args2 = oldProps.args) == null ? void 0 : _oldProps$args2[index]);\n    })) reconstruct = true;\n\n    // Reconstruct when args or <primitive object={...} have changes\n    if (reconstruct) {\n      reconstructed.push([instance, {\n        ...newProps\n      }, fiber]);\n    } else {\n      // Create a diff-set, flag if there are any changes\n      const changedProps = diffProps(instance, newProps);\n      if (Object.keys(changedProps).length) {\n        Object.assign(instance.props, changedProps);\n        applyProps(instance.object, changedProps);\n      }\n    }\n\n    // Flush reconstructed siblings when we hit the last updated child in a sequence\n    const isTailSibling = fiber.sibling === null || (fiber.flags & Update) === NoFlags;\n    if (isTailSibling) swapInstances();\n  },\n  finalizeInitialChildren: () => false,\n  commitMount() {},\n  getPublicInstance: instance => instance == null ? void 0 : instance.object,\n  prepareForCommit: () => null,\n  preparePortalMount: container => prepare(container.getState().scene, container, '', {}),\n  resetAfterCommit: () => {},\n  shouldSetTextContent: () => false,\n  clearContainer: () => false,\n  hideInstance,\n  unhideInstance,\n  createTextInstance: handleTextInstance,\n  hideTextInstance: handleTextInstance,\n  unhideTextInstance: handleTextInstance,\n  scheduleTimeout: typeof setTimeout === 'function' ? setTimeout : undefined,\n  cancelTimeout: typeof clearTimeout === 'function' ? clearTimeout : undefined,\n  noTimeout: -1,\n  getInstanceFromNode: () => null,\n  beforeActiveInstanceBlur() {},\n  afterActiveInstanceBlur() {},\n  detachDeletedInstance() {},\n  prepareScopeUpdate() {},\n  getInstanceFromScope: () => null,\n  shouldAttemptEagerTransition: () => false,\n  trackSchedulerEvent: () => {},\n  resolveEventType: () => null,\n  resolveEventTimeStamp: () => -1.1,\n  requestPostPaintCallback() {},\n  maySuspendCommit: () => false,\n  preloadInstance: () => true,\n  // true indicates already loaded\n  startSuspendingCommit() {},\n  suspendInstance() {},\n  waitForCommitToBeReady: () => null,\n  NotPendingTransition: null,\n  // The reconciler types use the internal ReactContext with all the hidden properties\n  // so we have to cast from the public React.Context type\n  HostTransitionContext: /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_0__.createContext(null),\n  setCurrentUpdatePriority(newPriority) {\n    currentUpdatePriority = newPriority;\n  },\n  getCurrentUpdatePriority() {\n    return currentUpdatePriority;\n  },\n  resolveUpdatePriority() {\n    var _window$event;\n    if (currentUpdatePriority !== NoEventPriority) return currentUpdatePriority;\n    switch (typeof window !== 'undefined' && ((_window$event = window.event) == null ? void 0 : _window$event.type)) {\n      case 'click':\n      case 'contextmenu':\n      case 'dblclick':\n      case 'pointercancel':\n      case 'pointerdown':\n      case 'pointerup':\n        return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DiscreteEventPriority;\n      case 'pointermove':\n      case 'pointerout':\n      case 'pointerover':\n      case 'pointerenter':\n      case 'pointerleave':\n      case 'wheel':\n        return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ContinuousEventPriority;\n      default:\n        return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n    }\n  },\n  resetFormInstance() {}\n});\n\nconst _roots = new Map();\nconst shallowLoose = {\n  objects: 'shallow',\n  strict: false\n};\nfunction computeInitialSize(canvas, size) {\n  if (!size && typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = canvas.parentElement.getBoundingClientRect();\n    return {\n      width,\n      height,\n      top,\n      left\n    };\n  } else if (!size && typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return {\n      width: canvas.width,\n      height: canvas.height,\n      top: 0,\n      left: 0\n    };\n  }\n  return {\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0,\n    ...size\n  };\n}\nfunction createRoot(canvas) {\n  // Check against mistaken use of createRoot\n  const prevRoot = _roots.get(canvas);\n  const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n  const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n  if (prevRoot) console.warn('R3F.createRoot should only be called once!');\n\n  // Report when an error was detected in a previous render\n  // https://github.com/pmndrs/react-three-fiber/pull/2261\n  const logRecoverableError = typeof reportError === 'function' ?\n  // In modern browsers, reportError will dispatch an error event,\n  // emulating an uncaught JavaScript error.\n  reportError :\n  // In older browsers and test environments, fallback to console.error.\n  console.error;\n\n  // Create store\n  const store = prevStore || createStore(invalidate, advance);\n  // Create renderer\n  const fiber = prevFiber || reconciler.createContainer(store,\n  // container\n  react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ConcurrentRoot,\n  // tag\n  null,\n  // hydration callbacks\n  false,\n  // isStrictMode\n  null,\n  // concurrentUpdatesByDefaultOverride\n  '',\n  // identifierPrefix\n  logRecoverableError,\n  // onUncaughtError\n  logRecoverableError,\n  // onCaughtError\n  logRecoverableError,\n  // onRecoverableError\n  null // transitionCallbacks\n  );\n  // Map it\n  if (!prevRoot) _roots.set(canvas, {\n    fiber,\n    store\n  });\n\n  // Locals\n  let onCreated;\n  let lastCamera;\n  let configured = false;\n  let pending = null;\n  return {\n    async configure(props = {}) {\n      let resolve;\n      pending = new Promise(_resolve => resolve = _resolve);\n      let {\n        gl: glConfig,\n        size: propsSize,\n        scene: sceneOptions,\n        events,\n        onCreated: onCreatedCallback,\n        shadows = false,\n        linear = false,\n        flat = false,\n        legacy = false,\n        orthographic = false,\n        frameloop = 'always',\n        dpr = [1, 2],\n        performance,\n        raycaster: raycastOptions,\n        camera: cameraOptions,\n        onPointerMissed\n      } = props;\n      let state = store.getState();\n\n      // Set up renderer (one time only!)\n      let gl = state.gl;\n      if (!state.gl) {\n        const defaultProps = {\n          canvas: canvas,\n          powerPreference: 'high-performance',\n          antialias: true,\n          alpha: true\n        };\n        const customRenderer = typeof glConfig === 'function' ? await glConfig(defaultProps) : glConfig;\n        if (isRenderer(customRenderer)) {\n          gl = customRenderer;\n        } else {\n          gl = new three__WEBPACK_IMPORTED_MODULE_6__.WebGLRenderer({\n            ...defaultProps,\n            ...glConfig\n          });\n        }\n        state.set({\n          gl\n        });\n      }\n\n      // Set up raycaster (one time only!)\n      let raycaster = state.raycaster;\n      if (!raycaster) state.set({\n        raycaster: raycaster = new three__WEBPACK_IMPORTED_MODULE_6__.Raycaster()\n      });\n\n      // Set raycaster options\n      const {\n        params,\n        ...options\n      } = raycastOptions || {};\n      if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n        ...options\n      });\n      if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n        params: {\n          ...raycaster.params,\n          ...params\n        }\n      });\n\n      // Create default camera, don't overwrite any user-set state\n      if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n        lastCamera = cameraOptions;\n        const isCamera = cameraOptions == null ? void 0 : cameraOptions.isCamera;\n        const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_6__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_6__.PerspectiveCamera(75, 0, 0.1, 1000);\n        if (!isCamera) {\n          camera.position.z = 5;\n          if (cameraOptions) {\n            applyProps(camera, cameraOptions);\n            // Preserve user-defined frustum if possible\n            // https://github.com/pmndrs/react-three-fiber/issues/3160\n            if (!camera.manual) {\n              if ('aspect' in cameraOptions || 'left' in cameraOptions || 'right' in cameraOptions || 'bottom' in cameraOptions || 'top' in cameraOptions) {\n                camera.manual = true;\n                camera.updateProjectionMatrix();\n              }\n            }\n          }\n          // Always look at center by default\n          if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n        }\n        state.set({\n          camera\n        });\n\n        // Configure raycaster\n        // https://github.com/pmndrs/react-xr/issues/300\n        raycaster.camera = camera;\n      }\n\n      // Set up scene (one time only!)\n      if (!state.scene) {\n        let scene;\n        if (sceneOptions != null && sceneOptions.isScene) {\n          scene = sceneOptions;\n          prepare(scene, store, '', {});\n        } else {\n          scene = new three__WEBPACK_IMPORTED_MODULE_6__.Scene();\n          prepare(scene, store, '', {});\n          if (sceneOptions) applyProps(scene, sceneOptions);\n        }\n        state.set({\n          scene\n        });\n      }\n\n      // Store events internally\n      if (events && !state.events.handlers) state.set({\n        events: events(store)\n      });\n      // Check size, allow it to take on container bounds initially\n      const size = computeInitialSize(canvas, propsSize);\n      if (!is.equ(size, state.size, shallowLoose)) {\n        state.setSize(size.width, size.height, size.top, size.left);\n      }\n      // Check pixelratio\n      if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n      // Check frameloop\n      if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n      // Check pointer missed\n      if (!state.onPointerMissed) state.set({\n        onPointerMissed\n      });\n      // Check performance\n      if (performance && !is.equ(performance, state.performance, shallowLoose)) state.set(state => ({\n        performance: {\n          ...state.performance,\n          ...performance\n        }\n      }));\n\n      // Set up XR (one time only!)\n      if (!state.xr) {\n        var _gl$xr;\n        // Handle frame behavior in WebXR\n        const handleXRFrame = (timestamp, frame) => {\n          const state = store.getState();\n          if (state.frameloop === 'never') return;\n          advance(timestamp, true, state, frame);\n        };\n\n        // Toggle render switching on session\n        const handleSessionChange = () => {\n          const state = store.getState();\n          state.gl.xr.enabled = state.gl.xr.isPresenting;\n          state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n          if (!state.gl.xr.isPresenting) invalidate(state);\n        };\n\n        // WebXR session manager\n        const xr = {\n          connect() {\n            const gl = store.getState().gl;\n            gl.xr.addEventListener('sessionstart', handleSessionChange);\n            gl.xr.addEventListener('sessionend', handleSessionChange);\n          },\n          disconnect() {\n            const gl = store.getState().gl;\n            gl.xr.removeEventListener('sessionstart', handleSessionChange);\n            gl.xr.removeEventListener('sessionend', handleSessionChange);\n          }\n        };\n\n        // Subscribe to WebXR session events\n        if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === 'function') xr.connect();\n        state.set({\n          xr\n        });\n      }\n\n      // Set shadowmap\n      if (gl.shadowMap) {\n        const oldEnabled = gl.shadowMap.enabled;\n        const oldType = gl.shadowMap.type;\n        gl.shadowMap.enabled = !!shadows;\n        if (is.boo(shadows)) {\n          gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap;\n        } else if (is.str(shadows)) {\n          var _types$shadows;\n          const types = {\n            basic: three__WEBPACK_IMPORTED_MODULE_6__.BasicShadowMap,\n            percentage: three__WEBPACK_IMPORTED_MODULE_6__.PCFShadowMap,\n            soft: three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap,\n            variance: three__WEBPACK_IMPORTED_MODULE_6__.VSMShadowMap\n          };\n          gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap;\n        } else if (is.obj(shadows)) {\n          Object.assign(gl.shadowMap, shadows);\n        }\n        if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n      }\n      three__WEBPACK_IMPORTED_MODULE_6__.ColorManagement.enabled = !legacy;\n\n      // Set color space and tonemapping preferences\n      if (!configured) {\n        gl.outputColorSpace = linear ? three__WEBPACK_IMPORTED_MODULE_6__.LinearSRGBColorSpace : three__WEBPACK_IMPORTED_MODULE_6__.SRGBColorSpace;\n        gl.toneMapping = flat ? three__WEBPACK_IMPORTED_MODULE_6__.NoToneMapping : three__WEBPACK_IMPORTED_MODULE_6__.ACESFilmicToneMapping;\n      }\n\n      // Update color management state\n      if (state.legacy !== legacy) state.set(() => ({\n        legacy\n      }));\n      if (state.linear !== linear) state.set(() => ({\n        linear\n      }));\n      if (state.flat !== flat) state.set(() => ({\n        flat\n      }));\n\n      // Set gl props\n      if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n\n      // Set locals\n      onCreated = onCreatedCallback;\n      configured = true;\n      resolve();\n      return this;\n    },\n    render(children) {\n      // The root has to be configured before it can be rendered\n      if (!configured && !pending) this.configure();\n      pending.then(() => {\n        reconciler.updateContainer( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Provider, {\n          store: store,\n          children: children,\n          onCreated: onCreated,\n          rootElement: canvas\n        }), fiber, null, () => undefined);\n      });\n      return store;\n    },\n    unmount() {\n      unmountComponentAtNode(canvas);\n    }\n  };\n}\nfunction Provider({\n  store,\n  children,\n  onCreated,\n  rootElement\n}) {\n  useIsomorphicLayoutEffect(() => {\n    const state = store.getState();\n    // Flag the canvas active, rendering will now begin\n    state.set(state => ({\n      internal: {\n        ...state.internal,\n        active: true\n      }\n    }));\n    // Notify that init is completed, the scene graph exists, but nothing has yet rendered\n    if (onCreated) onCreated(state);\n    // Connect events to the targets parent, this is done to ensure events are registered on\n    // a shared target, and not on the canvas itself\n    if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(context.Provider, {\n    value: store,\n    children: children\n  });\n}\nfunction unmountComponentAtNode(canvas, callback) {\n  const root = _roots.get(canvas);\n  const fiber = root == null ? void 0 : root.fiber;\n  if (fiber) {\n    const state = root == null ? void 0 : root.store.getState();\n    if (state) state.internal.active = false;\n    reconciler.updateContainer(null, fiber, null, () => {\n      if (state) {\n        setTimeout(() => {\n          try {\n            var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n            state.events.disconnect == null ? void 0 : state.events.disconnect();\n            (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n            (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n            if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n            dispose(state.scene);\n            _roots.delete(canvas);\n            if (callback) callback(canvas);\n          } catch (e) {\n            /* ... */\n          }\n        }, 500);\n      }\n    });\n  }\n}\nfunction createPortal(children, container, state) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Portal, {\n    children: children,\n    container: container,\n    state: state\n  });\n}\nfunction Portal({\n  state = {},\n  children,\n  container\n}) {\n  /** This has to be a component because it would not be able to call useThree/useStore otherwise since\r\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\r\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\r\n   *  <Canvas>\r\n   *    {createPortal(...)} */\n  const {\n    events,\n    size,\n    ...rest\n  } = state;\n  const previousRoot = useStore();\n  const [raycaster] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new three__WEBPACK_IMPORTED_MODULE_6__.Raycaster());\n  const [pointer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new three__WEBPACK_IMPORTED_MODULE_6__.Vector2());\n  const inject = useMutableCallback((rootState, injectState) => {\n    let viewport = undefined;\n    if (injectState.camera && size) {\n      const camera = injectState.camera;\n      // Calculate the override viewport, if present\n      viewport = rootState.viewport.getCurrentViewport(camera, new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(), size);\n      // Update the portal camera, if it differs from the previous layer\n      if (camera !== rootState.camera) updateCamera(camera, size);\n    }\n    return {\n      // The intersect consists of the previous root state\n      ...rootState,\n      ...injectState,\n      // Portals have their own scene, which forms the root, a raycaster and a pointer\n      scene: container,\n      raycaster,\n      pointer,\n      mouse: pointer,\n      // Their previous root is the layer before it\n      previousRoot,\n      // Events, size and viewport can be overridden by the inject layer\n      events: {\n        ...rootState.events,\n        ...injectState.events,\n        ...events\n      },\n      size: {\n        ...rootState.size,\n        ...size\n      },\n      viewport: {\n        ...rootState.viewport,\n        ...viewport\n      },\n      // Layers are allowed to override events\n      setEvents: events => injectState.set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      }))\n    };\n  });\n  const usePortalStore = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    // Create a mirrored store, based on the previous root with a few overrides ...\n    const store = (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_7__.createWithEqualityFn)((set, get) => ({\n      ...rest,\n      set,\n      get\n    }));\n\n    // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n    const onMutate = prev => store.setState(state => inject.current(prev, state));\n    onMutate(previousRoot.getState());\n    previousRoot.subscribe(onMutate);\n    return store;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [previousRoot, container]);\n  return (\n    /*#__PURE__*/\n    // @ts-ignore, reconciler types are not maintained\n    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n      children: reconciler.createPortal( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(context.Provider, {\n        value: usePortalStore,\n        children: children\n      }), usePortalStore, null)\n    })\n  );\n}\n\n/**\r\n * Force React to flush any updates inside the provided callback synchronously and immediately.\r\n * All the same caveats documented for react-dom's `flushSync` apply here (see https://react.dev/reference/react-dom/flushSync).\r\n * Nevertheless, sometimes one needs to render synchronously, for example to keep DOM and 3D changes in lock-step without\r\n * having to revert to a non-React solution. Note: this will only flush updates within the `Canvas` root.\r\n */\nfunction flushSync(fn) {\n  // @ts-ignore - reconciler types are not maintained\n  return reconciler.flushSyncFromReconciler(fn);\n}\n\nfunction createSubs(callback, subs) {\n  const sub = {\n    callback\n  };\n  subs.add(sub);\n  return () => void subs.delete(sub);\n}\nconst globalEffects = new Set();\nconst globalAfterEffects = new Set();\nconst globalTailEffects = new Set();\n\n/**\r\n * Adds a global render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\r\n */\nconst addEffect = callback => createSubs(callback, globalEffects);\n\n/**\r\n * Adds a global after-render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\r\n */\nconst addAfterEffect = callback => createSubs(callback, globalAfterEffects);\n\n/**\r\n * Adds a global callback which is called when rendering stops.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\r\n */\nconst addTail = callback => createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n  if (!effects.size) return;\n  for (const {\n    callback\n  } of effects.values()) {\n    callback(timestamp);\n  }\n}\nfunction flushGlobalEffects(type, timestamp) {\n  switch (type) {\n    case 'before':\n      return run(globalEffects, timestamp);\n    case 'after':\n      return run(globalAfterEffects, timestamp);\n    case 'tail':\n      return run(globalTailEffects, timestamp);\n  }\n}\nlet subscribers;\nlet subscription;\nfunction update(timestamp, state, frame) {\n  // Run local effects\n  let delta = state.clock.getDelta();\n\n  // In frameloop='never' mode, clock times are updated using the provided timestamp\n  if (state.frameloop === 'never' && typeof timestamp === 'number') {\n    delta = timestamp - state.clock.elapsedTime;\n    state.clock.oldTime = state.clock.elapsedTime;\n    state.clock.elapsedTime = timestamp;\n  }\n\n  // Call subscribers (useFrame)\n  subscribers = state.internal.subscribers;\n  for (let i = 0; i < subscribers.length; i++) {\n    subscription = subscribers[i];\n    subscription.ref.current(subscription.store.getState(), delta, frame);\n  }\n\n  // Render content\n  if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n\n  // Decrease frame count\n  state.internal.frames = Math.max(0, state.internal.frames - 1);\n  return state.frameloop === 'always' ? 1 : state.internal.frames;\n}\nlet running = false;\nlet useFrameInProgress = false;\nlet repeat;\nlet frame;\nlet state;\nfunction loop(timestamp) {\n  frame = requestAnimationFrame(loop);\n  running = true;\n  repeat = 0;\n\n  // Run effects\n  flushGlobalEffects('before', timestamp);\n\n  // Render all roots\n  useFrameInProgress = true;\n  for (const root of _roots.values()) {\n    var _state$gl$xr;\n    state = root.store.getState();\n\n    // If the frameloop is invalidated, do not run another frame\n    if (state.internal.active && (state.frameloop === 'always' || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n      repeat += update(timestamp, state);\n    }\n  }\n  useFrameInProgress = false;\n\n  // Run after-effects\n  flushGlobalEffects('after', timestamp);\n\n  // Stop the loop if nothing invalidates it\n  if (repeat === 0) {\n    // Tail call effects, they are called when rendering stops\n    flushGlobalEffects('tail', timestamp);\n\n    // Flag end of operation\n    running = false;\n    return cancelAnimationFrame(frame);\n  }\n}\n\n/**\r\n * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate\r\n */\nfunction invalidate(state, frames = 1) {\n  var _state$gl$xr2;\n  if (!state) return _roots.forEach(root => invalidate(root.store.getState(), frames));\n  if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === 'never') return;\n  if (frames > 1) {\n    // legacy support for people using frames parameters\n    // Increase frames, do not go higher than 60\n    state.internal.frames = Math.min(60, state.internal.frames + frames);\n  } else {\n    if (useFrameInProgress) {\n      //called from within a useFrame, it means the user wants an additional frame\n      state.internal.frames = 2;\n    } else {\n      //the user need a new frame, no need to increment further than 1\n      state.internal.frames = 1;\n    }\n  }\n\n  // If the render-loop isn't active, start it\n  if (!running) {\n    running = true;\n    requestAnimationFrame(loop);\n  }\n}\n\n/**\r\n * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop=\"never\"`.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance\r\n */\nfunction advance(timestamp, runGlobalEffects = true, state, frame) {\n  if (runGlobalEffects) flushGlobalEffects('before', timestamp);\n  if (!state) for (const root of _roots.values()) update(timestamp, root.store.getState());else update(timestamp, state, frame);\n  if (runGlobalEffects) flushGlobalEffects('after', timestamp);\n}\n\nconst DOM_EVENTS = {\n  onClick: ['click', false],\n  onContextMenu: ['contextmenu', false],\n  onDoubleClick: ['dblclick', false],\n  onWheel: ['wheel', true],\n  onPointerDown: ['pointerdown', true],\n  onPointerUp: ['pointerup', true],\n  onPointerLeave: ['pointerleave', true],\n  onPointerMove: ['pointermove', true],\n  onPointerCancel: ['pointercancel', true],\n  onLostPointerCapture: ['lostpointercapture', true]\n};\n\n/** Default R3F event manager for web */\nfunction createPointerEvents(store) {\n  const {\n    handlePointer\n  } = createEvents(store);\n  return {\n    priority: 1,\n    enabled: true,\n    compute(event, state, previous) {\n      // https://github.com/pmndrs/react-three-fiber/pull/782\n      // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n      state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    },\n    connected: undefined,\n    handlers: Object.keys(DOM_EVENTS).reduce((acc, key) => ({\n      ...acc,\n      [key]: handlePointer(key)\n    }), {}),\n    update: () => {\n      var _internal$lastEvent;\n      const {\n        events,\n        internal\n      } = store.getState();\n      if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n    },\n    connect: target => {\n      const {\n        set,\n        events\n      } = store.getState();\n      events.disconnect == null ? void 0 : events.disconnect();\n      set(state => ({\n        events: {\n          ...state.events,\n          connected: target\n        }\n      }));\n      if (events.handlers) {\n        for (const name in events.handlers) {\n          const event = events.handlers[name];\n          const [eventName, passive] = DOM_EVENTS[name];\n          target.addEventListener(eventName, event, {\n            passive\n          });\n        }\n      }\n    },\n    disconnect: () => {\n      const {\n        set,\n        events\n      } = store.getState();\n      if (events.connected) {\n        if (events.handlers) {\n          for (const name in events.handlers) {\n            const event = events.handlers[name];\n            const [eventName] = DOM_EVENTS[name];\n            events.connected.removeEventListener(eventName, event);\n          }\n        }\n        set(state => ({\n          events: {\n            ...state.events,\n            connected: undefined\n          }\n        }));\n      }\n    }\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _roots: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   act: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   addEffect: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   addTail: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   advance: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   applyProps: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   buildGraph: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   context: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   createEvents: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   createPortal: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   createRoot: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   dispose: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   events: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   extend: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   flushSync: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   getRootState: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   invalidate: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   reconciler: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useFrame: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   useGraph: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   useLoader: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   useStore: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   useThree: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.C)\n/* harmony export */ });\n/* harmony import */ var _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events-e3cb66e2.esm.js */ \"(pages-dir-browser)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(pages-dir-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react_use_measure__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-use-measure */ \"(pages-dir-browser)/./node_modules/react-use-measure/dist/index.js\");\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! its-fine */ \"(pages-dir-browser)/./node_modules/its-fine/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-reconciler/constants */ \"(pages-dir-browser)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-reconciler */ \"(pages-dir-browser)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! scheduler */ \"(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(scheduler__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction CanvasImpl({\n  ref,\n  children,\n  fallback,\n  resize,\n  style,\n  gl,\n  events = _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.f,\n  eventSource,\n  eventPrefix,\n  shadows,\n  linear,\n  flat,\n  legacy,\n  orthographic,\n  frameloop,\n  dpr,\n  performance,\n  raycaster,\n  camera,\n  scene,\n  onPointerMissed,\n  onCreated,\n  ...props\n}) {\n  // Create a known catalogue of Threejs-native elements\n  // This will include the entire THREE namespace by default, users can extend\n  // their own elements by using the createRoot API instead\n  react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(three__WEBPACK_IMPORTED_MODULE_6__), []);\n  const Bridge = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n  const [containerRef, containerRect] = (0,react_use_measure__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({\n    scroll: true,\n    debounce: {\n      scroll: 50,\n      resize: 0\n    },\n    ...resize\n  });\n  const canvasRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  const divRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, () => canvasRef.current);\n  const handlePointerMissed = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(onPointerMissed);\n  const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n  const [error, setError] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n\n  // Suspend this component if block is a promise (2nd run)\n  if (block) throw block;\n  // Throw exception outwards if anything within canvas throws\n  if (error) throw error;\n  const root = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)(() => {\n    const canvas = canvasRef.current;\n    if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n      if (!root.current) root.current = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(canvas);\n      async function run() {\n        await root.current.configure({\n          gl,\n          scene,\n          events,\n          shadows,\n          linear,\n          flat,\n          legacy,\n          orthographic,\n          frameloop,\n          dpr,\n          performance,\n          raycaster,\n          camera,\n          size: containerRect,\n          // Pass mutable reference to onPointerMissed so it's free to update\n          onPointerMissed: (...args) => handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args),\n          onCreated: state => {\n            // Connect to event source\n            state.events.connect == null ? void 0 : state.events.connect(eventSource ? (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(eventSource) ? eventSource.current : eventSource : divRef.current);\n            // Set up compute function\n            if (eventPrefix) {\n              state.setEvents({\n                compute: (event, state) => {\n                  const x = event[eventPrefix + 'X'];\n                  const y = event[eventPrefix + 'Y'];\n                  state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                  state.raycaster.setFromCamera(state.pointer, state.camera);\n                }\n              });\n            }\n            // Call onCreated callback\n            onCreated == null ? void 0 : onCreated(state);\n          }\n        });\n        root.current.render( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Bridge, {\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n            set: setError,\n            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n              fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.B, {\n                set: setBlock\n              }),\n              children: children != null ? children : null\n            })\n          })\n        }));\n      }\n      run();\n    }\n  });\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) return () => (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(canvas);\n  }, []);\n\n  // When the event source is not this div, we need to set pointer-events to none\n  // Or else the canvas will block events from reaching the event source\n  const pointerEvents = eventSource ? 'none' : 'auto';\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n    ref: divRef,\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      pointerEvents,\n      ...style\n    },\n    ...props,\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          display: 'block'\n        },\n        children: fallback\n      })\n    })\n  });\n}\n\n/**\r\n * A DOM canvas which accepts threejs elements as children.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\r\n */\nfunction Canvas(props) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(its_fine__WEBPACK_IMPORTED_MODULE_8__.FiberProvider, {\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CanvasImpl, {\n      ...props\n    })\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function performWorkUntilDeadline() {\n      if (isMessageLoopRunning) {\n        var currentTime = exports.unstable_now();\n        startTime = currentTime;\n        var hasMoreWork = !0;\n        try {\n          a: {\n            isHostCallbackScheduled = !1;\n            isHostTimeoutScheduled &&\n              ((isHostTimeoutScheduled = !1),\n              localClearTimeout(taskTimeoutID),\n              (taskTimeoutID = -1));\n            isPerformingWork = !0;\n            var previousPriorityLevel = currentPriorityLevel;\n            try {\n              b: {\n                advanceTimers(currentTime);\n                for (\n                  currentTask = peek(taskQueue);\n                  null !== currentTask &&\n                  !(\n                    currentTask.expirationTime > currentTime &&\n                    shouldYieldToHost()\n                  );\n\n                ) {\n                  var callback = currentTask.callback;\n                  if (\"function\" === typeof callback) {\n                    currentTask.callback = null;\n                    currentPriorityLevel = currentTask.priorityLevel;\n                    var continuationCallback = callback(\n                      currentTask.expirationTime <= currentTime\n                    );\n                    currentTime = exports.unstable_now();\n                    if (\"function\" === typeof continuationCallback) {\n                      currentTask.callback = continuationCallback;\n                      advanceTimers(currentTime);\n                      hasMoreWork = !0;\n                      break b;\n                    }\n                    currentTask === peek(taskQueue) && pop(taskQueue);\n                    advanceTimers(currentTime);\n                  } else pop(taskQueue);\n                  currentTask = peek(taskQueue);\n                }\n                if (null !== currentTask) hasMoreWork = !0;\n                else {\n                  var firstTimer = peek(timerQueue);\n                  null !== firstTimer &&\n                    requestHostTimeout(\n                      handleTimeout,\n                      firstTimer.startTime - currentTime\n                    );\n                  hasMoreWork = !1;\n                }\n              }\n              break a;\n            } finally {\n              (currentTask = null),\n                (currentPriorityLevel = previousPriorityLevel),\n                (isPerformingWork = !1);\n            }\n            hasMoreWork = void 0;\n          }\n        } finally {\n          hasMoreWork\n            ? schedulePerformWorkUntilDeadline()\n            : (isMessageLoopRunning = !1);\n        }\n      }\n    }\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      a: for (; 0 < index; ) {\n        var parentIndex = (index - 1) >>> 1,\n          parent = heap[parentIndex];\n        if (0 < compare(parent, node))\n          (heap[parentIndex] = node),\n            (heap[index] = parent),\n            (index = parentIndex);\n        else break a;\n      }\n    }\n    function peek(heap) {\n      return 0 === heap.length ? null : heap[0];\n    }\n    function pop(heap) {\n      if (0 === heap.length) return null;\n      var first = heap[0],\n        last = heap.pop();\n      if (last !== first) {\n        heap[0] = last;\n        a: for (\n          var index = 0, length = heap.length, halfLength = length >>> 1;\n          index < halfLength;\n\n        ) {\n          var leftIndex = 2 * (index + 1) - 1,\n            left = heap[leftIndex],\n            rightIndex = leftIndex + 1,\n            right = heap[rightIndex];\n          if (0 > compare(left, last))\n            rightIndex < length && 0 > compare(right, left)\n              ? ((heap[index] = right),\n                (heap[rightIndex] = last),\n                (index = rightIndex))\n              : ((heap[index] = left),\n                (heap[leftIndex] = last),\n                (index = leftIndex));\n          else if (rightIndex < length && 0 > compare(right, last))\n            (heap[index] = right),\n              (heap[rightIndex] = last),\n              (index = rightIndex);\n          else break a;\n        }\n      }\n      return first;\n    }\n    function compare(a, b) {\n      var diff = a.sortIndex - b.sortIndex;\n      return 0 !== diff ? diff : a.id - b.id;\n    }\n    function advanceTimers(currentTime) {\n      for (var timer = peek(timerQueue); null !== timer; ) {\n        if (null === timer.callback) pop(timerQueue);\n        else if (timer.startTime <= currentTime)\n          pop(timerQueue),\n            (timer.sortIndex = timer.expirationTime),\n            push(taskQueue, timer);\n        else break;\n        timer = peek(timerQueue);\n      }\n    }\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = !1;\n      advanceTimers(currentTime);\n      if (!isHostCallbackScheduled)\n        if (null !== peek(taskQueue))\n          (isHostCallbackScheduled = !0), requestHostCallback();\n        else {\n          var firstTimer = peek(timerQueue);\n          null !== firstTimer &&\n            requestHostTimeout(\n              handleTimeout,\n              firstTimer.startTime - currentTime\n            );\n        }\n    }\n    function shouldYieldToHost() {\n      return exports.unstable_now() - startTime < frameInterval ? !1 : !0;\n    }\n    function requestHostCallback() {\n      isMessageLoopRunning ||\n        ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());\n    }\n    function requestHostTimeout(callback, ms) {\n      taskTimeoutID = localSetTimeout(function () {\n        callback(exports.unstable_now());\n      }, ms);\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    exports.unstable_now = void 0;\n    if (\n      \"object\" === typeof performance &&\n      \"function\" === typeof performance.now\n    ) {\n      var localPerformance = performance;\n      exports.unstable_now = function () {\n        return localPerformance.now();\n      };\n    } else {\n      var localDate = Date,\n        initialTime = localDate.now();\n      exports.unstable_now = function () {\n        return localDate.now() - initialTime;\n      };\n    }\n    var taskQueue = [],\n      timerQueue = [],\n      taskIdCounter = 1,\n      currentTask = null,\n      currentPriorityLevel = 3,\n      isPerformingWork = !1,\n      isHostCallbackScheduled = !1,\n      isHostTimeoutScheduled = !1,\n      localSetTimeout = \"function\" === typeof setTimeout ? setTimeout : null,\n      localClearTimeout =\n        \"function\" === typeof clearTimeout ? clearTimeout : null,\n      localSetImmediate =\n        \"undefined\" !== typeof setImmediate ? setImmediate : null,\n      isMessageLoopRunning = !1,\n      taskTimeoutID = -1,\n      frameInterval = 5,\n      startTime = -1;\n    if (\"function\" === typeof localSetImmediate)\n      var schedulePerformWorkUntilDeadline = function () {\n        localSetImmediate(performWorkUntilDeadline);\n      };\n    else if (\"undefined\" !== typeof MessageChannel) {\n      var channel = new MessageChannel(),\n        port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n      schedulePerformWorkUntilDeadline = function () {\n        port.postMessage(null);\n      };\n    } else\n      schedulePerformWorkUntilDeadline = function () {\n        localSetTimeout(performWorkUntilDeadline, 0);\n      };\n    exports.unstable_IdlePriority = 5;\n    exports.unstable_ImmediatePriority = 1;\n    exports.unstable_LowPriority = 4;\n    exports.unstable_NormalPriority = 3;\n    exports.unstable_Profiling = null;\n    exports.unstable_UserBlockingPriority = 2;\n    exports.unstable_cancelCallback = function (task) {\n      task.callback = null;\n    };\n    exports.unstable_continueExecution = function () {\n      isHostCallbackScheduled ||\n        isPerformingWork ||\n        ((isHostCallbackScheduled = !0), requestHostCallback());\n    };\n    exports.unstable_forceFrameRate = function (fps) {\n      0 > fps || 125 < fps\n        ? console.error(\n            \"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"\n          )\n        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);\n    };\n    exports.unstable_getCurrentPriorityLevel = function () {\n      return currentPriorityLevel;\n    };\n    exports.unstable_getFirstCallbackNode = function () {\n      return peek(taskQueue);\n    };\n    exports.unstable_next = function (eventHandler) {\n      switch (currentPriorityLevel) {\n        case 1:\n        case 2:\n        case 3:\n          var priorityLevel = 3;\n          break;\n        default:\n          priorityLevel = currentPriorityLevel;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n    exports.unstable_pauseExecution = function () {};\n    exports.unstable_requestPaint = function () {};\n    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n        default:\n          priorityLevel = 3;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n    exports.unstable_scheduleCallback = function (\n      priorityLevel,\n      callback,\n      options\n    ) {\n      var currentTime = exports.unstable_now();\n      \"object\" === typeof options && null !== options\n        ? ((options = options.delay),\n          (options =\n            \"number\" === typeof options && 0 < options\n              ? currentTime + options\n              : currentTime))\n        : (options = currentTime);\n      switch (priorityLevel) {\n        case 1:\n          var timeout = -1;\n          break;\n        case 2:\n          timeout = 250;\n          break;\n        case 5:\n          timeout = 1073741823;\n          break;\n        case 4:\n          timeout = 1e4;\n          break;\n        default:\n          timeout = 5e3;\n      }\n      timeout = options + timeout;\n      priorityLevel = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: options,\n        expirationTime: timeout,\n        sortIndex: -1\n      };\n      options > currentTime\n        ? ((priorityLevel.sortIndex = options),\n          push(timerQueue, priorityLevel),\n          null === peek(taskQueue) &&\n            priorityLevel === peek(timerQueue) &&\n            (isHostTimeoutScheduled\n              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))\n              : (isHostTimeoutScheduled = !0),\n            requestHostTimeout(handleTimeout, options - currentTime)))\n        : ((priorityLevel.sortIndex = timeout),\n          push(taskQueue, priorityLevel),\n          isHostCallbackScheduled ||\n            isPerformingWork ||\n            ((isHostCallbackScheduled = !0), requestHostCallback()));\n      return priorityLevel;\n    };\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = function (callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZmliZXIvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsdUxBQTBEO0FBQzVEIiwic291cmNlcyI6WyIvVXNlcnMvamVuc2xlcm5zdGFsd2Flcm4vZGV2LzNkLXJvb20vcmVhY3QtM2Qtcm9vbS9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/its-fine/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/its-fine/dist/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FiberProvider: () => (/* binding */ m),\n/* harmony export */   traverseFiber: () => (/* binding */ i),\n/* harmony export */   useContainer: () => (/* binding */ w),\n/* harmony export */   useContextBridge: () => (/* binding */ x),\n/* harmony export */   useContextMap: () => (/* binding */ h),\n/* harmony export */   useFiber: () => (/* binding */ c),\n/* harmony export */   useNearestChild: () => (/* binding */ v),\n/* harmony export */   useNearestParent: () => (/* binding */ y)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n\nconst f = /* @__PURE__ */ (() => {\n  var e, t;\n  return typeof window != \"undefined\" && (((e = window.document) == null ? void 0 : e.createElement) || ((t = window.navigator) == null ? void 0 : t.product) === \"ReactNative\");\n})() ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction i(e, t, r) {\n  if (!e) return;\n  if (r(e) === !0) return e;\n  let n = t ? e.return : e.child;\n  for (; n; ) {\n    const u = i(n, t, r);\n    if (u) return u;\n    n = t ? null : n.sibling;\n  }\n}\nfunction l(e) {\n  try {\n    return Object.defineProperties(e, {\n      _currentRenderer: {\n        get() {\n          return null;\n        },\n        set() {\n        }\n      },\n      _currentRenderer2: {\n        get() {\n          return null;\n        },\n        set() {\n        }\n      }\n    });\n  } catch (t) {\n    return e;\n  }\n}\nconst a = /* @__PURE__ */ l(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null));\nclass m extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  render() {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(a.Provider, { value: this._reactInternals }, this.props.children);\n  }\n}\nfunction c() {\n  const e = react__WEBPACK_IMPORTED_MODULE_0__.useContext(a);\n  if (e === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  const t = react__WEBPACK_IMPORTED_MODULE_0__.useId();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    for (const n of [e, e == null ? void 0 : e.alternate]) {\n      if (!n) continue;\n      const u = i(n, !1, (d) => {\n        let s = d.memoizedState;\n        for (; s; ) {\n          if (s.memoizedState === t) return !0;\n          s = s.next;\n        }\n      });\n      if (u) return u;\n    }\n  }, [e, t]);\n}\nfunction w() {\n  const e = c(), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => i(e, !0, (r) => {\n      var n;\n      return ((n = r.stateNode) == null ? void 0 : n.containerInfo) != null;\n    }),\n    [e]\n  );\n  return t == null ? void 0 : t.stateNode.containerInfo;\n}\nfunction v(e) {\n  const t = c(), r = react__WEBPACK_IMPORTED_MODULE_0__.useRef(void 0);\n  return f(() => {\n    var n;\n    r.current = (n = i(\n      t,\n      !1,\n      (u) => typeof u.type == \"string\" && (e === void 0 || u.type === e)\n    )) == null ? void 0 : n.stateNode;\n  }, [t]), r;\n}\nfunction y(e) {\n  const t = c(), r = react__WEBPACK_IMPORTED_MODULE_0__.useRef(void 0);\n  return f(() => {\n    var n;\n    r.current = (n = i(\n      t,\n      !0,\n      (u) => typeof u.type == \"string\" && (e === void 0 || u.type === e)\n    )) == null ? void 0 : n.stateNode;\n  }, [t]), r;\n}\nconst p = Symbol.for(\"react.context\"), b = (e) => e !== null && typeof e == \"object\" && \"$$typeof\" in e && e.$$typeof === p;\nfunction h() {\n  const e = c(), [t] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => /* @__PURE__ */ new Map());\n  t.clear();\n  let r = e;\n  for (; r; ) {\n    const n = r.type;\n    b(n) && n !== a && !t.has(n) && t.set(n, react__WEBPACK_IMPORTED_MODULE_0__.use(l(n))), r = r.return;\n  }\n  return t;\n}\nfunction x() {\n  const e = h();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => Array.from(e.keys()).reduce(\n      (t, r) => (n) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(r.Provider, { ...n, value: e.get(r) })),\n      (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, { ...t })\n    ),\n    [e]\n  );\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pdHMtZmluZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxDQUFDLE1BQU0sa0RBQWlCLEdBQUcsNENBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEdBQUc7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdEQUFlO0FBQzNELGdCQUFnQiw0Q0FBVztBQUMzQjtBQUNBLDJCQUEyQixnREFBZSxlQUFlLDZCQUE2QjtBQUN0RjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZDQUFZO0FBQ3hCO0FBQ0EsWUFBWSx3Q0FBTztBQUNuQixTQUFTLDBDQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxxQkFBcUIsMENBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUNBQVE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHFCQUFxQix5Q0FBUTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQVU7QUFDakM7QUFDQTtBQUNBLFNBQVMsR0FBRztBQUNaO0FBQ0EsNkNBQTZDLHNDQUFLO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBDQUFTO0FBQ2xCO0FBQ0EsdUNBQXVDLGdEQUFlLDBCQUEwQixnREFBZSxlQUFlLHVCQUF1QjtBQUNySSw2QkFBNkIsZ0RBQWUsTUFBTSxNQUFNO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBVUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL2l0cy1maW5lL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbyBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IGYgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHtcbiAgdmFyIGUsIHQ7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9IFwidW5kZWZpbmVkXCIgJiYgKCgoZSA9IHdpbmRvdy5kb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IGUuY3JlYXRlRWxlbWVudCkgfHwgKCh0ID0gd2luZG93Lm5hdmlnYXRvcikgPT0gbnVsbCA/IHZvaWQgMCA6IHQucHJvZHVjdCkgPT09IFwiUmVhY3ROYXRpdmVcIik7XG59KSgpID8gby51c2VMYXlvdXRFZmZlY3QgOiBvLnVzZUVmZmVjdDtcbmZ1bmN0aW9uIGkoZSwgdCwgcikge1xuICBpZiAoIWUpIHJldHVybjtcbiAgaWYgKHIoZSkgPT09ICEwKSByZXR1cm4gZTtcbiAgbGV0IG4gPSB0ID8gZS5yZXR1cm4gOiBlLmNoaWxkO1xuICBmb3IgKDsgbjsgKSB7XG4gICAgY29uc3QgdSA9IGkobiwgdCwgcik7XG4gICAgaWYgKHUpIHJldHVybiB1O1xuICAgIG4gPSB0ID8gbnVsbCA6IG4uc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gbChlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIHtcbiAgICAgIF9jdXJyZW50UmVuZGVyZXI6IHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBzZXQoKSB7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfY3VycmVudFJlbmRlcmVyMjoge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCgpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoICh0KSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cbmNvbnN0IGEgPSAvKiBAX19QVVJFX18gKi8gbCgvKiBAX19QVVJFX18gKi8gby5jcmVhdGVDb250ZXh0KG51bGwpKTtcbmNsYXNzIG0gZXh0ZW5kcyBvLkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIG8uY3JlYXRlRWxlbWVudChhLlByb3ZpZGVyLCB7IHZhbHVlOiB0aGlzLl9yZWFjdEludGVybmFscyB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxufVxuZnVuY3Rpb24gYygpIHtcbiAgY29uc3QgZSA9IG8udXNlQ29udGV4dChhKTtcbiAgaWYgKGUgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIml0cy1maW5lOiB1c2VGaWJlciBtdXN0IGJlIGNhbGxlZCB3aXRoaW4gYSA8RmliZXJQcm92aWRlciAvPiFcIik7XG4gIGNvbnN0IHQgPSBvLnVzZUlkKCk7XG4gIHJldHVybiBvLnVzZU1lbW8oKCkgPT4ge1xuICAgIGZvciAoY29uc3QgbiBvZiBbZSwgZSA9PSBudWxsID8gdm9pZCAwIDogZS5hbHRlcm5hdGVdKSB7XG4gICAgICBpZiAoIW4pIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdSA9IGkobiwgITEsIChkKSA9PiB7XG4gICAgICAgIGxldCBzID0gZC5tZW1vaXplZFN0YXRlO1xuICAgICAgICBmb3IgKDsgczsgKSB7XG4gICAgICAgICAgaWYgKHMubWVtb2l6ZWRTdGF0ZSA9PT0gdCkgcmV0dXJuICEwO1xuICAgICAgICAgIHMgPSBzLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHUpIHJldHVybiB1O1xuICAgIH1cbiAgfSwgW2UsIHRdKTtcbn1cbmZ1bmN0aW9uIHcoKSB7XG4gIGNvbnN0IGUgPSBjKCksIHQgPSBvLnVzZU1lbW8oXG4gICAgKCkgPT4gaShlLCAhMCwgKHIpID0+IHtcbiAgICAgIHZhciBuO1xuICAgICAgcmV0dXJuICgobiA9IHIuc3RhdGVOb2RlKSA9PSBudWxsID8gdm9pZCAwIDogbi5jb250YWluZXJJbmZvKSAhPSBudWxsO1xuICAgIH0pLFxuICAgIFtlXVxuICApO1xuICByZXR1cm4gdCA9PSBudWxsID8gdm9pZCAwIDogdC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIHYoZSkge1xuICBjb25zdCB0ID0gYygpLCByID0gby51c2VSZWYodm9pZCAwKTtcbiAgcmV0dXJuIGYoKCkgPT4ge1xuICAgIHZhciBuO1xuICAgIHIuY3VycmVudCA9IChuID0gaShcbiAgICAgIHQsXG4gICAgICAhMSxcbiAgICAgICh1KSA9PiB0eXBlb2YgdS50eXBlID09IFwic3RyaW5nXCIgJiYgKGUgPT09IHZvaWQgMCB8fCB1LnR5cGUgPT09IGUpXG4gICAgKSkgPT0gbnVsbCA/IHZvaWQgMCA6IG4uc3RhdGVOb2RlO1xuICB9LCBbdF0pLCByO1xufVxuZnVuY3Rpb24geShlKSB7XG4gIGNvbnN0IHQgPSBjKCksIHIgPSBvLnVzZVJlZih2b2lkIDApO1xuICByZXR1cm4gZigoKSA9PiB7XG4gICAgdmFyIG47XG4gICAgci5jdXJyZW50ID0gKG4gPSBpKFxuICAgICAgdCxcbiAgICAgICEwLFxuICAgICAgKHUpID0+IHR5cGVvZiB1LnR5cGUgPT0gXCJzdHJpbmdcIiAmJiAoZSA9PT0gdm9pZCAwIHx8IHUudHlwZSA9PT0gZSlcbiAgICApKSA9PSBudWxsID8gdm9pZCAwIDogbi5zdGF0ZU5vZGU7XG4gIH0sIFt0XSksIHI7XG59XG5jb25zdCBwID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksIGIgPSAoZSkgPT4gZSAhPT0gbnVsbCAmJiB0eXBlb2YgZSA9PSBcIm9iamVjdFwiICYmIFwiJCR0eXBlb2ZcIiBpbiBlICYmIGUuJCR0eXBlb2YgPT09IHA7XG5mdW5jdGlvbiBoKCkge1xuICBjb25zdCBlID0gYygpLCBbdF0gPSBvLnVzZVN0YXRlKCgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICB0LmNsZWFyKCk7XG4gIGxldCByID0gZTtcbiAgZm9yICg7IHI7ICkge1xuICAgIGNvbnN0IG4gPSByLnR5cGU7XG4gICAgYihuKSAmJiBuICE9PSBhICYmICF0LmhhcyhuKSAmJiB0LnNldChuLCBvLnVzZShsKG4pKSksIHIgPSByLnJldHVybjtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIHgoKSB7XG4gIGNvbnN0IGUgPSBoKCk7XG4gIHJldHVybiBvLnVzZU1lbW8oXG4gICAgKCkgPT4gQXJyYXkuZnJvbShlLmtleXMoKSkucmVkdWNlKFxuICAgICAgKHQsIHIpID0+IChuKSA9PiAvKiBAX19QVVJFX18gKi8gby5jcmVhdGVFbGVtZW50KHQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBvLmNyZWF0ZUVsZW1lbnQoci5Qcm92aWRlciwgeyAuLi5uLCB2YWx1ZTogZS5nZXQocikgfSkpLFxuICAgICAgKHQpID0+IC8qIEBfX1BVUkVfXyAqLyBvLmNyZWF0ZUVsZW1lbnQobSwgeyAuLi50IH0pXG4gICAgKSxcbiAgICBbZV1cbiAgKTtcbn1cbmV4cG9ydCB7XG4gIG0gYXMgRmliZXJQcm92aWRlcixcbiAgaSBhcyB0cmF2ZXJzZUZpYmVyLFxuICB3IGFzIHVzZUNvbnRhaW5lcixcbiAgeCBhcyB1c2VDb250ZXh0QnJpZGdlLFxuICBoIGFzIHVzZUNvbnRleHRNYXAsXG4gIGMgYXMgdXNlRmliZXIsXG4gIHYgYXMgdXNlTmVhcmVzdENoaWxkLFxuICB5IGFzIHVzZU5lYXJlc3RQYXJlbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/its-fine/dist/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  ((exports.ConcurrentRoot = 1),\n  (exports.ContinuousEventPriority = 8),\n  (exports.DefaultEventPriority = 32),\n  (exports.DiscreteEventPriority = 2),\n  (exports.IdleEventPriority = 268435456),\n  (exports.LegacyRoot = 0),\n  (exports.NoEventPriority = 0));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLWNvbnN0YW50cy5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYixLQUFxQztBQUNyQyxJQUFJLHNCQUFzQjtBQUMxQixHQUFHLCtCQUErQjtBQUNsQyxHQUFHLDRCQUE0QjtBQUMvQixHQUFHLDZCQUE2QjtBQUNoQyxHQUFHLHlCQUF5QjtBQUM1QixHQUFHLGtCQUFrQjtBQUNyQixHQUFHLHVCQUF1QiIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL3JlYWN0LXJlY29uY2lsZXIvY2pzL3JlYWN0LXJlY29uY2lsZXItY29uc3RhbnRzLmRldmVsb3BtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LXJlY29uY2lsZXItY29uc3RhbnRzLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJlxuICAoKGV4cG9ydHMuQ29uY3VycmVudFJvb3QgPSAxKSxcbiAgKGV4cG9ydHMuQ29udGludW91c0V2ZW50UHJpb3JpdHkgPSA4KSxcbiAgKGV4cG9ydHMuRGVmYXVsdEV2ZW50UHJpb3JpdHkgPSAzMiksXG4gIChleHBvcnRzLkRpc2NyZXRlRXZlbnRQcmlvcml0eSA9IDIpLFxuICAoZXhwb3J0cy5JZGxlRXZlbnRQcmlvcml0eSA9IDI2ODQzNTQ1NiksXG4gIChleHBvcnRzLkxlZ2FjeVJvb3QgPSAwKSxcbiAgKGV4cG9ydHMuTm9FdmVudFByaW9yaXR5ID0gMCkpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  ((module.exports = function ($$$config) {\n    function findHook(fiber, id) {\n      for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )\n        (fiber = fiber.next), id--;\n      return fiber;\n    }\n    function copyWithSetImpl(obj, path, index, value) {\n      if (index >= path.length) return value;\n      var key = path[index],\n        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);\n      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n      return updated;\n    }\n    function copyWithRename(obj, oldPath, newPath) {\n      if (oldPath.length !== newPath.length)\n        console.warn(\"copyWithRename() expects paths of the same length\");\n      else {\n        for (var i = 0; i < newPath.length - 1; i++)\n          if (oldPath[i] !== newPath[i]) {\n            console.warn(\n              \"copyWithRename() expects paths to be the same except for the deepest key\"\n            );\n            return;\n          }\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      }\n    }\n    function copyWithRenameImpl(obj, oldPath, newPath, index) {\n      var oldKey = oldPath[index],\n        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);\n      index + 1 === oldPath.length\n        ? ((updated[newPath[index]] = updated[oldKey]),\n          isArrayImpl(updated)\n            ? updated.splice(oldKey, 1)\n            : delete updated[oldKey])\n        : (updated[oldKey] = copyWithRenameImpl(\n            obj[oldKey],\n            oldPath,\n            newPath,\n            index + 1\n          ));\n      return updated;\n    }\n    function copyWithDeleteImpl(obj, path, index) {\n      var key = path[index],\n        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);\n      if (index + 1 === path.length)\n        return (\n          isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key],\n          updated\n        );\n      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n      return updated;\n    }\n    function shouldSuspendImpl() {\n      return !1;\n    }\n    function shouldErrorImpl() {\n      return null;\n    }\n    function createFiber(tag, pendingProps, key, mode) {\n      return new FiberNode(tag, pendingProps, key, mode);\n    }\n    function scheduleRoot(root, element) {\n      root.context === emptyContextObject &&\n        (updateContainerSync(element, root, null, null), flushSyncWork());\n    }\n    function scheduleRefresh(root, update) {\n      if (null !== resolveFamily) {\n        var staleFamilies = update.staleFamilies;\n        update = update.updatedFamilies;\n        flushPassiveEffects();\n        scheduleFibersWithFamiliesRecursively(\n          root.current,\n          update,\n          staleFamilies\n        );\n        flushSyncWork();\n      }\n    }\n    function setRefreshHandler(handler) {\n      resolveFamily = handler;\n    }\n    function warnInvalidHookAccess() {\n      console.error(\n        \"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks\"\n      );\n    }\n    function warnInvalidContextAccess() {\n      console.error(\n        \"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\"\n      );\n    }\n    function noop() {}\n    function warnForMissingKey() {}\n    function setToSortedString(set) {\n      var array = [];\n      set.forEach(function (value) {\n        array.push(value);\n      });\n      return array.sort().join(\", \");\n    }\n    function getIteratorFn(maybeIterable) {\n      if (null === maybeIterable || \"object\" !== typeof maybeIterable)\n        return null;\n      maybeIterable =\n        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n        maybeIterable[\"@@iterator\"];\n      return \"function\" === typeof maybeIterable ? maybeIterable : null;\n    }\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function getComponentNameFromFiber(fiber) {\n      var type = fiber.type;\n      switch (fiber.tag) {\n        case 24:\n          return \"Cache\";\n        case 9:\n          return (type._context.displayName || \"Context\") + \".Consumer\";\n        case 10:\n          return (type.displayName || \"Context\") + \".Provider\";\n        case 18:\n          return \"DehydratedFragment\";\n        case 11:\n          return (\n            (fiber = type.render),\n            (fiber = fiber.displayName || fiber.name || \"\"),\n            type.displayName ||\n              (\"\" !== fiber ? \"ForwardRef(\" + fiber + \")\" : \"ForwardRef\")\n          );\n        case 7:\n          return \"Fragment\";\n        case 26:\n        case 27:\n        case 5:\n          return type;\n        case 4:\n          return \"Portal\";\n        case 3:\n          return \"Root\";\n        case 6:\n          return \"Text\";\n        case 16:\n          return getComponentNameFromType(type);\n        case 8:\n          return type === REACT_STRICT_MODE_TYPE ? \"StrictMode\" : \"Mode\";\n        case 22:\n          return \"Offscreen\";\n        case 12:\n          return \"Profiler\";\n        case 21:\n          return \"Scope\";\n        case 13:\n          return \"Suspense\";\n        case 19:\n          return \"SuspenseList\";\n        case 25:\n          return \"TracingMarker\";\n        case 1:\n        case 0:\n        case 14:\n        case 15:\n          if (\"function\" === typeof type)\n            return type.displayName || type.name || null;\n          if (\"string\" === typeof type) return type;\n          break;\n        case 29:\n          type = fiber._debugInfo;\n          if (null != type)\n            for (var i = type.length - 1; 0 <= i; i--)\n              if (\"string\" === typeof type[i].name) return type[i].name;\n          if (null !== fiber.return)\n            return getComponentNameFromFiber(fiber.return);\n      }\n      return null;\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeFiber(fiber) {\n      switch (fiber.tag) {\n        case 26:\n        case 27:\n        case 5:\n          return describeBuiltInComponentFrame(fiber.type);\n        case 16:\n          return describeBuiltInComponentFrame(\"Lazy\");\n        case 13:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case 19:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n        case 0:\n        case 15:\n          return (fiber = describeNativeComponentFrame(fiber.type, !1)), fiber;\n        case 11:\n          return (\n            (fiber = describeNativeComponentFrame(fiber.type.render, !1)), fiber\n          );\n        case 1:\n          return (fiber = describeNativeComponentFrame(fiber.type, !0)), fiber;\n        default:\n          return \"\";\n      }\n    }\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = \"\";\n        do {\n          info += describeFiber(workInProgress);\n          var debugInfo = workInProgress._debugInfo;\n          if (debugInfo)\n            for (var i = debugInfo.length - 1; 0 <= i; i--) {\n              var entry = debugInfo[i];\n              if (\"string\" === typeof entry.name) {\n                var JSCompiler_temp_const = info,\n                  env = entry.env;\n                var JSCompiler_inline_result = describeBuiltInComponentFrame(\n                  entry.name + (env ? \" [\" + env + \"]\" : \"\")\n                );\n                info = JSCompiler_temp_const + JSCompiler_inline_result;\n              }\n            }\n          workInProgress = workInProgress.return;\n        } while (workInProgress);\n        return info;\n      } catch (x) {\n        return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n      }\n    }\n    function getCurrentFiberStackInDev() {\n      return null === current ? \"\" : getStackByFiberInDevAndProd(current);\n    }\n    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {\n      var previousFiber = current;\n      ReactSharedInternals.getCurrentStack =\n        null === fiber ? null : getCurrentFiberStackInDev;\n      isRendering = !1;\n      current = fiber;\n      try {\n        return callback(arg0, arg1, arg2, arg3, arg4);\n      } finally {\n        current = previousFiber;\n      }\n      throw Error(\n        \"runWithFiberInDEV should never be called in production. This is a bug in React.\"\n      );\n    }\n    function getNearestMountedFiber(fiber) {\n      var node = fiber,\n        nearestMounted = fiber;\n      if (fiber.alternate) for (; node.return; ) node = node.return;\n      else {\n        fiber = node;\n        do\n          (node = fiber),\n            0 !== (node.flags & 4098) && (nearestMounted = node.return),\n            (fiber = node.return);\n        while (fiber);\n      }\n      return 3 === node.tag ? nearestMounted : null;\n    }\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber)\n        throw Error(\"Unable to find node on an unmounted component.\");\n    }\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n      if (!alternate) {\n        alternate = getNearestMountedFiber(fiber);\n        if (null === alternate)\n          throw Error(\"Unable to find node on an unmounted component.\");\n        return alternate !== fiber ? null : fiber;\n      }\n      for (var a = fiber, b = alternate; ; ) {\n        var parentA = a.return;\n        if (null === parentA) break;\n        var parentB = parentA.alternate;\n        if (null === parentB) {\n          b = parentA.return;\n          if (null !== b) {\n            a = b;\n            continue;\n          }\n          break;\n        }\n        if (parentA.child === parentB.child) {\n          for (parentB = parentA.child; parentB; ) {\n            if (parentB === a) return assertIsMounted(parentA), fiber;\n            if (parentB === b) return assertIsMounted(parentA), alternate;\n            parentB = parentB.sibling;\n          }\n          throw Error(\"Unable to find node on an unmounted component.\");\n        }\n        if (a.return !== b.return) (a = parentA), (b = parentB);\n        else {\n          for (var didFindChild = !1, _child = parentA.child; _child; ) {\n            if (_child === a) {\n              didFindChild = !0;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n            if (_child === b) {\n              didFindChild = !0;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n            _child = _child.sibling;\n          }\n          if (!didFindChild) {\n            for (_child = parentB.child; _child; ) {\n              if (_child === a) {\n                didFindChild = !0;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n              if (_child === b) {\n                didFindChild = !0;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n              _child = _child.sibling;\n            }\n            if (!didFindChild)\n              throw Error(\n                \"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.\"\n              );\n          }\n        }\n        if (a.alternate !== b)\n          throw Error(\n            \"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.\"\n          );\n      }\n      if (3 !== a.tag)\n        throw Error(\"Unable to find node on an unmounted component.\");\n      return a.stateNode.current === a ? fiber : alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      parent = findCurrentFiberUsingSlowPath(parent);\n      return null !== parent ? findCurrentHostFiberImpl(parent) : null;\n    }\n    function findCurrentHostFiberImpl(node) {\n      var tag = node.tag;\n      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;\n      for (node = node.child; null !== node; ) {\n        tag = findCurrentHostFiberImpl(node);\n        if (null !== tag) return tag;\n        node = node.sibling;\n      }\n      return null;\n    }\n    function findCurrentHostFiberWithNoPortalsImpl(node) {\n      var tag = node.tag;\n      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;\n      for (node = node.child; null !== node; ) {\n        if (\n          4 !== node.tag &&\n          ((tag = findCurrentHostFiberWithNoPortalsImpl(node)), null !== tag)\n        )\n          return tag;\n        node = node.sibling;\n      }\n      return null;\n    }\n    function createCursor(defaultValue) {\n      return { current: defaultValue };\n    }\n    function pop(cursor, fiber) {\n      0 > index$jscomp$0\n        ? console.error(\"Unexpected pop.\")\n        : (fiber !== fiberStack[index$jscomp$0] &&\n            console.error(\"Unexpected Fiber popped.\"),\n          (cursor.current = valueStack[index$jscomp$0]),\n          (valueStack[index$jscomp$0] = null),\n          (fiberStack[index$jscomp$0] = null),\n          index$jscomp$0--);\n    }\n    function push(cursor, value, fiber) {\n      index$jscomp$0++;\n      valueStack[index$jscomp$0] = cursor.current;\n      fiberStack[index$jscomp$0] = fiber;\n      cursor.current = value;\n    }\n    function clz32Fallback(x) {\n      x >>>= 0;\n      return 0 === x ? 32 : (31 - ((log$1(x) / LN2) | 0)) | 0;\n    }\n    function getLabelForLane(lane) {\n      if (lane & 1) return \"SyncHydrationLane\";\n      if (lane & 2) return \"Sync\";\n      if (lane & 4) return \"InputContinuousHydration\";\n      if (lane & 8) return \"InputContinuous\";\n      if (lane & 16) return \"DefaultHydration\";\n      if (lane & 32) return \"Default\";\n      if (lane & 64) return \"TransitionHydration\";\n      if (lane & 4194176) return \"Transition\";\n      if (lane & 62914560) return \"Retry\";\n      if (lane & 67108864) return \"SelectiveHydration\";\n      if (lane & 134217728) return \"IdleHydration\";\n      if (lane & 268435456) return \"Idle\";\n      if (lane & 536870912) return \"Offscreen\";\n      if (lane & 1073741824) return \"Deferred\";\n    }\n    function getHighestPriorityLanes(lanes) {\n      var pendingSyncLanes = lanes & 42;\n      if (0 !== pendingSyncLanes) return pendingSyncLanes;\n      switch (lanes & -lanes) {\n        case 1:\n          return 1;\n        case 2:\n          return 2;\n        case 4:\n          return 4;\n        case 8:\n          return 8;\n        case 16:\n          return 16;\n        case 32:\n          return 32;\n        case 64:\n          return 64;\n        case 128:\n        case 256:\n        case 512:\n        case 1024:\n        case 2048:\n        case 4096:\n        case 8192:\n        case 16384:\n        case 32768:\n        case 65536:\n        case 131072:\n        case 262144:\n        case 524288:\n        case 1048576:\n        case 2097152:\n          return lanes & 4194176;\n        case 4194304:\n        case 8388608:\n        case 16777216:\n        case 33554432:\n          return lanes & 62914560;\n        case 67108864:\n          return 67108864;\n        case 134217728:\n          return 134217728;\n        case 268435456:\n          return 268435456;\n        case 536870912:\n          return 536870912;\n        case 1073741824:\n          return 0;\n        default:\n          return (\n            console.error(\n              \"Should have found matching lanes. This is a bug in React.\"\n            ),\n            lanes\n          );\n      }\n    }\n    function getNextLanes(root, wipLanes) {\n      var pendingLanes = root.pendingLanes;\n      if (0 === pendingLanes) return 0;\n      var nextLanes = 0,\n        suspendedLanes = root.suspendedLanes,\n        pingedLanes = root.pingedLanes,\n        warmLanes = root.warmLanes;\n      root = 0 !== root.finishedLanes;\n      var nonIdlePendingLanes = pendingLanes & 134217727;\n      0 !== nonIdlePendingLanes\n        ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),\n          0 !== pendingLanes\n            ? (nextLanes = getHighestPriorityLanes(pendingLanes))\n            : ((pingedLanes &= nonIdlePendingLanes),\n              0 !== pingedLanes\n                ? (nextLanes = getHighestPriorityLanes(pingedLanes))\n                : root ||\n                  ((warmLanes = nonIdlePendingLanes & ~warmLanes),\n                  0 !== warmLanes &&\n                    (nextLanes = getHighestPriorityLanes(warmLanes)))))\n        : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),\n          0 !== nonIdlePendingLanes\n            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))\n            : 0 !== pingedLanes\n              ? (nextLanes = getHighestPriorityLanes(pingedLanes))\n              : root ||\n                ((warmLanes = pendingLanes & ~warmLanes),\n                0 !== warmLanes &&\n                  (nextLanes = getHighestPriorityLanes(warmLanes))));\n      return 0 === nextLanes\n        ? 0\n        : 0 !== wipLanes &&\n            wipLanes !== nextLanes &&\n            0 === (wipLanes & suspendedLanes) &&\n            ((suspendedLanes = nextLanes & -nextLanes),\n            (warmLanes = wipLanes & -wipLanes),\n            suspendedLanes >= warmLanes ||\n              (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))\n          ? wipLanes\n          : nextLanes;\n    }\n    function checkIfRootIsPrerendering(root, renderLanes) {\n      return (\n        0 ===\n        (root.pendingLanes &\n          ~(root.suspendedLanes & ~root.pingedLanes) &\n          renderLanes)\n      );\n    }\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case 1:\n        case 2:\n        case 4:\n        case 8:\n          return currentTime + 250;\n        case 16:\n        case 32:\n        case 64:\n        case 128:\n        case 256:\n        case 512:\n        case 1024:\n        case 2048:\n        case 4096:\n        case 8192:\n        case 16384:\n        case 32768:\n        case 65536:\n        case 131072:\n        case 262144:\n        case 524288:\n        case 1048576:\n        case 2097152:\n          return currentTime + 5e3;\n        case 4194304:\n        case 8388608:\n        case 16777216:\n        case 33554432:\n          return -1;\n        case 67108864:\n        case 134217728:\n        case 268435456:\n        case 536870912:\n        case 1073741824:\n          return -1;\n        default:\n          return (\n            console.error(\n              \"Should have found matching lanes. This is a bug in React.\"\n            ),\n            -1\n          );\n      }\n    }\n    function claimNextTransitionLane() {\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n      0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);\n      return lane;\n    }\n    function createLaneMap(initial) {\n      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);\n      return laneMap;\n    }\n    function markRootUpdated$1(root, updateLane) {\n      root.pendingLanes |= updateLane;\n      268435456 !== updateLane &&\n        ((root.suspendedLanes = 0),\n        (root.pingedLanes = 0),\n        (root.warmLanes = 0));\n    }\n    function markRootFinished(\n      root,\n      finishedLanes,\n      remainingLanes,\n      spawnedLane,\n      updatedLanes,\n      suspendedRetryLanes\n    ) {\n      var previouslyPendingLanes = root.pendingLanes;\n      root.pendingLanes = remainingLanes;\n      root.suspendedLanes = 0;\n      root.pingedLanes = 0;\n      root.warmLanes = 0;\n      root.expiredLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      root.errorRecoveryDisabledLanes &= remainingLanes;\n      root.shellSuspendCounter = 0;\n      var entanglements = root.entanglements,\n        expirationTimes = root.expirationTimes,\n        hiddenUpdates = root.hiddenUpdates;\n      for (\n        remainingLanes = previouslyPendingLanes & ~remainingLanes;\n        0 < remainingLanes;\n\n      ) {\n        var index = 31 - clz32(remainingLanes),\n          lane = 1 << index;\n        entanglements[index] = 0;\n        expirationTimes[index] = -1;\n        var hiddenUpdatesForLane = hiddenUpdates[index];\n        if (null !== hiddenUpdatesForLane)\n          for (\n            hiddenUpdates[index] = null, index = 0;\n            index < hiddenUpdatesForLane.length;\n            index++\n          ) {\n            var update = hiddenUpdatesForLane[index];\n            null !== update && (update.lane &= -536870913);\n          }\n        remainingLanes &= ~lane;\n      }\n      0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);\n      0 !== suspendedRetryLanes &&\n        0 === updatedLanes &&\n        0 !== root.tag &&\n        (root.suspendedLanes |=\n          suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));\n    }\n    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n      root.pendingLanes |= spawnedLane;\n      root.suspendedLanes &= ~spawnedLane;\n      var spawnedLaneIndex = 31 - clz32(spawnedLane);\n      root.entangledLanes |= spawnedLane;\n      root.entanglements[spawnedLaneIndex] =\n        root.entanglements[spawnedLaneIndex] |\n        1073741824 |\n        (entangledLanes & 4194218);\n    }\n    function markRootEntangled(root, entangledLanes) {\n      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n      for (root = root.entanglements; rootEntangledLanes; ) {\n        var index = 31 - clz32(rootEntangledLanes),\n          lane = 1 << index;\n        (lane & entangledLanes) | (root[index] & entangledLanes) &&\n          (root[index] |= entangledLanes);\n        rootEntangledLanes &= ~lane;\n      }\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (isDevToolsPresent)\n        for (root = root.pendingUpdatersLaneMap; 0 < lanes; ) {\n          var index = 31 - clz32(lanes),\n            lane = 1 << index;\n          root[index].add(fiber);\n          lanes &= ~lane;\n        }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (isDevToolsPresent)\n        for (\n          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap,\n            memoizedUpdaters = root.memoizedUpdaters;\n          0 < lanes;\n\n        ) {\n          var index = 31 - clz32(lanes);\n          root = 1 << index;\n          index = pendingUpdatersLaneMap[index];\n          0 < index.size &&\n            (index.forEach(function (fiber) {\n              var alternate = fiber.alternate;\n              (null !== alternate && memoizedUpdaters.has(alternate)) ||\n                memoizedUpdaters.add(fiber);\n            }),\n            index.clear());\n          lanes &= ~root;\n        }\n    }\n    function lanesToEventPriority(lanes) {\n      lanes &= -lanes;\n      return 2 < lanes\n        ? 8 < lanes\n          ? 0 !== (lanes & 134217727)\n            ? 32\n            : 268435456\n          : 8\n        : 2;\n    }\n    function injectInternals(internals) {\n      if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n      if (hook.isDisabled) return !0;\n      if (!hook.supportsFiber)\n        return (\n          console.error(\n            \"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools\"\n          ),\n          !0\n        );\n      try {\n        (rendererID = hook.inject(internals)), (injectedHook = hook);\n      } catch (err) {\n        console.error(\"React instrumentation encountered an error: %s.\", err);\n      }\n      return hook.checkDCE ? !0 : !1;\n    }\n    function onCommitRoot$1(root, eventPriority) {\n      if (injectedHook && \"function\" === typeof injectedHook.onCommitFiberRoot)\n        try {\n          var didError = 128 === (root.current.flags & 128);\n          switch (eventPriority) {\n            case 2:\n              var schedulerPriority = ImmediatePriority;\n              break;\n            case 8:\n              schedulerPriority = UserBlockingPriority;\n              break;\n            case 32:\n              schedulerPriority = NormalPriority$1;\n              break;\n            case 268435456:\n              schedulerPriority = IdlePriority;\n              break;\n            default:\n              schedulerPriority = NormalPriority$1;\n          }\n          injectedHook.onCommitFiberRoot(\n            rendererID,\n            root,\n            schedulerPriority,\n            didError\n          );\n        } catch (err) {\n          hasLoggedError ||\n            ((hasLoggedError = !0),\n            console.error(\n              \"React instrumentation encountered an error: %s\",\n              err\n            ));\n        }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      \"function\" === typeof log &&\n        unstable_setDisableYieldValue(newIsStrictMode);\n      if (injectedHook && \"function\" === typeof injectedHook.setStrictMode)\n        try {\n          injectedHook.setStrictMode(rendererID, newIsStrictMode);\n        } catch (err) {\n          hasLoggedError ||\n            ((hasLoggedError = !0),\n            console.error(\n              \"React instrumentation encountered an error: %s\",\n              err\n            ));\n        }\n    }\n    function injectProfilingHooks(profilingHooks) {\n      injectedProfilingHooks = profilingHooks;\n    }\n    function markCommitStopped() {\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markCommitStopped &&\n        injectedProfilingHooks.markCommitStopped();\n    }\n    function markComponentRenderStarted(fiber) {\n      null !== injectedProfilingHooks &&\n        \"function\" ===\n          typeof injectedProfilingHooks.markComponentRenderStarted &&\n        injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n    function markComponentRenderStopped() {\n      null !== injectedProfilingHooks &&\n        \"function\" ===\n          typeof injectedProfilingHooks.markComponentRenderStopped &&\n        injectedProfilingHooks.markComponentRenderStopped();\n    }\n    function markRenderStarted(lanes) {\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markRenderStarted &&\n        injectedProfilingHooks.markRenderStarted(lanes);\n    }\n    function markRenderStopped() {\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markRenderStopped &&\n        injectedProfilingHooks.markRenderStopped();\n    }\n    function markStateUpdateScheduled(fiber, lane) {\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markStateUpdateScheduled &&\n        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n    function is(x, y) {\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n    }\n    function createCapturedValueAtFiber(value, source) {\n      if (\"object\" === typeof value && null !== value) {\n        var existing = CapturedStacks.get(value);\n        if (void 0 !== existing) return existing;\n        source = {\n          value: value,\n          source: source,\n          stack: getStackByFiberInDevAndProd(source)\n        };\n        CapturedStacks.set(value, source);\n        return source;\n      }\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source)\n      };\n    }\n    function pushTreeFork(workInProgress, totalChildren) {\n      warnIfNotHydrating();\n      forkStack[forkStackIndex++] = treeForkCount;\n      forkStack[forkStackIndex++] = treeForkProvider;\n      treeForkProvider = workInProgress;\n      treeForkCount = totalChildren;\n    }\n    function pushTreeId(workInProgress, totalChildren, index) {\n      warnIfNotHydrating();\n      idStack[idStackIndex++] = treeContextId;\n      idStack[idStackIndex++] = treeContextOverflow;\n      idStack[idStackIndex++] = treeContextProvider;\n      treeContextProvider = workInProgress;\n      var baseIdWithLeadingBit = treeContextId;\n      workInProgress = treeContextOverflow;\n      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;\n      baseIdWithLeadingBit &= ~(1 << baseLength);\n      index += 1;\n      var length = 32 - clz32(totalChildren) + baseLength;\n      if (30 < length) {\n        var numberOfOverflowBits = baseLength - (baseLength % 5);\n        length = (\n          baseIdWithLeadingBit &\n          ((1 << numberOfOverflowBits) - 1)\n        ).toString(32);\n        baseIdWithLeadingBit >>= numberOfOverflowBits;\n        baseLength -= numberOfOverflowBits;\n        treeContextId =\n          (1 << (32 - clz32(totalChildren) + baseLength)) |\n          (index << baseLength) |\n          baseIdWithLeadingBit;\n        treeContextOverflow = length + workInProgress;\n      } else\n        (treeContextId =\n          (1 << length) | (index << baseLength) | baseIdWithLeadingBit),\n          (treeContextOverflow = workInProgress);\n    }\n    function pushMaterializedTreeId(workInProgress) {\n      warnIfNotHydrating();\n      null !== workInProgress.return &&\n        (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));\n    }\n    function popTreeContext(workInProgress) {\n      for (; workInProgress === treeForkProvider; )\n        (treeForkProvider = forkStack[--forkStackIndex]),\n          (forkStack[forkStackIndex] = null),\n          (treeForkCount = forkStack[--forkStackIndex]),\n          (forkStack[forkStackIndex] = null);\n      for (; workInProgress === treeContextProvider; )\n        (treeContextProvider = idStack[--idStackIndex]),\n          (idStack[idStackIndex] = null),\n          (treeContextOverflow = idStack[--idStackIndex]),\n          (idStack[idStackIndex] = null),\n          (treeContextId = idStack[--idStackIndex]),\n          (idStack[idStackIndex] = null);\n    }\n    function warnIfNotHydrating() {\n      isHydrating ||\n        console.error(\n          \"Expected to be hydrating. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function requiredContext(c) {\n      null === c &&\n        console.error(\n          \"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      return c;\n    }\n    function pushHostContainer(fiber, nextRootInstance) {\n      push(rootInstanceStackCursor, nextRootInstance, fiber);\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor, null, fiber);\n      nextRootInstance = getRootHostContext(nextRootInstance);\n      pop(contextStackCursor, fiber);\n      push(contextStackCursor, nextRootInstance, fiber);\n    }\n    function popHostContainer(fiber) {\n      pop(contextStackCursor, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n    function getHostContext() {\n      return requiredContext(contextStackCursor.current);\n    }\n    function pushHostContext(fiber) {\n      null !== fiber.memoizedState &&\n        push(hostTransitionProviderCursor, fiber, fiber);\n      var context = requiredContext(contextStackCursor.current),\n        nextContext = getChildHostContext(context, fiber.type);\n      context !== nextContext &&\n        (push(contextFiberStackCursor, fiber, fiber),\n        push(contextStackCursor, nextContext, fiber));\n    }\n    function popHostContext(fiber) {\n      contextFiberStackCursor.current === fiber &&\n        (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));\n      hostTransitionProviderCursor.current === fiber &&\n        (pop(hostTransitionProviderCursor, fiber),\n        isPrimaryRenderer\n          ? (HostTransitionContext._currentValue = NotPendingTransition)\n          : (HostTransitionContext._currentValue2 = NotPendingTransition));\n    }\n    function findNotableNode(node, indent) {\n      return void 0 === node.serverProps &&\n        0 === node.serverTail.length &&\n        1 === node.children.length &&\n        3 < node.distanceFromLeaf &&\n        node.distanceFromLeaf > 15 - indent\n        ? findNotableNode(node.children[0], indent)\n        : node;\n    }\n    function indentation(indent) {\n      return \"  \" + \"  \".repeat(indent);\n    }\n    function added(indent) {\n      return \"+ \" + \"  \".repeat(indent);\n    }\n    function removed(indent) {\n      return \"- \" + \"  \".repeat(indent);\n    }\n    function describeFiberType(fiber) {\n      switch (fiber.tag) {\n        case 26:\n        case 27:\n        case 5:\n          return fiber.type;\n        case 16:\n          return \"Lazy\";\n        case 13:\n          return \"Suspense\";\n        case 19:\n          return \"SuspenseList\";\n        case 0:\n        case 15:\n          return (fiber = fiber.type), fiber.displayName || fiber.name || null;\n        case 11:\n          return (\n            (fiber = fiber.type.render), fiber.displayName || fiber.name || null\n          );\n        case 1:\n          return (fiber = fiber.type), fiber.displayName || fiber.name || null;\n        default:\n          return null;\n      }\n    }\n    function describeTextNode(content, maxLength) {\n      return needsEscaping.test(content)\n        ? ((content = JSON.stringify(content)),\n          content.length > maxLength - 2\n            ? 8 > maxLength\n              ? '{\"...\"}'\n              : \"{\" + content.slice(0, maxLength - 7) + '...\"}'\n            : \"{\" + content + \"}\")\n        : content.length > maxLength\n          ? 5 > maxLength\n            ? '{\"...\"}'\n            : content.slice(0, maxLength - 3) + \"...\"\n          : content;\n    }\n    function describeTextDiff(clientText, serverProps, indent) {\n      var maxLength = 120 - 2 * indent;\n      if (null === serverProps)\n        return added(indent) + describeTextNode(clientText, maxLength) + \"\\n\";\n      if (\"string\" === typeof serverProps) {\n        for (\n          var firstDiff = 0;\n          firstDiff < serverProps.length &&\n          firstDiff < clientText.length &&\n          serverProps.charCodeAt(firstDiff) ===\n            clientText.charCodeAt(firstDiff);\n          firstDiff++\n        );\n        firstDiff > maxLength - 8 &&\n          10 < firstDiff &&\n          ((clientText = \"...\" + clientText.slice(firstDiff - 8)),\n          (serverProps = \"...\" + serverProps.slice(firstDiff - 8)));\n        return (\n          added(indent) +\n          describeTextNode(clientText, maxLength) +\n          \"\\n\" +\n          removed(indent) +\n          describeTextNode(serverProps, maxLength) +\n          \"\\n\"\n        );\n      }\n      return (\n        indentation(indent) + describeTextNode(clientText, maxLength) + \"\\n\"\n      );\n    }\n    function objectName(object) {\n      return Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object (.*)\\]$/, function (m, p0) {\n          return p0;\n        });\n    }\n    function describeValue(value, maxLength) {\n      switch (typeof value) {\n        case \"string\":\n          return (\n            (value = JSON.stringify(value)),\n            value.length > maxLength\n              ? 5 > maxLength\n                ? '\"...\"'\n                : value.slice(0, maxLength - 4) + '...\"'\n              : value\n          );\n        case \"object\":\n          if (null === value) return \"null\";\n          if (isArrayImpl(value)) return \"[...]\";\n          if (value.$$typeof === REACT_ELEMENT_TYPE)\n            return (maxLength = getComponentNameFromType(value.type))\n              ? \"<\" + maxLength + \">\"\n              : \"<...>\";\n          var name = objectName(value);\n          if (\"Object\" === name) {\n            name = \"\";\n            maxLength -= 2;\n            for (var propName in value)\n              if (value.hasOwnProperty(propName)) {\n                var jsonPropName = JSON.stringify(propName);\n                jsonPropName !== '\"' + propName + '\"' &&\n                  (propName = jsonPropName);\n                maxLength -= propName.length - 2;\n                jsonPropName = describeValue(\n                  value[propName],\n                  15 > maxLength ? maxLength : 15\n                );\n                maxLength -= jsonPropName.length;\n                if (0 > maxLength) {\n                  name += \"\" === name ? \"...\" : \", ...\";\n                  break;\n                }\n                name +=\n                  (\"\" === name ? \"\" : \",\") + propName + \":\" + jsonPropName;\n              }\n            return \"{\" + name + \"}\";\n          }\n          return name;\n        case \"function\":\n          return (maxLength = value.displayName || value.name)\n            ? \"function \" + maxLength\n            : \"function\";\n        default:\n          return String(value);\n      }\n    }\n    function describePropValue(value, maxLength) {\n      return \"string\" !== typeof value || needsEscaping.test(value)\n        ? \"{\" + describeValue(value, maxLength - 2) + \"}\"\n        : value.length > maxLength - 2\n          ? 5 > maxLength\n            ? '\"...\"'\n            : '\"' + value.slice(0, maxLength - 5) + '...\"'\n          : '\"' + value + '\"';\n    }\n    function describeExpandedElement(type, props, rowPrefix) {\n      var remainingRowLength = 120 - rowPrefix.length - type.length,\n        properties = [],\n        propName;\n      for (propName in props)\n        if (props.hasOwnProperty(propName) && \"children\" !== propName) {\n          var propValue = describePropValue(\n            props[propName],\n            120 - rowPrefix.length - propName.length - 1\n          );\n          remainingRowLength -= propName.length + propValue.length + 2;\n          properties.push(propName + \"=\" + propValue);\n        }\n      return 0 === properties.length\n        ? rowPrefix + \"<\" + type + \">\\n\"\n        : 0 < remainingRowLength\n          ? rowPrefix + \"<\" + type + \" \" + properties.join(\" \") + \">\\n\"\n          : rowPrefix +\n            \"<\" +\n            type +\n            \"\\n\" +\n            rowPrefix +\n            \"  \" +\n            properties.join(\"\\n\" + rowPrefix + \"  \") +\n            \"\\n\" +\n            rowPrefix +\n            \">\\n\";\n    }\n    function describePropertiesDiff(clientObject, serverObject, indent) {\n      var properties = \"\",\n        remainingServerProperties = assign({}, serverObject),\n        propName;\n      for (propName in clientObject)\n        if (clientObject.hasOwnProperty(propName)) {\n          delete remainingServerProperties[propName];\n          var maxLength = 120 - 2 * indent - propName.length - 2,\n            clientPropValue = describeValue(clientObject[propName], maxLength);\n          serverObject.hasOwnProperty(propName)\n            ? ((maxLength = describeValue(serverObject[propName], maxLength)),\n              (properties +=\n                added(indent) + propName + \": \" + clientPropValue + \"\\n\"),\n              (properties +=\n                removed(indent) + propName + \": \" + maxLength + \"\\n\"))\n            : (properties +=\n                added(indent) + propName + \": \" + clientPropValue + \"\\n\");\n        }\n      for (var _propName in remainingServerProperties)\n        remainingServerProperties.hasOwnProperty(_propName) &&\n          ((clientObject = describeValue(\n            remainingServerProperties[_propName],\n            120 - 2 * indent - _propName.length - 2\n          )),\n          (properties +=\n            removed(indent) + _propName + \": \" + clientObject + \"\\n\"));\n      return properties;\n    }\n    function describeElementDiff(type, clientProps, serverProps, indent) {\n      var content = \"\",\n        serverPropNames = new Map();\n      for (propName$jscomp$0 in serverProps)\n        serverProps.hasOwnProperty(propName$jscomp$0) &&\n          serverPropNames.set(\n            propName$jscomp$0.toLowerCase(),\n            propName$jscomp$0\n          );\n      if (1 === serverPropNames.size && serverPropNames.has(\"children\"))\n        content += describeExpandedElement(\n          type,\n          clientProps,\n          indentation(indent)\n        );\n      else {\n        for (var _propName2 in clientProps)\n          if (\n            clientProps.hasOwnProperty(_propName2) &&\n            \"children\" !== _propName2\n          ) {\n            var maxLength$jscomp$0 =\n                120 - 2 * (indent + 1) - _propName2.length - 1,\n              serverPropName = serverPropNames.get(_propName2.toLowerCase());\n            if (void 0 !== serverPropName) {\n              serverPropNames.delete(_propName2.toLowerCase());\n              var propName$jscomp$0 = clientProps[_propName2];\n              serverPropName = serverProps[serverPropName];\n              var clientPropValue = describePropValue(\n                propName$jscomp$0,\n                maxLength$jscomp$0\n              );\n              maxLength$jscomp$0 = describePropValue(\n                serverPropName,\n                maxLength$jscomp$0\n              );\n              \"object\" === typeof propName$jscomp$0 &&\n              null !== propName$jscomp$0 &&\n              \"object\" === typeof serverPropName &&\n              null !== serverPropName &&\n              \"Object\" === objectName(propName$jscomp$0) &&\n              \"Object\" === objectName(serverPropName) &&\n              (2 < Object.keys(propName$jscomp$0).length ||\n                2 < Object.keys(serverPropName).length ||\n                -1 < clientPropValue.indexOf(\"...\") ||\n                -1 < maxLength$jscomp$0.indexOf(\"...\"))\n                ? (content +=\n                    indentation(indent + 1) +\n                    _propName2 +\n                    \"={{\\n\" +\n                    describePropertiesDiff(\n                      propName$jscomp$0,\n                      serverPropName,\n                      indent + 2\n                    ) +\n                    indentation(indent + 1) +\n                    \"}}\\n\")\n                : ((content +=\n                    added(indent + 1) +\n                    _propName2 +\n                    \"=\" +\n                    clientPropValue +\n                    \"\\n\"),\n                  (content +=\n                    removed(indent + 1) +\n                    _propName2 +\n                    \"=\" +\n                    maxLength$jscomp$0 +\n                    \"\\n\"));\n            } else\n              content +=\n                indentation(indent + 1) +\n                _propName2 +\n                \"=\" +\n                describePropValue(clientProps[_propName2], maxLength$jscomp$0) +\n                \"\\n\";\n          }\n        serverPropNames.forEach(function (propName) {\n          if (\"children\" !== propName) {\n            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;\n            content +=\n              removed(indent + 1) +\n              propName +\n              \"=\" +\n              describePropValue(serverProps[propName], maxLength) +\n              \"\\n\";\n          }\n        });\n        content =\n          \"\" === content\n            ? indentation(indent) + \"<\" + type + \">\\n\"\n            : indentation(indent) +\n              \"<\" +\n              type +\n              \"\\n\" +\n              content +\n              indentation(indent) +\n              \">\\n\";\n      }\n      type = serverProps.children;\n      clientProps = clientProps.children;\n      if (\n        \"string\" === typeof type ||\n        \"number\" === typeof type ||\n        \"bigint\" === typeof type\n      ) {\n        serverPropNames = \"\";\n        if (\n          \"string\" === typeof clientProps ||\n          \"number\" === typeof clientProps ||\n          \"bigint\" === typeof clientProps\n        )\n          serverPropNames = \"\" + clientProps;\n        content += describeTextDiff(serverPropNames, \"\" + type, indent + 1);\n      } else if (\n        \"string\" === typeof clientProps ||\n        \"number\" === typeof clientProps ||\n        \"bigint\" === typeof clientProps\n      )\n        content =\n          null == type\n            ? content + describeTextDiff(\"\" + clientProps, null, indent + 1)\n            : content + describeTextDiff(\"\" + clientProps, void 0, indent + 1);\n      return content;\n    }\n    function describeSiblingFiber(fiber, indent) {\n      var type = describeFiberType(fiber);\n      if (null === type) {\n        type = \"\";\n        for (fiber = fiber.child; fiber; )\n          (type += describeSiblingFiber(fiber, indent)),\n            (fiber = fiber.sibling);\n        return type;\n      }\n      return indentation(indent) + \"<\" + type + \">\\n\";\n    }\n    function describeNode(node, indent) {\n      var skipToNode = findNotableNode(node, indent);\n      if (\n        skipToNode !== node &&\n        (1 !== node.children.length || node.children[0] !== skipToNode)\n      )\n        return (\n          indentation(indent) + \"...\\n\" + describeNode(skipToNode, indent + 1)\n        );\n      skipToNode = \"\";\n      var debugInfo = node.fiber._debugInfo;\n      if (debugInfo)\n        for (var i = 0; i < debugInfo.length; i++) {\n          var serverComponentName = debugInfo[i].name;\n          \"string\" === typeof serverComponentName &&\n            ((skipToNode +=\n              indentation(indent) + \"<\" + serverComponentName + \">\\n\"),\n            indent++);\n        }\n      debugInfo = \"\";\n      i = node.fiber.pendingProps;\n      if (6 === node.fiber.tag)\n        (debugInfo = describeTextDiff(i, node.serverProps, indent)), indent++;\n      else if (\n        ((serverComponentName = describeFiberType(node.fiber)),\n        null !== serverComponentName)\n      )\n        if (void 0 === node.serverProps) {\n          debugInfo = indent;\n          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2,\n            content = \"\";\n          for (propName in i)\n            if (i.hasOwnProperty(propName) && \"children\" !== propName) {\n              var propValue = describePropValue(i[propName], 15);\n              maxLength -= propName.length + propValue.length + 2;\n              if (0 > maxLength) {\n                content += \" ...\";\n                break;\n              }\n              content += \" \" + propName + \"=\" + propValue;\n            }\n          debugInfo =\n            indentation(debugInfo) +\n            \"<\" +\n            serverComponentName +\n            content +\n            \">\\n\";\n          indent++;\n        } else\n          null === node.serverProps\n            ? ((debugInfo = describeExpandedElement(\n                serverComponentName,\n                i,\n                added(indent)\n              )),\n              indent++)\n            : \"string\" === typeof node.serverProps\n              ? console.error(\n                  \"Should not have matched a non HostText fiber to a Text node. This is a bug in React.\"\n                )\n              : ((debugInfo = describeElementDiff(\n                  serverComponentName,\n                  i,\n                  node.serverProps,\n                  indent\n                )),\n                indent++);\n      var propName = \"\";\n      i = node.fiber.child;\n      for (\n        serverComponentName = 0;\n        i && serverComponentName < node.children.length;\n\n      )\n        (maxLength = node.children[serverComponentName]),\n          maxLength.fiber === i\n            ? ((propName += describeNode(maxLength, indent)),\n              serverComponentName++)\n            : (propName += describeSiblingFiber(i, indent)),\n          (i = i.sibling);\n      i &&\n        0 < node.children.length &&\n        (propName += indentation(indent) + \"...\\n\");\n      i = node.serverTail;\n      null === node.serverProps && indent--;\n      for (node = 0; node < i.length; node++)\n        (serverComponentName = i[node]),\n          (propName =\n            \"string\" === typeof serverComponentName\n              ? propName +\n                (removed(indent) +\n                  describeTextNode(serverComponentName, 120 - 2 * indent) +\n                  \"\\n\")\n              : propName +\n                describeExpandedElement(\n                  serverComponentName.type,\n                  serverComponentName.props,\n                  removed(indent)\n                ));\n      return skipToNode + debugInfo + propName;\n    }\n    function describeDiff(rootNode) {\n      try {\n        return \"\\n\\n\" + describeNode(rootNode, 0);\n      } catch (x) {\n        return \"\";\n      }\n    }\n    function buildHydrationDiffNode(fiber, distanceFromLeaf) {\n      if (null === fiber.return) {\n        if (null === hydrationDiffRootDEV)\n          hydrationDiffRootDEV = {\n            fiber: fiber,\n            children: [],\n            serverProps: void 0,\n            serverTail: [],\n            distanceFromLeaf: distanceFromLeaf\n          };\n        else {\n          if (hydrationDiffRootDEV.fiber !== fiber)\n            throw Error(\n              \"Saw multiple hydration diff roots in a pass. This is a bug in React.\"\n            );\n          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf &&\n            (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);\n        }\n        return hydrationDiffRootDEV;\n      }\n      var siblings = buildHydrationDiffNode(\n        fiber.return,\n        distanceFromLeaf + 1\n      ).children;\n      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)\n        return (\n          (siblings = siblings[siblings.length - 1]),\n          siblings.distanceFromLeaf > distanceFromLeaf &&\n            (siblings.distanceFromLeaf = distanceFromLeaf),\n          siblings\n        );\n      distanceFromLeaf = {\n        fiber: fiber,\n        children: [],\n        serverProps: void 0,\n        serverTail: [],\n        distanceFromLeaf: distanceFromLeaf\n      };\n      siblings.push(distanceFromLeaf);\n      return distanceFromLeaf;\n    }\n    function warnNonHydratedInstance(fiber, rejectedCandidate) {\n      didSuspendOrErrorDEV ||\n        ((fiber = buildHydrationDiffNode(fiber, 0)),\n        (fiber.serverProps = null),\n        null !== rejectedCandidate &&\n          ((rejectedCandidate =\n            describeHydratableInstanceForDevWarnings(rejectedCandidate)),\n          fiber.serverTail.push(rejectedCandidate)));\n    }\n    function throwOnHydrationMismatch(fiber) {\n      var diff = \"\",\n        diffRoot = hydrationDiffRootDEV;\n      null !== diffRoot &&\n        ((hydrationDiffRootDEV = null), (diff = describeDiff(diffRoot)));\n      queueHydrationError(\n        createCapturedValueAtFiber(\n          Error(\n            \"Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\\n\\n- A server/client branch `if (typeof window !== 'undefined')`.\\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n- Date formatting in a user's locale which doesn't match the server.\\n- External changing data without sending a snapshot of it along with the HTML.\\n- Invalid HTML tag nesting.\\n\\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n\\nhttps://react.dev/link/hydration-mismatch\" +\n              diff\n          ),\n          fiber\n        )\n      );\n      throw HydrationMismatchException;\n    }\n    function prepareToHydrateHostInstance(fiber, hostContext) {\n      if (!supportsHydration)\n        throw Error(\n          \"Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      hydrateInstance(\n        fiber.stateNode,\n        fiber.type,\n        fiber.memoizedProps,\n        hostContext,\n        fiber\n      ) || throwOnHydrationMismatch(fiber);\n    }\n    function popToNextHostParent(fiber) {\n      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )\n        switch (hydrationParentFiber.tag) {\n          case 3:\n          case 27:\n            rootOrSingletonContext = !0;\n            return;\n          case 5:\n          case 13:\n            rootOrSingletonContext = !1;\n            return;\n          default:\n            hydrationParentFiber = hydrationParentFiber.return;\n        }\n    }\n    function popHydrationState(fiber) {\n      if (!supportsHydration || fiber !== hydrationParentFiber) return !1;\n      if (!isHydrating)\n        return popToNextHostParent(fiber), (isHydrating = !0), !1;\n      var shouldClear = !1;\n      supportsSingletons\n        ? 3 !== fiber.tag &&\n          27 !== fiber.tag &&\n          (5 !== fiber.tag ||\n            (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n              !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&\n          (shouldClear = !0)\n        : 3 !== fiber.tag &&\n          (5 !== fiber.tag ||\n            (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n              !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&\n          (shouldClear = !0);\n      if (shouldClear && nextHydratableInstance) {\n        for (shouldClear = nextHydratableInstance; shouldClear; ) {\n          var diffNode = buildHydrationDiffNode(fiber, 0),\n            description = describeHydratableInstanceForDevWarnings(shouldClear);\n          diffNode.serverTail.push(description);\n          shouldClear =\n            \"Suspense\" === description.type\n              ? getNextHydratableInstanceAfterSuspenseInstance(shouldClear)\n              : getNextHydratableSibling(shouldClear);\n        }\n        throwOnHydrationMismatch(fiber);\n      }\n      popToNextHostParent(fiber);\n      if (13 === fiber.tag) {\n        if (!supportsHydration)\n          throw Error(\n            \"Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        fiber = fiber.memoizedState;\n        fiber = null !== fiber ? fiber.dehydrated : null;\n        if (!fiber)\n          throw Error(\n            \"Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        nextHydratableInstance =\n          getNextHydratableInstanceAfterSuspenseInstance(fiber);\n      } else\n        nextHydratableInstance = hydrationParentFiber\n          ? getNextHydratableSibling(fiber.stateNode)\n          : null;\n      return !0;\n    }\n    function resetHydrationState() {\n      supportsHydration &&\n        ((nextHydratableInstance = hydrationParentFiber = null),\n        (didSuspendOrErrorDEV = isHydrating = !1));\n    }\n    function queueHydrationError(error) {\n      null === hydrationErrors\n        ? (hydrationErrors = [error])\n        : hydrationErrors.push(error);\n    }\n    function emitPendingHydrationWarnings() {\n      var diffRoot = hydrationDiffRootDEV;\n      null !== diffRoot &&\n        ((hydrationDiffRootDEV = null),\n        (diffRoot = describeDiff(diffRoot)),\n        console.error(\n          \"A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\\n\\n- A server/client branch `if (typeof window !== 'undefined')`.\\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n- Date formatting in a user's locale which doesn't match the server.\\n- External changing data without sending a snapshot of it along with the HTML.\\n- Invalid HTML tag nesting.\\n\\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n\\n%s%s\",\n          \"https://react.dev/link/hydration-mismatch\",\n          diffRoot\n        ));\n    }\n    function finishQueueingConcurrentUpdates() {\n      for (\n        var endIndex = concurrentQueuesIndex,\n          i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);\n        i < endIndex;\n\n      ) {\n        var fiber = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var queue = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var update = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var lane = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        if (null !== queue && null !== update) {\n          var pending = queue.pending;\n          null === pending\n            ? (update.next = update)\n            : ((update.next = pending.next), (pending.next = update));\n          queue.pending = update;\n        }\n        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);\n      }\n    }\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      concurrentQueues[concurrentQueuesIndex++] = fiber;\n      concurrentQueues[concurrentQueuesIndex++] = queue;\n      concurrentQueues[concurrentQueuesIndex++] = update;\n      concurrentQueues[concurrentQueuesIndex++] = lane;\n      concurrentlyUpdatedLanes |= lane;\n      fiber.lanes |= lane;\n      fiber = fiber.alternate;\n      null !== fiber && (fiber.lanes |= lane);\n    }\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      enqueueUpdate$1(fiber, queue, update, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      enqueueUpdate$1(fiber, null, null, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n      sourceFiber.lanes |= lane;\n      var alternate = sourceFiber.alternate;\n      null !== alternate && (alternate.lanes |= lane);\n      for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )\n        (parent.childLanes |= lane),\n          (alternate = parent.alternate),\n          null !== alternate && (alternate.childLanes |= lane),\n          22 === parent.tag &&\n            ((sourceFiber = parent.stateNode),\n            null === sourceFiber ||\n              sourceFiber._visibility & 1 ||\n              (isHidden = !0)),\n          (sourceFiber = parent),\n          (parent = parent.return);\n      isHidden &&\n        null !== update &&\n        3 === sourceFiber.tag &&\n        ((parent = sourceFiber.stateNode),\n        (isHidden = 31 - clz32(lane)),\n        (parent = parent.hiddenUpdates),\n        (sourceFiber = parent[isHidden]),\n        null === sourceFiber\n          ? (parent[isHidden] = [update])\n          : sourceFiber.push(update),\n        (update.lane = lane | 536870912));\n    }\n    function getRootForUpdatedFiber(sourceFiber) {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)\n        throw (\n          ((nestedPassiveUpdateCount = nestedUpdateCount = 0),\n          (rootWithPassiveNestedUpdates = rootWithNestedUpdates = null),\n          Error(\n            \"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\"\n          ))\n        );\n      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT &&\n        ((nestedPassiveUpdateCount = 0),\n        (rootWithPassiveNestedUpdates = null),\n        console.error(\n          \"Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.\"\n        ));\n      null === sourceFiber.alternate &&\n        0 !== (sourceFiber.flags & 4098) &&\n        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n      for (var node = sourceFiber, parent = node.return; null !== parent; )\n        null === node.alternate &&\n          0 !== (node.flags & 4098) &&\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber),\n          (node = parent),\n          (parent = node.return);\n      return 3 === node.tag ? node.stateNode : null;\n    }\n    function pushNestedEffectDurations() {\n      var prevEffectDuration = profilerEffectDuration;\n      profilerEffectDuration = 0;\n      return prevEffectDuration;\n    }\n    function popNestedEffectDurations(prevEffectDuration) {\n      var elapsedTime = profilerEffectDuration;\n      profilerEffectDuration = prevEffectDuration;\n      return elapsedTime;\n    }\n    function bubbleNestedEffectDurations(prevEffectDuration) {\n      var elapsedTime = profilerEffectDuration;\n      profilerEffectDuration += prevEffectDuration;\n      return elapsedTime;\n    }\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now();\n      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);\n    }\n    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {\n      if (0 <= profilerStartTime) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n        fiber.selfBaseDuration = elapsedTime;\n        profilerStartTime = -1;\n      }\n    }\n    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {\n      if (0 <= profilerStartTime) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n        profilerStartTime = -1;\n      }\n    }\n    function recordEffectDuration() {\n      if (0 <= profilerStartTime) {\n        var elapsedTime = now() - profilerStartTime;\n        profilerStartTime = -1;\n        profilerEffectDuration += elapsedTime;\n      }\n    }\n    function startEffectTimer() {\n      profilerStartTime = now();\n    }\n    function transferActualDuration(fiber) {\n      for (var child = fiber.child; child; )\n        (fiber.actualDuration += child.actualDuration), (child = child.sibling);\n    }\n    function ensureRootIsScheduled(root) {\n      root !== lastScheduledRoot &&\n        null === root.next &&\n        (null === lastScheduledRoot\n          ? (firstScheduledRoot = lastScheduledRoot = root)\n          : (lastScheduledRoot = lastScheduledRoot.next = root));\n      mightHavePendingSyncWork = !0;\n      null !== ReactSharedInternals.actQueue\n        ? didScheduleMicrotask_act ||\n          ((didScheduleMicrotask_act = !0),\n          scheduleImmediateTask(processRootScheduleInMicrotask))\n        : didScheduleMicrotask ||\n          ((didScheduleMicrotask = !0),\n          scheduleImmediateTask(processRootScheduleInMicrotask));\n    }\n    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {\n      if (!isFlushingWork && mightHavePendingSyncWork) {\n        isFlushingWork = !0;\n        do {\n          var didPerformSomeWork = !1;\n          for (var root = firstScheduledRoot; null !== root; ) {\n            if (!onlyLegacy)\n              if (0 !== syncTransitionLanes) {\n                var pendingLanes = root.pendingLanes;\n                if (0 === pendingLanes) var nextLanes = 0;\n                else {\n                  var suspendedLanes = root.suspendedLanes,\n                    pingedLanes = root.pingedLanes;\n                  nextLanes =\n                    (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;\n                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);\n                  nextLanes =\n                    nextLanes & 201326677\n                      ? (nextLanes & 201326677) | 1\n                      : nextLanes\n                        ? nextLanes | 2\n                        : 0;\n                }\n                0 !== nextLanes &&\n                  ((didPerformSomeWork = !0),\n                  performSyncWorkOnRoot(root, nextLanes));\n              } else\n                (nextLanes = workInProgressRootRenderLanes),\n                  (nextLanes = getNextLanes(\n                    root,\n                    root === workInProgressRoot ? nextLanes : 0\n                  )),\n                  0 === (nextLanes & 3) ||\n                    checkIfRootIsPrerendering(root, nextLanes) ||\n                    ((didPerformSomeWork = !0),\n                    performSyncWorkOnRoot(root, nextLanes));\n            root = root.next;\n          }\n        } while (didPerformSomeWork);\n        isFlushingWork = !1;\n      }\n    }\n    function processRootScheduleInMicrotask() {\n      mightHavePendingSyncWork =\n        didScheduleMicrotask_act =\n        didScheduleMicrotask =\n          !1;\n      var syncTransitionLanes = 0;\n      0 !== currentEventTransitionLane &&\n        (shouldAttemptEagerTransition() &&\n          (syncTransitionLanes = currentEventTransitionLane),\n        (currentEventTransitionLane = 0));\n      for (\n        var currentTime = now$1(), prev = null, root = firstScheduledRoot;\n        null !== root;\n\n      ) {\n        var next = root.next,\n          nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n        if (0 === nextLanes)\n          (root.next = null),\n            null === prev ? (firstScheduledRoot = next) : (prev.next = next),\n            null === next && (lastScheduledRoot = prev);\n        else if (\n          ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))\n        )\n          mightHavePendingSyncWork = !0;\n        root = next;\n      }\n      flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);\n    }\n    function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n      for (\n        var suspendedLanes = root.suspendedLanes,\n          pingedLanes = root.pingedLanes,\n          expirationTimes = root.expirationTimes,\n          lanes = root.pendingLanes & -62914561;\n        0 < lanes;\n\n      ) {\n        var index = 31 - clz32(lanes),\n          lane = 1 << index,\n          expirationTime = expirationTimes[index];\n        if (-1 === expirationTime) {\n          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n        } else expirationTime <= currentTime && (root.expiredLanes |= lane);\n        lanes &= ~lane;\n      }\n      currentTime = workInProgressRoot;\n      suspendedLanes = workInProgressRootRenderLanes;\n      suspendedLanes = getNextLanes(\n        root,\n        root === currentTime ? suspendedLanes : 0\n      );\n      pingedLanes = root.callbackNode;\n      if (\n        0 === suspendedLanes ||\n        (root === currentTime &&\n          workInProgressSuspendedReason === SuspendedOnData) ||\n        null !== root.cancelPendingCommit\n      )\n        return (\n          null !== pingedLanes && cancelCallback(pingedLanes),\n          (root.callbackNode = null),\n          (root.callbackPriority = 0)\n        );\n      if (\n        0 === (suspendedLanes & 3) ||\n        checkIfRootIsPrerendering(root, suspendedLanes)\n      ) {\n        currentTime = suspendedLanes & -suspendedLanes;\n        if (\n          currentTime !== root.callbackPriority ||\n          (null !== ReactSharedInternals.actQueue &&\n            pingedLanes !== fakeActCallbackNode$1)\n        )\n          cancelCallback(pingedLanes);\n        else return currentTime;\n        switch (lanesToEventPriority(suspendedLanes)) {\n          case 2:\n          case 8:\n            suspendedLanes = UserBlockingPriority;\n            break;\n          case 32:\n            suspendedLanes = NormalPriority$1;\n            break;\n          case 268435456:\n            suspendedLanes = IdlePriority;\n            break;\n          default:\n            suspendedLanes = NormalPriority$1;\n        }\n        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);\n        null !== ReactSharedInternals.actQueue\n          ? (ReactSharedInternals.actQueue.push(pingedLanes),\n            (suspendedLanes = fakeActCallbackNode$1))\n          : (suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes));\n        root.callbackPriority = currentTime;\n        root.callbackNode = suspendedLanes;\n        return currentTime;\n      }\n      null !== pingedLanes && cancelCallback(pingedLanes);\n      root.callbackPriority = 2;\n      root.callbackNode = null;\n      return 2;\n    }\n    function performWorkOnRootViaSchedulerTask(root, didTimeout) {\n      nestedUpdateScheduled = currentUpdateIsNested = !1;\n      var originalCallbackNode = root.callbackNode;\n      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)\n        return null;\n      var workInProgressRootRenderLanes$jscomp$0 =\n        workInProgressRootRenderLanes;\n      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(\n        root,\n        root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0\n      );\n      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;\n      performWorkOnRoot(\n        root,\n        workInProgressRootRenderLanes$jscomp$0,\n        didTimeout\n      );\n      scheduleTaskForRootDuringMicrotask(root, now$1());\n      return null != root.callbackNode &&\n        root.callbackNode === originalCallbackNode\n        ? performWorkOnRootViaSchedulerTask.bind(null, root)\n        : null;\n    }\n    function performSyncWorkOnRoot(root, lanes) {\n      if (flushPassiveEffects()) return null;\n      currentUpdateIsNested = nestedUpdateScheduled;\n      nestedUpdateScheduled = !1;\n      performWorkOnRoot(root, lanes, !0);\n    }\n    function cancelCallback(callbackNode) {\n      callbackNode !== fakeActCallbackNode$1 &&\n        null !== callbackNode &&\n        cancelCallback$1(callbackNode);\n    }\n    function scheduleImmediateTask(cb) {\n      null !== ReactSharedInternals.actQueue &&\n        ReactSharedInternals.actQueue.push(function () {\n          cb();\n          return null;\n        });\n      supportsMicrotasks\n        ? scheduleMicrotask(function () {\n            (executionContext & (RenderContext | CommitContext)) !== NoContext\n              ? scheduleCallback$3(ImmediatePriority, cb)\n              : cb();\n          })\n        : scheduleCallback$3(ImmediatePriority, cb);\n    }\n    function requestTransitionLane() {\n      0 === currentEventTransitionLane &&\n        (currentEventTransitionLane = claimNextTransitionLane());\n      return currentEventTransitionLane;\n    }\n    function entangleAsyncAction(transition, thenable) {\n      if (null === currentEntangledListeners) {\n        var entangledListeners = (currentEntangledListeners = []);\n        currentEntangledPendingCount = 0;\n        currentEntangledLane = requestTransitionLane();\n        currentEntangledActionThenable = {\n          status: \"pending\",\n          value: void 0,\n          then: function (resolve) {\n            entangledListeners.push(resolve);\n          }\n        };\n      }\n      currentEntangledPendingCount++;\n      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);\n      return thenable;\n    }\n    function pingEngtangledActionScope() {\n      if (\n        0 === --currentEntangledPendingCount &&\n        null !== currentEntangledListeners\n      ) {\n        null !== currentEntangledActionThenable &&\n          (currentEntangledActionThenable.status = \"fulfilled\");\n        var listeners = currentEntangledListeners;\n        currentEntangledListeners = null;\n        currentEntangledLane = 0;\n        currentEntangledActionThenable = null;\n        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();\n      }\n    }\n    function chainThenableValue(thenable, result) {\n      var listeners = [],\n        thenableWithOverride = {\n          status: \"pending\",\n          value: null,\n          reason: null,\n          then: function (resolve) {\n            listeners.push(resolve);\n          }\n        };\n      thenable.then(\n        function () {\n          thenableWithOverride.status = \"fulfilled\";\n          thenableWithOverride.value = result;\n          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);\n        },\n        function (error) {\n          thenableWithOverride.status = \"rejected\";\n          thenableWithOverride.reason = error;\n          for (error = 0; error < listeners.length; error++)\n            (0, listeners[error])(void 0);\n        }\n      );\n      return thenableWithOverride;\n    }\n    function initializeUpdateQueue(fiber) {\n      fiber.updateQueue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: { pending: null, lanes: 0, hiddenCallbacks: null },\n        callbacks: null\n      };\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      current = current.updateQueue;\n      workInProgress.updateQueue === current &&\n        (workInProgress.updateQueue = {\n          baseState: current.baseState,\n          firstBaseUpdate: current.firstBaseUpdate,\n          lastBaseUpdate: current.lastBaseUpdate,\n          shared: current.shared,\n          callbacks: null\n        });\n    }\n    function createUpdate(lane) {\n      return {\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (null === updateQueue) return null;\n      updateQueue = updateQueue.shared;\n      if (\n        currentlyProcessingQueue === updateQueue &&\n        !didWarnUpdateInsideUpdate\n      ) {\n        var componentName = getComponentNameFromFiber(fiber);\n        console.error(\n          \"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\\n\\nPlease update the following component: %s\",\n          componentName\n        );\n        didWarnUpdateInsideUpdate = !0;\n      }\n      if ((executionContext & RenderContext) !== NoContext)\n        return (\n          (componentName = updateQueue.pending),\n          null === componentName\n            ? (update.next = update)\n            : ((update.next = componentName.next),\n              (componentName.next = update)),\n          (updateQueue.pending = update),\n          (update = getRootForUpdatedFiber(fiber)),\n          markUpdateLaneFromFiberToRoot(fiber, null, lane),\n          update\n        );\n      enqueueUpdate$1(fiber, updateQueue, update, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function entangleTransitions(root, fiber, lane) {\n      fiber = fiber.updateQueue;\n      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {\n        var queueLanes = fiber.lanes;\n        queueLanes &= root.pendingLanes;\n        lane |= queueLanes;\n        fiber.lanes = lane;\n        markRootEntangled(root, lane);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      var queue = workInProgress.updateQueue,\n        current = workInProgress.alternate;\n      if (\n        null !== current &&\n        ((current = current.updateQueue), queue === current)\n      ) {\n        var newFirst = null,\n          newLast = null;\n        queue = queue.firstBaseUpdate;\n        if (null !== queue) {\n          do {\n            var clone = {\n              lane: queue.lane,\n              tag: queue.tag,\n              payload: queue.payload,\n              callback: null,\n              next: null\n            };\n            null === newLast\n              ? (newFirst = newLast = clone)\n              : (newLast = newLast.next = clone);\n            queue = queue.next;\n          } while (null !== queue);\n          null === newLast\n            ? (newFirst = newLast = capturedUpdate)\n            : (newLast = newLast.next = capturedUpdate);\n        } else newFirst = newLast = capturedUpdate;\n        queue = {\n          baseState: current.baseState,\n          firstBaseUpdate: newFirst,\n          lastBaseUpdate: newLast,\n          shared: current.shared,\n          callbacks: current.callbacks\n        };\n        workInProgress.updateQueue = queue;\n        return;\n      }\n      workInProgress = queue.lastBaseUpdate;\n      null === workInProgress\n        ? (queue.firstBaseUpdate = capturedUpdate)\n        : (workInProgress.next = capturedUpdate);\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n    function suspendIfUpdateReadFromEntangledAsyncAction() {\n      if (didReadFromEntangledAsyncAction) {\n        var entangledActionThenable = currentEntangledActionThenable;\n        if (null !== entangledActionThenable) throw entangledActionThenable;\n      }\n    }\n    function processUpdateQueue(\n      workInProgress,\n      props,\n      instance$jscomp$0,\n      renderLanes\n    ) {\n      didReadFromEntangledAsyncAction = !1;\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = !1;\n      currentlyProcessingQueue = queue.shared;\n      var firstBaseUpdate = queue.firstBaseUpdate,\n        lastBaseUpdate = queue.lastBaseUpdate,\n        pendingQueue = queue.shared.pending;\n      if (null !== pendingQueue) {\n        queue.shared.pending = null;\n        var lastPendingUpdate = pendingQueue,\n          firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null;\n        null === lastBaseUpdate\n          ? (firstBaseUpdate = firstPendingUpdate)\n          : (lastBaseUpdate.next = firstPendingUpdate);\n        lastBaseUpdate = lastPendingUpdate;\n        var current = workInProgress.alternate;\n        null !== current &&\n          ((current = current.updateQueue),\n          (pendingQueue = current.lastBaseUpdate),\n          pendingQueue !== lastBaseUpdate &&\n            (null === pendingQueue\n              ? (current.firstBaseUpdate = firstPendingUpdate)\n              : (pendingQueue.next = firstPendingUpdate),\n            (current.lastBaseUpdate = lastPendingUpdate)));\n      }\n      if (null !== firstBaseUpdate) {\n        var newState = queue.baseState;\n        lastBaseUpdate = 0;\n        current = firstPendingUpdate = lastPendingUpdate = null;\n        pendingQueue = firstBaseUpdate;\n        do {\n          var updateLane = pendingQueue.lane & -536870913,\n            isHiddenUpdate = updateLane !== pendingQueue.lane;\n          if (\n            isHiddenUpdate\n              ? (workInProgressRootRenderLanes & updateLane) === updateLane\n              : (renderLanes & updateLane) === updateLane\n          ) {\n            0 !== updateLane &&\n              updateLane === currentEntangledLane &&\n              (didReadFromEntangledAsyncAction = !0);\n            null !== current &&\n              (current = current.next =\n                {\n                  lane: 0,\n                  tag: pendingQueue.tag,\n                  payload: pendingQueue.payload,\n                  callback: null,\n                  next: null\n                });\n            a: {\n              updateLane = workInProgress;\n              var partialState = pendingQueue;\n              var nextProps = props,\n                instance = instance$jscomp$0;\n              switch (partialState.tag) {\n                case ReplaceState:\n                  partialState = partialState.payload;\n                  if (\"function\" === typeof partialState) {\n                    isDisallowedContextReadInDEV = !0;\n                    var nextState = partialState.call(\n                      instance,\n                      newState,\n                      nextProps\n                    );\n                    if (updateLane.mode & 8) {\n                      setIsStrictModeForDevtools(!0);\n                      try {\n                        partialState.call(instance, newState, nextProps);\n                      } finally {\n                        setIsStrictModeForDevtools(!1);\n                      }\n                    }\n                    isDisallowedContextReadInDEV = !1;\n                    newState = nextState;\n                    break a;\n                  }\n                  newState = partialState;\n                  break a;\n                case CaptureUpdate:\n                  updateLane.flags = (updateLane.flags & -65537) | 128;\n                case UpdateState:\n                  nextState = partialState.payload;\n                  if (\"function\" === typeof nextState) {\n                    isDisallowedContextReadInDEV = !0;\n                    partialState = nextState.call(\n                      instance,\n                      newState,\n                      nextProps\n                    );\n                    if (updateLane.mode & 8) {\n                      setIsStrictModeForDevtools(!0);\n                      try {\n                        nextState.call(instance, newState, nextProps);\n                      } finally {\n                        setIsStrictModeForDevtools(!1);\n                      }\n                    }\n                    isDisallowedContextReadInDEV = !1;\n                  } else partialState = nextState;\n                  if (null === partialState || void 0 === partialState) break a;\n                  newState = assign({}, newState, partialState);\n                  break a;\n                case ForceUpdate:\n                  hasForceUpdate = !0;\n              }\n            }\n            updateLane = pendingQueue.callback;\n            null !== updateLane &&\n              ((workInProgress.flags |= 64),\n              isHiddenUpdate && (workInProgress.flags |= 8192),\n              (isHiddenUpdate = queue.callbacks),\n              null === isHiddenUpdate\n                ? (queue.callbacks = [updateLane])\n                : isHiddenUpdate.push(updateLane));\n          } else\n            (isHiddenUpdate = {\n              lane: updateLane,\n              tag: pendingQueue.tag,\n              payload: pendingQueue.payload,\n              callback: pendingQueue.callback,\n              next: null\n            }),\n              null === current\n                ? ((firstPendingUpdate = current = isHiddenUpdate),\n                  (lastPendingUpdate = newState))\n                : (current = current.next = isHiddenUpdate),\n              (lastBaseUpdate |= updateLane);\n          pendingQueue = pendingQueue.next;\n          if (null === pendingQueue)\n            if (((pendingQueue = queue.shared.pending), null === pendingQueue))\n              break;\n            else\n              (isHiddenUpdate = pendingQueue),\n                (pendingQueue = isHiddenUpdate.next),\n                (isHiddenUpdate.next = null),\n                (queue.lastBaseUpdate = isHiddenUpdate),\n                (queue.shared.pending = null);\n        } while (1);\n        null === current && (lastPendingUpdate = newState);\n        queue.baseState = lastPendingUpdate;\n        queue.firstBaseUpdate = firstPendingUpdate;\n        queue.lastBaseUpdate = current;\n        null === firstBaseUpdate && (queue.shared.lanes = 0);\n        workInProgressRootSkippedLanes |= lastBaseUpdate;\n        workInProgress.lanes = lastBaseUpdate;\n        workInProgress.memoizedState = newState;\n      }\n      currentlyProcessingQueue = null;\n    }\n    function callCallback(callback, context) {\n      if (\"function\" !== typeof callback)\n        throw Error(\n          \"Invalid argument passed as callback. Expected a function. Instead received: \" +\n            callback\n        );\n      callback.call(context);\n    }\n    function commitHiddenCallbacks(updateQueue, context) {\n      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n      if (null !== hiddenCallbacks)\n        for (\n          updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;\n          updateQueue < hiddenCallbacks.length;\n          updateQueue++\n        )\n          callCallback(hiddenCallbacks[updateQueue], context);\n    }\n    function commitCallbacks(updateQueue, context) {\n      var callbacks = updateQueue.callbacks;\n      if (null !== callbacks)\n        for (\n          updateQueue.callbacks = null, updateQueue = 0;\n          updateQueue < callbacks.length;\n          updateQueue++\n        )\n          callCallback(callbacks[updateQueue], context);\n    }\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) return !0;\n      if (\n        \"object\" !== typeof objA ||\n        null === objA ||\n        \"object\" !== typeof objB ||\n        null === objB\n      )\n        return !1;\n      var keysA = Object.keys(objA),\n        keysB = Object.keys(objB);\n      if (keysA.length !== keysB.length) return !1;\n      for (keysB = 0; keysB < keysA.length; keysB++) {\n        var currentKey = keysA[keysB];\n        if (\n          !hasOwnProperty.call(objB, currentKey) ||\n          !objectIs(objA[currentKey], objB[currentKey])\n        )\n          return !1;\n      }\n      return !0;\n    }\n    function createThenableState() {\n      return { didWarnAboutUncachedPromise: !1, thenables: [] };\n    }\n    function isThenableResolved(thenable) {\n      thenable = thenable.status;\n      return \"fulfilled\" === thenable || \"rejected\" === thenable;\n    }\n    function noop$1() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n      null !== ReactSharedInternals.actQueue &&\n        (ReactSharedInternals.didUsePromise = !0);\n      var trackedThenables = thenableState.thenables;\n      index = trackedThenables[index];\n      void 0 === index\n        ? trackedThenables.push(thenable)\n        : index !== thenable &&\n          (thenableState.didWarnAboutUncachedPromise ||\n            ((thenableState.didWarnAboutUncachedPromise = !0),\n            console.error(\n              \"A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.\"\n            )),\n          thenable.then(noop$1, noop$1),\n          (thenable = index));\n      switch (thenable.status) {\n        case \"fulfilled\":\n          return thenable.value;\n        case \"rejected\":\n          throw (\n            ((thenableState = thenable.reason),\n            checkIfUseWrappedInAsyncCatch(thenableState),\n            thenableState)\n          );\n        default:\n          if (\"string\" === typeof thenable.status)\n            thenable.then(noop$1, noop$1);\n          else {\n            thenableState = workInProgressRoot;\n            if (\n              null !== thenableState &&\n              100 < thenableState.shellSuspendCounter\n            )\n              throw Error(\n                \"async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.\"\n              );\n            thenableState = thenable;\n            thenableState.status = \"pending\";\n            thenableState.then(\n              function (fulfilledValue) {\n                if (\"pending\" === thenable.status) {\n                  var fulfilledThenable = thenable;\n                  fulfilledThenable.status = \"fulfilled\";\n                  fulfilledThenable.value = fulfilledValue;\n                }\n              },\n              function (error) {\n                if (\"pending\" === thenable.status) {\n                  var rejectedThenable = thenable;\n                  rejectedThenable.status = \"rejected\";\n                  rejectedThenable.reason = error;\n                }\n              }\n            );\n          }\n          switch (thenable.status) {\n            case \"fulfilled\":\n              return thenable.value;\n            case \"rejected\":\n              throw (\n                ((thenableState = thenable.reason),\n                checkIfUseWrappedInAsyncCatch(thenableState),\n                thenableState)\n              );\n          }\n          suspendedThenable = thenable;\n          needsToResetSuspendedThenableDEV = !0;\n          throw SuspenseException;\n      }\n    }\n    function getSuspendedThenable() {\n      if (null === suspendedThenable)\n        throw Error(\n          \"Expected a suspended thenable. This is a bug in React. Please file an issue.\"\n        );\n      var thenable = suspendedThenable;\n      suspendedThenable = null;\n      needsToResetSuspendedThenableDEV = !1;\n      return thenable;\n    }\n    function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n      if (rejectedReason === SuspenseException)\n        throw Error(\n          \"Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.\"\n        );\n    }\n    function pushDebugInfo(debugInfo) {\n      var previousDebugInfo = currentDebugInfo;\n      null != debugInfo &&\n        (currentDebugInfo =\n          null === previousDebugInfo\n            ? debugInfo\n            : previousDebugInfo.concat(debugInfo));\n      return previousDebugInfo;\n    }\n    function validateFragmentProps(element, fiber, returnFiber) {\n      for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (\"children\" !== key && \"key\" !== key) {\n          null === fiber &&\n            ((fiber = createFiberFromElement(element, returnFiber.mode, 0)),\n            (fiber._debugInfo = currentDebugInfo),\n            (fiber.return = returnFiber));\n          runWithFiberInDEV(\n            fiber,\n            function (erroredKey) {\n              console.error(\n                \"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",\n                erroredKey\n              );\n            },\n            key\n          );\n          break;\n        }\n      }\n    }\n    function unwrapThenable(thenable) {\n      var index = thenableIndexCounter$1;\n      thenableIndexCounter$1 += 1;\n      null === thenableState$1 && (thenableState$1 = createThenableState());\n      return trackUsedThenable(thenableState$1, thenable, index);\n    }\n    function coerceRef(workInProgress, element) {\n      element = element.props.ref;\n      workInProgress.ref = void 0 !== element ? element : null;\n    }\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)\n        throw Error(\n          'A React Element from an older version of React was rendered. This is not supported. It can happen if:\\n- Multiple copies of the \"react\" package is used.\\n- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n- A compiler tries to \"inline\" JSX instead of using the runtime.'\n        );\n      returnFiber = Object.prototype.toString.call(newChild);\n      throw Error(\n        \"Objects are not valid as a React child (found: \" +\n          (\"[object Object]\" === returnFiber\n            ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\"\n            : returnFiber) +\n          \"). If you meant to render a collection of children, use an array instead.\"\n      );\n    }\n    function warnOnFunctionType(returnFiber, invalidChild) {\n      var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n      ownerHasFunctionTypeWarning[parentName] ||\n        ((ownerHasFunctionTypeWarning[parentName] = !0),\n        (invalidChild =\n          invalidChild.displayName || invalidChild.name || \"Component\"),\n        3 === returnFiber.tag\n          ? console.error(\n              \"Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\\n  root.render(%s)\",\n              invalidChild,\n              invalidChild,\n              invalidChild\n            )\n          : console.error(\n              \"Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\\n  <%s>{%s}</%s>\",\n              invalidChild,\n              invalidChild,\n              parentName,\n              invalidChild,\n              parentName\n            ));\n    }\n    function warnOnSymbolType(returnFiber, invalidChild) {\n      var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n      ownerHasSymbolTypeWarning[parentName] ||\n        ((ownerHasSymbolTypeWarning[parentName] = !0),\n        (invalidChild = String(invalidChild)),\n        3 === returnFiber.tag\n          ? console.error(\n              \"Symbols are not valid as a React child.\\n  root.render(%s)\",\n              invalidChild\n            )\n          : console.error(\n              \"Symbols are not valid as a React child.\\n  <%s>%s</%s>\",\n              parentName,\n              invalidChild,\n              parentName\n            ));\n    }\n    function createChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (shouldTrackSideEffects) {\n          var deletions = returnFiber.deletions;\n          null === deletions\n            ? ((returnFiber.deletions = [childToDelete]),\n              (returnFiber.flags |= 16))\n            : deletions.push(childToDelete);\n        }\n      }\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) return null;\n        for (; null !== currentFirstChild; )\n          deleteChild(returnFiber, currentFirstChild),\n            (currentFirstChild = currentFirstChild.sibling);\n        return null;\n      }\n      function mapRemainingChildren(currentFirstChild) {\n        for (var existingChildren = new Map(); null !== currentFirstChild; )\n          null !== currentFirstChild.key\n            ? existingChildren.set(currentFirstChild.key, currentFirstChild)\n            : existingChildren.set(currentFirstChild.index, currentFirstChild),\n            (currentFirstChild = currentFirstChild.sibling);\n        return existingChildren;\n      }\n      function useFiber(fiber, pendingProps) {\n        fiber = createWorkInProgress(fiber, pendingProps);\n        fiber.index = 0;\n        fiber.sibling = null;\n        return fiber;\n      }\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n        if (!shouldTrackSideEffects)\n          return (newFiber.flags |= 1048576), lastPlacedIndex;\n        newIndex = newFiber.alternate;\n        if (null !== newIndex)\n          return (\n            (newIndex = newIndex.index),\n            newIndex < lastPlacedIndex\n              ? ((newFiber.flags |= 33554434), lastPlacedIndex)\n              : newIndex\n          );\n        newFiber.flags |= 33554434;\n        return lastPlacedIndex;\n      }\n      function placeSingleChild(newFiber) {\n        shouldTrackSideEffects &&\n          null === newFiber.alternate &&\n          (newFiber.flags |= 33554434);\n        return newFiber;\n      }\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (null === current || 6 !== current.tag)\n          return (\n            (current = createFiberFromText(\n              textContent,\n              returnFiber.mode,\n              lanes\n            )),\n            (current.return = returnFiber),\n            (current._debugOwner = returnFiber),\n            (current._debugInfo = currentDebugInfo),\n            current\n          );\n        current = useFiber(current, textContent);\n        current.return = returnFiber;\n        current._debugInfo = currentDebugInfo;\n        return current;\n      }\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE)\n          return (\n            (current = updateFragment(\n              returnFiber,\n              current,\n              element.props.children,\n              lanes,\n              element.key\n            )),\n            validateFragmentProps(element, current, returnFiber),\n            current\n          );\n        if (\n          null !== current &&\n          (current.elementType === elementType ||\n            isCompatibleFamilyForHotReloading(current, element) ||\n            (\"object\" === typeof elementType &&\n              null !== elementType &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              callLazyInitInDEV(elementType) === current.type))\n        )\n          return (\n            (current = useFiber(current, element.props)),\n            coerceRef(current, element),\n            (current.return = returnFiber),\n            (current._debugOwner = element._owner),\n            (current._debugInfo = currentDebugInfo),\n            current\n          );\n        current = createFiberFromElement(element, returnFiber.mode, lanes);\n        coerceRef(current, element);\n        current.return = returnFiber;\n        current._debugInfo = currentDebugInfo;\n        return current;\n      }\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (\n          null === current ||\n          4 !== current.tag ||\n          current.stateNode.containerInfo !== portal.containerInfo ||\n          current.stateNode.implementation !== portal.implementation\n        )\n          return (\n            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),\n            (current.return = returnFiber),\n            (current._debugInfo = currentDebugInfo),\n            current\n          );\n        current = useFiber(current, portal.children || []);\n        current.return = returnFiber;\n        current._debugInfo = currentDebugInfo;\n        return current;\n      }\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (null === current || 7 !== current.tag)\n          return (\n            (current = createFiberFromFragment(\n              fragment,\n              returnFiber.mode,\n              lanes,\n              key\n            )),\n            (current.return = returnFiber),\n            (current._debugOwner = returnFiber),\n            (current._debugInfo = currentDebugInfo),\n            current\n          );\n        current = useFiber(current, fragment);\n        current.return = returnFiber;\n        current._debugInfo = currentDebugInfo;\n        return current;\n      }\n      function createChild(returnFiber, newChild, lanes) {\n        if (\n          (\"string\" === typeof newChild && \"\" !== newChild) ||\n          \"number\" === typeof newChild ||\n          \"bigint\" === typeof newChild\n        )\n          return (\n            (newChild = createFiberFromText(\n              \"\" + newChild,\n              returnFiber.mode,\n              lanes\n            )),\n            (newChild.return = returnFiber),\n            (newChild._debugOwner = returnFiber),\n            (newChild._debugInfo = currentDebugInfo),\n            newChild\n          );\n        if (\"object\" === typeof newChild && null !== newChild) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return (\n                (lanes = createFiberFromElement(\n                  newChild,\n                  returnFiber.mode,\n                  lanes\n                )),\n                coerceRef(lanes, newChild),\n                (lanes.return = returnFiber),\n                (returnFiber = pushDebugInfo(newChild._debugInfo)),\n                (lanes._debugInfo = currentDebugInfo),\n                (currentDebugInfo = returnFiber),\n                lanes\n              );\n            case REACT_PORTAL_TYPE:\n              return (\n                (newChild = createFiberFromPortal(\n                  newChild,\n                  returnFiber.mode,\n                  lanes\n                )),\n                (newChild.return = returnFiber),\n                (newChild._debugInfo = currentDebugInfo),\n                newChild\n              );\n            case REACT_LAZY_TYPE:\n              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n              newChild = callLazyInitInDEV(newChild);\n              returnFiber = createChild(returnFiber, newChild, lanes);\n              currentDebugInfo = _prevDebugInfo;\n              return returnFiber;\n          }\n          if (isArrayImpl(newChild) || getIteratorFn(newChild))\n            return (\n              (lanes = createFiberFromFragment(\n                newChild,\n                returnFiber.mode,\n                lanes,\n                null\n              )),\n              (lanes.return = returnFiber),\n              (lanes._debugOwner = returnFiber),\n              (returnFiber = pushDebugInfo(newChild._debugInfo)),\n              (lanes._debugInfo = currentDebugInfo),\n              (currentDebugInfo = returnFiber),\n              lanes\n            );\n          if (\"function\" === typeof newChild.then)\n            return (\n              (_prevDebugInfo = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = createChild(\n                returnFiber,\n                unwrapThenable(newChild),\n                lanes\n              )),\n              (currentDebugInfo = _prevDebugInfo),\n              returnFiber\n            );\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n            return createChild(\n              returnFiber,\n              readContextDuringReconciliation(returnFiber, newChild),\n              lanes\n            );\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        \"function\" === typeof newChild &&\n          warnOnFunctionType(returnFiber, newChild);\n        \"symbol\" === typeof newChild && warnOnSymbolType(returnFiber, newChild);\n        return null;\n      }\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        var key = null !== oldFiber ? oldFiber.key : null;\n        if (\n          (\"string\" === typeof newChild && \"\" !== newChild) ||\n          \"number\" === typeof newChild ||\n          \"bigint\" === typeof newChild\n        )\n          return null !== key\n            ? null\n            : updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes);\n        if (\"object\" === typeof newChild && null !== newChild) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return newChild.key === key\n                ? ((key = pushDebugInfo(newChild._debugInfo)),\n                  (returnFiber = updateElement(\n                    returnFiber,\n                    oldFiber,\n                    newChild,\n                    lanes\n                  )),\n                  (currentDebugInfo = key),\n                  returnFiber)\n                : null;\n            case REACT_PORTAL_TYPE:\n              return newChild.key === key\n                ? updatePortal(returnFiber, oldFiber, newChild, lanes)\n                : null;\n            case REACT_LAZY_TYPE:\n              return (\n                (key = pushDebugInfo(newChild._debugInfo)),\n                (newChild = callLazyInitInDEV(newChild)),\n                (returnFiber = updateSlot(\n                  returnFiber,\n                  oldFiber,\n                  newChild,\n                  lanes\n                )),\n                (currentDebugInfo = key),\n                returnFiber\n              );\n          }\n          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {\n            if (null !== key) return null;\n            key = pushDebugInfo(newChild._debugInfo);\n            returnFiber = updateFragment(\n              returnFiber,\n              oldFiber,\n              newChild,\n              lanes,\n              null\n            );\n            currentDebugInfo = key;\n            return returnFiber;\n          }\n          if (\"function\" === typeof newChild.then)\n            return (\n              (key = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = updateSlot(\n                returnFiber,\n                oldFiber,\n                unwrapThenable(newChild),\n                lanes\n              )),\n              (currentDebugInfo = key),\n              returnFiber\n            );\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n            return updateSlot(\n              returnFiber,\n              oldFiber,\n              readContextDuringReconciliation(returnFiber, newChild),\n              lanes\n            );\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        \"function\" === typeof newChild &&\n          warnOnFunctionType(returnFiber, newChild);\n        \"symbol\" === typeof newChild && warnOnSymbolType(returnFiber, newChild);\n        return null;\n      }\n      function updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChild,\n        lanes\n      ) {\n        if (\n          (\"string\" === typeof newChild && \"\" !== newChild) ||\n          \"number\" === typeof newChild ||\n          \"bigint\" === typeof newChild\n        )\n          return (\n            (existingChildren = existingChildren.get(newIdx) || null),\n            updateTextNode(returnFiber, existingChildren, \"\" + newChild, lanes)\n          );\n        if (\"object\" === typeof newChild && null !== newChild) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return (\n                (newIdx =\n                  existingChildren.get(\n                    null === newChild.key ? newIdx : newChild.key\n                  ) || null),\n                (existingChildren = pushDebugInfo(newChild._debugInfo)),\n                (returnFiber = updateElement(\n                  returnFiber,\n                  newIdx,\n                  newChild,\n                  lanes\n                )),\n                (currentDebugInfo = existingChildren),\n                returnFiber\n              );\n            case REACT_PORTAL_TYPE:\n              return (\n                (existingChildren =\n                  existingChildren.get(\n                    null === newChild.key ? newIdx : newChild.key\n                  ) || null),\n                updatePortal(returnFiber, existingChildren, newChild, lanes)\n              );\n            case REACT_LAZY_TYPE:\n              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);\n              newChild = callLazyInitInDEV(newChild);\n              returnFiber = updateFromMap(\n                existingChildren,\n                returnFiber,\n                newIdx,\n                newChild,\n                lanes\n              );\n              currentDebugInfo = _prevDebugInfo7;\n              return returnFiber;\n          }\n          if (isArrayImpl(newChild) || getIteratorFn(newChild))\n            return (\n              (newIdx = existingChildren.get(newIdx) || null),\n              (existingChildren = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = updateFragment(\n                returnFiber,\n                newIdx,\n                newChild,\n                lanes,\n                null\n              )),\n              (currentDebugInfo = existingChildren),\n              returnFiber\n            );\n          if (\"function\" === typeof newChild.then)\n            return (\n              (_prevDebugInfo7 = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = updateFromMap(\n                existingChildren,\n                returnFiber,\n                newIdx,\n                unwrapThenable(newChild),\n                lanes\n              )),\n              (currentDebugInfo = _prevDebugInfo7),\n              returnFiber\n            );\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              readContextDuringReconciliation(returnFiber, newChild),\n              lanes\n            );\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        \"function\" === typeof newChild &&\n          warnOnFunctionType(returnFiber, newChild);\n        \"symbol\" === typeof newChild && warnOnSymbolType(returnFiber, newChild);\n        return null;\n      }\n      function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {\n        if (\"object\" !== typeof child || null === child) return knownKeys;\n        switch (child.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            warnForMissingKey(returnFiber, workInProgress, child);\n            var key = child.key;\n            if (\"string\" !== typeof key) break;\n            if (null === knownKeys) {\n              knownKeys = new Set();\n              knownKeys.add(key);\n              break;\n            }\n            if (!knownKeys.has(key)) {\n              knownKeys.add(key);\n              break;\n            }\n            runWithFiberInDEV(workInProgress, function () {\n              console.error(\n                \"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \\u2014 the behavior is unsupported and could change in a future version.\",\n                key\n              );\n            });\n            break;\n          case REACT_LAZY_TYPE:\n            (child = callLazyInitInDEV(child)),\n              warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);\n        }\n        return knownKeys;\n      }\n      function reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChildren,\n        lanes\n      ) {\n        for (\n          var knownKeys = null,\n            resultingFirstChild = null,\n            previousNewFiber = null,\n            oldFiber = currentFirstChild,\n            newIdx = (currentFirstChild = 0),\n            nextOldFiber = null;\n          null !== oldFiber && newIdx < newChildren.length;\n          newIdx++\n        ) {\n          oldFiber.index > newIdx\n            ? ((nextOldFiber = oldFiber), (oldFiber = null))\n            : (nextOldFiber = oldFiber.sibling);\n          var newFiber = updateSlot(\n            returnFiber,\n            oldFiber,\n            newChildren[newIdx],\n            lanes\n          );\n          if (null === newFiber) {\n            null === oldFiber && (oldFiber = nextOldFiber);\n            break;\n          }\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            newChildren[newIdx],\n            knownKeys\n          );\n          shouldTrackSideEffects &&\n            oldFiber &&\n            null === newFiber.alternate &&\n            deleteChild(returnFiber, oldFiber);\n          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);\n          null === previousNewFiber\n            ? (resultingFirstChild = newFiber)\n            : (previousNewFiber.sibling = newFiber);\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (newIdx === newChildren.length)\n          return (\n            deleteRemainingChildren(returnFiber, oldFiber),\n            isHydrating && pushTreeFork(returnFiber, newIdx),\n            resultingFirstChild\n          );\n        if (null === oldFiber) {\n          for (; newIdx < newChildren.length; newIdx++)\n            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),\n              null !== oldFiber &&\n                ((knownKeys = warnOnInvalidKey(\n                  returnFiber,\n                  oldFiber,\n                  newChildren[newIdx],\n                  knownKeys\n                )),\n                (currentFirstChild = placeChild(\n                  oldFiber,\n                  currentFirstChild,\n                  newIdx\n                )),\n                null === previousNewFiber\n                  ? (resultingFirstChild = oldFiber)\n                  : (previousNewFiber.sibling = oldFiber),\n                (previousNewFiber = oldFiber));\n          isHydrating && pushTreeFork(returnFiber, newIdx);\n          return resultingFirstChild;\n        }\n        for (\n          oldFiber = mapRemainingChildren(oldFiber);\n          newIdx < newChildren.length;\n          newIdx++\n        )\n          (nextOldFiber = updateFromMap(\n            oldFiber,\n            returnFiber,\n            newIdx,\n            newChildren[newIdx],\n            lanes\n          )),\n            null !== nextOldFiber &&\n              ((knownKeys = warnOnInvalidKey(\n                returnFiber,\n                nextOldFiber,\n                newChildren[newIdx],\n                knownKeys\n              )),\n              shouldTrackSideEffects &&\n                null !== nextOldFiber.alternate &&\n                oldFiber.delete(\n                  null === nextOldFiber.key ? newIdx : nextOldFiber.key\n                ),\n              (currentFirstChild = placeChild(\n                nextOldFiber,\n                currentFirstChild,\n                newIdx\n              )),\n              null === previousNewFiber\n                ? (resultingFirstChild = nextOldFiber)\n                : (previousNewFiber.sibling = nextOldFiber),\n              (previousNewFiber = nextOldFiber));\n        shouldTrackSideEffects &&\n          oldFiber.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        isHydrating && pushTreeFork(returnFiber, newIdx);\n        return resultingFirstChild;\n      }\n      function reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChildren,\n        lanes\n      ) {\n        if (null == newChildren)\n          throw Error(\"An iterable object provided no iterator.\");\n        for (\n          var resultingFirstChild = null,\n            previousNewFiber = null,\n            oldFiber = currentFirstChild,\n            newIdx = (currentFirstChild = 0),\n            nextOldFiber = null,\n            knownKeys = null,\n            step = newChildren.next();\n          null !== oldFiber && !step.done;\n          newIdx++, step = newChildren.next()\n        ) {\n          oldFiber.index > newIdx\n            ? ((nextOldFiber = oldFiber), (oldFiber = null))\n            : (nextOldFiber = oldFiber.sibling);\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n          if (null === newFiber) {\n            null === oldFiber && (oldFiber = nextOldFiber);\n            break;\n          }\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            step.value,\n            knownKeys\n          );\n          shouldTrackSideEffects &&\n            oldFiber &&\n            null === newFiber.alternate &&\n            deleteChild(returnFiber, oldFiber);\n          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);\n          null === previousNewFiber\n            ? (resultingFirstChild = newFiber)\n            : (previousNewFiber.sibling = newFiber);\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (step.done)\n          return (\n            deleteRemainingChildren(returnFiber, oldFiber),\n            isHydrating && pushTreeFork(returnFiber, newIdx),\n            resultingFirstChild\n          );\n        if (null === oldFiber) {\n          for (; !step.done; newIdx++, step = newChildren.next())\n            (oldFiber = createChild(returnFiber, step.value, lanes)),\n              null !== oldFiber &&\n                ((knownKeys = warnOnInvalidKey(\n                  returnFiber,\n                  oldFiber,\n                  step.value,\n                  knownKeys\n                )),\n                (currentFirstChild = placeChild(\n                  oldFiber,\n                  currentFirstChild,\n                  newIdx\n                )),\n                null === previousNewFiber\n                  ? (resultingFirstChild = oldFiber)\n                  : (previousNewFiber.sibling = oldFiber),\n                (previousNewFiber = oldFiber));\n          isHydrating && pushTreeFork(returnFiber, newIdx);\n          return resultingFirstChild;\n        }\n        for (\n          oldFiber = mapRemainingChildren(oldFiber);\n          !step.done;\n          newIdx++, step = newChildren.next()\n        )\n          (nextOldFiber = updateFromMap(\n            oldFiber,\n            returnFiber,\n            newIdx,\n            step.value,\n            lanes\n          )),\n            null !== nextOldFiber &&\n              ((knownKeys = warnOnInvalidKey(\n                returnFiber,\n                nextOldFiber,\n                step.value,\n                knownKeys\n              )),\n              shouldTrackSideEffects &&\n                null !== nextOldFiber.alternate &&\n                oldFiber.delete(\n                  null === nextOldFiber.key ? newIdx : nextOldFiber.key\n                ),\n              (currentFirstChild = placeChild(\n                nextOldFiber,\n                currentFirstChild,\n                newIdx\n              )),\n              null === previousNewFiber\n                ? (resultingFirstChild = nextOldFiber)\n                : (previousNewFiber.sibling = nextOldFiber),\n              (previousNewFiber = nextOldFiber));\n        shouldTrackSideEffects &&\n          oldFiber.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        isHydrating && pushTreeFork(returnFiber, newIdx);\n        return resultingFirstChild;\n      }\n      function reconcileChildFibersImpl(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes\n      ) {\n        \"object\" === typeof newChild &&\n          null !== newChild &&\n          newChild.type === REACT_FRAGMENT_TYPE &&\n          null === newChild.key &&\n          (validateFragmentProps(newChild, null, returnFiber),\n          (newChild = newChild.props.children));\n        if (\"object\" === typeof newChild && null !== newChild) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n              a: {\n                for (var key = newChild.key; null !== currentFirstChild; ) {\n                  if (currentFirstChild.key === key) {\n                    key = newChild.type;\n                    if (key === REACT_FRAGMENT_TYPE) {\n                      if (7 === currentFirstChild.tag) {\n                        deleteRemainingChildren(\n                          returnFiber,\n                          currentFirstChild.sibling\n                        );\n                        lanes = useFiber(\n                          currentFirstChild,\n                          newChild.props.children\n                        );\n                        lanes.return = returnFiber;\n                        lanes._debugOwner = newChild._owner;\n                        lanes._debugInfo = currentDebugInfo;\n                        validateFragmentProps(newChild, lanes, returnFiber);\n                        returnFiber = lanes;\n                        break a;\n                      }\n                    } else if (\n                      currentFirstChild.elementType === key ||\n                      isCompatibleFamilyForHotReloading(\n                        currentFirstChild,\n                        newChild\n                      ) ||\n                      (\"object\" === typeof key &&\n                        null !== key &&\n                        key.$$typeof === REACT_LAZY_TYPE &&\n                        callLazyInitInDEV(key) === currentFirstChild.type)\n                    ) {\n                      deleteRemainingChildren(\n                        returnFiber,\n                        currentFirstChild.sibling\n                      );\n                      lanes = useFiber(currentFirstChild, newChild.props);\n                      coerceRef(lanes, newChild);\n                      lanes.return = returnFiber;\n                      lanes._debugOwner = newChild._owner;\n                      lanes._debugInfo = currentDebugInfo;\n                      returnFiber = lanes;\n                      break a;\n                    }\n                    deleteRemainingChildren(returnFiber, currentFirstChild);\n                    break;\n                  } else deleteChild(returnFiber, currentFirstChild);\n                  currentFirstChild = currentFirstChild.sibling;\n                }\n                newChild.type === REACT_FRAGMENT_TYPE\n                  ? ((lanes = createFiberFromFragment(\n                      newChild.props.children,\n                      returnFiber.mode,\n                      lanes,\n                      newChild.key\n                    )),\n                    (lanes.return = returnFiber),\n                    (lanes._debugOwner = returnFiber),\n                    (lanes._debugInfo = currentDebugInfo),\n                    validateFragmentProps(newChild, lanes, returnFiber),\n                    (returnFiber = lanes))\n                  : ((lanes = createFiberFromElement(\n                      newChild,\n                      returnFiber.mode,\n                      lanes\n                    )),\n                    coerceRef(lanes, newChild),\n                    (lanes.return = returnFiber),\n                    (lanes._debugInfo = currentDebugInfo),\n                    (returnFiber = lanes));\n              }\n              returnFiber = placeSingleChild(returnFiber);\n              currentDebugInfo = prevDebugInfo;\n              return returnFiber;\n            case REACT_PORTAL_TYPE:\n              a: {\n                prevDebugInfo = newChild;\n                for (\n                  newChild = prevDebugInfo.key;\n                  null !== currentFirstChild;\n\n                ) {\n                  if (currentFirstChild.key === newChild)\n                    if (\n                      4 === currentFirstChild.tag &&\n                      currentFirstChild.stateNode.containerInfo ===\n                        prevDebugInfo.containerInfo &&\n                      currentFirstChild.stateNode.implementation ===\n                        prevDebugInfo.implementation\n                    ) {\n                      deleteRemainingChildren(\n                        returnFiber,\n                        currentFirstChild.sibling\n                      );\n                      lanes = useFiber(\n                        currentFirstChild,\n                        prevDebugInfo.children || []\n                      );\n                      lanes.return = returnFiber;\n                      returnFiber = lanes;\n                      break a;\n                    } else {\n                      deleteRemainingChildren(returnFiber, currentFirstChild);\n                      break;\n                    }\n                  else deleteChild(returnFiber, currentFirstChild);\n                  currentFirstChild = currentFirstChild.sibling;\n                }\n                lanes = createFiberFromPortal(\n                  prevDebugInfo,\n                  returnFiber.mode,\n                  lanes\n                );\n                lanes.return = returnFiber;\n                returnFiber = lanes;\n              }\n              return placeSingleChild(returnFiber);\n            case REACT_LAZY_TYPE:\n              return (\n                (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),\n                (newChild = callLazyInitInDEV(newChild)),\n                (returnFiber = reconcileChildFibersImpl(\n                  returnFiber,\n                  currentFirstChild,\n                  newChild,\n                  lanes\n                )),\n                (currentDebugInfo = prevDebugInfo),\n                returnFiber\n              );\n          }\n          if (isArrayImpl(newChild))\n            return (\n              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = reconcileChildrenArray(\n                returnFiber,\n                currentFirstChild,\n                newChild,\n                lanes\n              )),\n              (currentDebugInfo = prevDebugInfo),\n              returnFiber\n            );\n          if (getIteratorFn(newChild)) {\n            prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n            key = getIteratorFn(newChild);\n            if (\"function\" !== typeof key)\n              throw Error(\n                \"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.\"\n              );\n            var newChildren = key.call(newChild);\n            if (newChildren === newChild) {\n              if (\n                0 !== returnFiber.tag ||\n                \"[object GeneratorFunction]\" !==\n                  Object.prototype.toString.call(returnFiber.type) ||\n                \"[object Generator]\" !==\n                  Object.prototype.toString.call(newChildren)\n              )\n                didWarnAboutGenerators ||\n                  console.error(\n                    \"Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items.\"\n                  ),\n                  (didWarnAboutGenerators = !0);\n            } else\n              newChild.entries !== key ||\n                didWarnAboutMaps ||\n                (console.error(\n                  \"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"\n                ),\n                (didWarnAboutMaps = !0));\n            returnFiber = reconcileChildrenIterator(\n              returnFiber,\n              currentFirstChild,\n              newChildren,\n              lanes\n            );\n            currentDebugInfo = prevDebugInfo;\n            return returnFiber;\n          }\n          if (\"function\" === typeof newChild.then)\n            return (\n              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),\n              (returnFiber = reconcileChildFibersImpl(\n                returnFiber,\n                currentFirstChild,\n                unwrapThenable(newChild),\n                lanes\n              )),\n              (currentDebugInfo = prevDebugInfo),\n              returnFiber\n            );\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n            return reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              readContextDuringReconciliation(returnFiber, newChild),\n              lanes\n            );\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        if (\n          (\"string\" === typeof newChild && \"\" !== newChild) ||\n          \"number\" === typeof newChild ||\n          \"bigint\" === typeof newChild\n        )\n          return (\n            (prevDebugInfo = \"\" + newChild),\n            null !== currentFirstChild && 6 === currentFirstChild.tag\n              ? (deleteRemainingChildren(\n                  returnFiber,\n                  currentFirstChild.sibling\n                ),\n                (lanes = useFiber(currentFirstChild, prevDebugInfo)),\n                (lanes.return = returnFiber),\n                (returnFiber = lanes))\n              : (deleteRemainingChildren(returnFiber, currentFirstChild),\n                (lanes = createFiberFromText(\n                  prevDebugInfo,\n                  returnFiber.mode,\n                  lanes\n                )),\n                (lanes.return = returnFiber),\n                (lanes._debugOwner = returnFiber),\n                (lanes._debugInfo = currentDebugInfo),\n                (returnFiber = lanes)),\n            placeSingleChild(returnFiber)\n          );\n        \"function\" === typeof newChild &&\n          warnOnFunctionType(returnFiber, newChild);\n        \"symbol\" === typeof newChild && warnOnSymbolType(returnFiber, newChild);\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n      return function (returnFiber, currentFirstChild, newChild, lanes) {\n        var prevDebugInfo = currentDebugInfo;\n        currentDebugInfo = null;\n        try {\n          thenableIndexCounter$1 = 0;\n          var firstChildFiber = reconcileChildFibersImpl(\n            returnFiber,\n            currentFirstChild,\n            newChild,\n            lanes\n          );\n          thenableState$1 = null;\n          return firstChildFiber;\n        } catch (x) {\n          if (x === SuspenseException) throw x;\n          var fiber = createFiber(29, x, null, returnFiber.mode);\n          fiber.lanes = lanes;\n          fiber.return = returnFiber;\n          var debugInfo = (fiber._debugInfo = currentDebugInfo);\n          fiber._debugOwner = returnFiber._debugOwner;\n          if (null != debugInfo)\n            for (var i = debugInfo.length - 1; 0 <= i; i--)\n              if (\"string\" === typeof debugInfo[i].stack) {\n                fiber._debugOwner = debugInfo[i];\n                break;\n              }\n          return fiber;\n        } finally {\n          currentDebugInfo = prevDebugInfo;\n        }\n      };\n    }\n    function pushHiddenContext(fiber, context) {\n      var prevEntangledRenderLanes = entangledRenderLanes;\n      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n      push(currentTreeHiddenStackCursor, context, fiber);\n      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;\n    }\n    function reuseHiddenContextOnStack(fiber) {\n      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);\n      push(\n        currentTreeHiddenStackCursor,\n        currentTreeHiddenStackCursor.current,\n        fiber\n      );\n    }\n    function popHiddenContext(fiber) {\n      entangledRenderLanes = prevEntangledRenderLanesCursor.current;\n      pop(currentTreeHiddenStackCursor, fiber);\n      pop(prevEntangledRenderLanesCursor, fiber);\n    }\n    function pushPrimaryTreeSuspenseHandler(handler) {\n      var current = handler.alternate;\n      push(\n        suspenseStackCursor,\n        suspenseStackCursor.current & SubtreeSuspenseContextMask,\n        handler\n      );\n      push(suspenseHandlerStackCursor, handler, handler);\n      null === shellBoundary &&\n        (null === current || null !== currentTreeHiddenStackCursor.current\n          ? (shellBoundary = handler)\n          : null !== current.memoizedState && (shellBoundary = handler));\n    }\n    function pushOffscreenSuspenseHandler(fiber) {\n      if (22 === fiber.tag) {\n        if (\n          (push(suspenseStackCursor, suspenseStackCursor.current, fiber),\n          push(suspenseHandlerStackCursor, fiber, fiber),\n          null === shellBoundary)\n        ) {\n          var current = fiber.alternate;\n          null !== current &&\n            null !== current.memoizedState &&\n            (shellBoundary = fiber);\n        }\n      } else reuseSuspenseHandlerOnStack(fiber);\n    }\n    function reuseSuspenseHandlerOnStack(fiber) {\n      push(suspenseStackCursor, suspenseStackCursor.current, fiber);\n      push(\n        suspenseHandlerStackCursor,\n        suspenseHandlerStackCursor.current,\n        fiber\n      );\n    }\n    function popSuspenseHandler(fiber) {\n      pop(suspenseHandlerStackCursor, fiber);\n      shellBoundary === fiber && (shellBoundary = null);\n      pop(suspenseStackCursor, fiber);\n    }\n    function findFirstSuspended(row) {\n      for (var node = row; null !== node; ) {\n        if (13 === node.tag) {\n          var state = node.memoizedState;\n          if (\n            null !== state &&\n            ((state = state.dehydrated),\n            null === state ||\n              isSuspenseInstancePending(state) ||\n              isSuspenseInstanceFallback(state))\n          )\n            return node;\n        } else if (\n          19 === node.tag &&\n          void 0 !== node.memoizedProps.revealOrder\n        ) {\n          if (0 !== (node.flags & 128)) return node;\n        } else if (null !== node.child) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === row) break;\n        for (; null === node.sibling; ) {\n          if (null === node.return || node.return === row) return null;\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return null;\n    }\n    function mountHookTypesDev() {\n      var hookName = currentHookNameInDev;\n      null === hookTypesDev\n        ? (hookTypesDev = [hookName])\n        : hookTypesDev.push(hookName);\n    }\n    function updateHookTypesDev() {\n      var hookName = currentHookNameInDev;\n      if (\n        null !== hookTypesDev &&\n        (hookTypesUpdateIndexDev++,\n        hookTypesDev[hookTypesUpdateIndexDev] !== hookName)\n      ) {\n        var componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber$1\n        );\n        if (\n          !didWarnAboutMismatchedHooksForComponent.has(componentName) &&\n          (didWarnAboutMismatchedHooksForComponent.add(componentName),\n          null !== hookTypesDev)\n        ) {\n          for (var table = \"\", i = 0; i <= hookTypesUpdateIndexDev; i++) {\n            var oldHookName = hookTypesDev[i],\n              newHookName =\n                i === hookTypesUpdateIndexDev ? hookName : oldHookName;\n            for (\n              oldHookName = i + 1 + \". \" + oldHookName;\n              30 > oldHookName.length;\n\n            )\n              oldHookName += \" \";\n            oldHookName += newHookName + \"\\n\";\n            table += oldHookName;\n          }\n          console.error(\n            \"React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\\n\\n   Previous render            Next render\\n   ------------------------------------------------------\\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\",\n            componentName,\n            table\n          );\n        }\n      }\n    }\n    function checkDepsAreArrayDev(deps) {\n      void 0 === deps ||\n        null === deps ||\n        isArrayImpl(deps) ||\n        console.error(\n          \"%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.\",\n          currentHookNameInDev,\n          typeof deps\n        );\n    }\n    function warnOnUseFormStateInDev() {\n      var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n      didWarnAboutUseFormState.has(componentName) ||\n        (didWarnAboutUseFormState.add(componentName),\n        console.error(\n          \"ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.\",\n          componentName\n        ));\n    }\n    function throwInvalidHookError() {\n      throw Error(\n        \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.\"\n      );\n    }\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      if (ignorePreviousDependencies) return !1;\n      if (null === prevDeps)\n        return (\n          console.error(\n            \"%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.\",\n            currentHookNameInDev\n          ),\n          !1\n        );\n      nextDeps.length !== prevDeps.length &&\n        console.error(\n          \"The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\\n\\nPrevious: %s\\nIncoming: %s\",\n          currentHookNameInDev,\n          \"[\" + prevDeps.join(\", \") + \"]\",\n          \"[\" + nextDeps.join(\", \") + \"]\"\n        );\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)\n        if (!objectIs(nextDeps[i], prevDeps[i])) return !1;\n      return !0;\n    }\n    function renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n      nextRenderLanes\n    ) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      hookTypesDev = null !== current ? current._debugHookTypes : null;\n      hookTypesUpdateIndexDev = -1;\n      ignorePreviousDependencies =\n        null !== current && current.type !== workInProgress.type;\n      if (\n        \"[object AsyncFunction]\" ===\n          Object.prototype.toString.call(Component) ||\n        \"[object AsyncGeneratorFunction]\" ===\n          Object.prototype.toString.call(Component)\n      )\n        (nextRenderLanes = getComponentNameFromFiber(\n          currentlyRenderingFiber$1\n        )),\n          didWarnAboutAsyncClientComponent.has(nextRenderLanes) ||\n            (didWarnAboutAsyncClientComponent.add(nextRenderLanes),\n            console.error(\n              \"async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.\"\n            ));\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = 0;\n      ReactSharedInternals.H =\n        null !== current && null !== current.memoizedState\n          ? HooksDispatcherOnUpdateInDEV\n          : null !== hookTypesDev\n            ? HooksDispatcherOnMountWithHookTypesInDEV\n            : HooksDispatcherOnMountInDEV;\n      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes =\n        (workInProgress.mode & 8) !== NoMode;\n      var children = callComponentInDEV(Component, props, secondArg);\n      shouldDoubleInvokeUserFnsInHooksDEV = !1;\n      didScheduleRenderPhaseUpdateDuringThisPass &&\n        (children = renderWithHooksAgain(\n          workInProgress,\n          Component,\n          props,\n          secondArg\n        ));\n      if (nextRenderLanes) {\n        setIsStrictModeForDevtools(!0);\n        try {\n          children = renderWithHooksAgain(\n            workInProgress,\n            Component,\n            props,\n            secondArg\n          );\n        } finally {\n          setIsStrictModeForDevtools(!1);\n        }\n      }\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n    function finishRenderingHooks(current, workInProgress) {\n      workInProgress._debugHookTypes = hookTypesDev;\n      null === workInProgress.dependencies\n        ? null !== thenableState &&\n          (workInProgress.dependencies = {\n            lanes: 0,\n            firstContext: null,\n            _debugThenableState: thenableState\n          })\n        : (workInProgress.dependencies._debugThenableState = thenableState);\n      ReactSharedInternals.H = ContextOnlyDispatcher;\n      var didRenderTooFewHooks =\n        null !== currentHook && null !== currentHook.next;\n      renderLanes = 0;\n      hookTypesDev =\n        currentHookNameInDev =\n        workInProgressHook =\n        currentHook =\n        currentlyRenderingFiber$1 =\n          null;\n      hookTypesUpdateIndexDev = -1;\n      null !== current &&\n        (current.flags & 31457280) !== (workInProgress.flags & 31457280) &&\n        console.error(\n          \"Internal React error: Expected static flag was missing. Please notify the React team.\"\n        );\n      didScheduleRenderPhaseUpdate = !1;\n      thenableIndexCounter = 0;\n      thenableState = null;\n      if (didRenderTooFewHooks)\n        throw Error(\n          \"Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\"\n        );\n      null === current ||\n        didReceiveUpdate ||\n        ((current = current.dependencies),\n        null !== current &&\n          checkIfContextChanged(current) &&\n          (didReceiveUpdate = !0));\n      needsToResetSuspendedThenableDEV\n        ? ((needsToResetSuspendedThenableDEV = !1), (current = !0))\n        : (current = !1);\n      current &&\n        ((workInProgress =\n          getComponentNameFromFiber(workInProgress) || \"Unknown\"),\n        didWarnAboutUseWrappedInTryCatch.has(workInProgress) ||\n          didWarnAboutAsyncClientComponent.has(workInProgress) ||\n          (didWarnAboutUseWrappedInTryCatch.add(workInProgress),\n          console.error(\n            \"`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.\"\n          )));\n    }\n    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n      currentlyRenderingFiber$1 = workInProgress;\n      var numberOfReRenders = 0;\n      do {\n        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);\n        thenableIndexCounter = 0;\n        didScheduleRenderPhaseUpdateDuringThisPass = !1;\n        if (numberOfReRenders >= RE_RENDER_LIMIT)\n          throw Error(\n            \"Too many re-renders. React limits the number of renders to prevent an infinite loop.\"\n          );\n        numberOfReRenders += 1;\n        ignorePreviousDependencies = !1;\n        workInProgressHook = currentHook = null;\n        if (null != workInProgress.updateQueue) {\n          var children = workInProgress.updateQueue;\n          children.lastEffect = null;\n          children.events = null;\n          children.stores = null;\n          null != children.memoCache && (children.memoCache.index = 0);\n        }\n        hookTypesUpdateIndexDev = -1;\n        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;\n        children = callComponentInDEV(Component, props, secondArg);\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      return children;\n    }\n    function TransitionAwareHostComponent() {\n      var dispatcher = ReactSharedInternals.H,\n        maybeThenable = dispatcher.useState()[0];\n      maybeThenable =\n        \"function\" === typeof maybeThenable.then\n          ? useThenable(maybeThenable)\n          : maybeThenable;\n      dispatcher = dispatcher.useState()[0];\n      (null !== currentHook ? currentHook.memoizedState : null) !==\n        dispatcher && (currentlyRenderingFiber$1.flags |= 1024);\n      return maybeThenable;\n    }\n    function checkDidRenderIdHook() {\n      var didRenderIdHook = 0 !== localIdCounter;\n      localIdCounter = 0;\n      return didRenderIdHook;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue;\n      workInProgress.flags =\n        (workInProgress.mode & 16) !== NoMode\n          ? workInProgress.flags & -201328645\n          : workInProgress.flags & -2053;\n      current.lanes &= ~lanes;\n    }\n    function resetHooksOnUnwind(workInProgress) {\n      if (didScheduleRenderPhaseUpdate) {\n        for (\n          workInProgress = workInProgress.memoizedState;\n          null !== workInProgress;\n\n        ) {\n          var queue = workInProgress.queue;\n          null !== queue && (queue.pending = null);\n          workInProgress = workInProgress.next;\n        }\n        didScheduleRenderPhaseUpdate = !1;\n      }\n      renderLanes = 0;\n      hookTypesDev =\n        workInProgressHook =\n        currentHook =\n        currentlyRenderingFiber$1 =\n          null;\n      hookTypesUpdateIndexDev = -1;\n      currentHookNameInDev = null;\n      didScheduleRenderPhaseUpdateDuringThisPass = !1;\n      thenableIndexCounter = localIdCounter = 0;\n      thenableState = null;\n    }\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n      null === workInProgressHook\n        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)\n        : (workInProgressHook = workInProgressHook.next = hook);\n      return workInProgressHook;\n    }\n    function updateWorkInProgressHook() {\n      if (null === currentHook) {\n        var nextCurrentHook = currentlyRenderingFiber$1.alternate;\n        nextCurrentHook =\n          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;\n      } else nextCurrentHook = currentHook.next;\n      var nextWorkInProgressHook =\n        null === workInProgressHook\n          ? currentlyRenderingFiber$1.memoizedState\n          : workInProgressHook.next;\n      if (null !== nextWorkInProgressHook)\n        (workInProgressHook = nextWorkInProgressHook),\n          (currentHook = nextCurrentHook);\n      else {\n        if (null === nextCurrentHook) {\n          if (null === currentlyRenderingFiber$1.alternate)\n            throw Error(\n              \"Update hook called on initial render. This is likely a bug in React. Please file an issue.\"\n            );\n          throw Error(\"Rendered more hooks than during the previous render.\");\n        }\n        currentHook = nextCurrentHook;\n        nextCurrentHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n        null === workInProgressHook\n          ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =\n              nextCurrentHook)\n          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);\n      }\n      return workInProgressHook;\n    }\n    function useThenable(thenable) {\n      var index = thenableIndexCounter;\n      thenableIndexCounter += 1;\n      null === thenableState && (thenableState = createThenableState());\n      thenable = trackUsedThenable(thenableState, thenable, index);\n      index = currentlyRenderingFiber$1;\n      null ===\n        (null === workInProgressHook\n          ? index.memoizedState\n          : workInProgressHook.next) &&\n        ((index = index.alternate),\n        (ReactSharedInternals.H =\n          null !== index && null !== index.memoizedState\n            ? HooksDispatcherOnUpdateInDEV\n            : HooksDispatcherOnMountInDEV));\n      return thenable;\n    }\n    function use(usable) {\n      if (null !== usable && \"object\" === typeof usable) {\n        if (\"function\" === typeof usable.then) return useThenable(usable);\n        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);\n      }\n      throw Error(\"An unsupported type was passed to use(): \" + String(usable));\n    }\n    function useMemoCache(size) {\n      var memoCache = null,\n        updateQueue = currentlyRenderingFiber$1.updateQueue;\n      null !== updateQueue && (memoCache = updateQueue.memoCache);\n      if (null == memoCache) {\n        var current = currentlyRenderingFiber$1.alternate;\n        null !== current &&\n          ((current = current.updateQueue),\n          null !== current &&\n            ((current = current.memoCache),\n            null != current &&\n              (memoCache = {\n                data: current.data.map(function (array) {\n                  return array.slice();\n                }),\n                index: 0\n              })));\n      }\n      null == memoCache && (memoCache = { data: [], index: 0 });\n      null === updateQueue &&\n        ((updateQueue = createFunctionComponentUpdateQueue()),\n        (currentlyRenderingFiber$1.updateQueue = updateQueue));\n      updateQueue.memoCache = memoCache;\n      updateQueue = memoCache.data[memoCache.index];\n      if (void 0 === updateQueue || ignorePreviousDependencies)\n        for (\n          updateQueue = memoCache.data[memoCache.index] = Array(size),\n            current = 0;\n          current < size;\n          current++\n        )\n          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;\n      else\n        updateQueue.length !== size &&\n          console.error(\n            \"Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.\",\n            updateQueue.length,\n            size\n          );\n      memoCache.index++;\n      return updateQueue;\n    }\n    function basicStateReducer(state, action) {\n      return \"function\" === typeof action ? action(state) : action;\n    }\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      if (void 0 !== init) {\n        var initialState = init(initialArg);\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(!0);\n          try {\n            init(initialArg);\n          } finally {\n            setIsStrictModeForDevtools(!1);\n          }\n        }\n      } else initialState = initialArg;\n      hook.memoizedState = hook.baseState = initialState;\n      reducer = {\n        pending: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = reducer;\n      reducer = reducer.dispatch = dispatchReducerAction.bind(\n        null,\n        currentlyRenderingFiber$1,\n        reducer\n      );\n      return [hook.memoizedState, reducer];\n    }\n    function updateReducer(reducer) {\n      var hook = updateWorkInProgressHook();\n      return updateReducerImpl(hook, currentHook, reducer);\n    }\n    function updateReducerImpl(hook, current, reducer) {\n      var queue = hook.queue;\n      if (null === queue)\n        throw Error(\n          \"Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)\"\n        );\n      queue.lastRenderedReducer = reducer;\n      var baseQueue = hook.baseQueue,\n        pendingQueue = queue.pending;\n      if (null !== pendingQueue) {\n        if (null !== baseQueue) {\n          var baseFirst = baseQueue.next;\n          baseQueue.next = pendingQueue.next;\n          pendingQueue.next = baseFirst;\n        }\n        current.baseQueue !== baseQueue &&\n          console.error(\n            \"Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.\"\n          );\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n      pendingQueue = hook.baseState;\n      if (null === baseQueue) hook.memoizedState = pendingQueue;\n      else {\n        current = baseQueue.next;\n        var newBaseQueueFirst = (baseFirst = null),\n          newBaseQueueLast = null,\n          update = current,\n          didReadFromEntangledAsyncAction = !1;\n        do {\n          var updateLane = update.lane & -536870913;\n          if (\n            updateLane !== update.lane\n              ? (workInProgressRootRenderLanes & updateLane) === updateLane\n              : (renderLanes & updateLane) === updateLane\n          ) {\n            var revertLane = update.revertLane;\n            if (0 === revertLane)\n              null !== newBaseQueueLast &&\n                (newBaseQueueLast = newBaseQueueLast.next =\n                  {\n                    lane: 0,\n                    revertLane: 0,\n                    action: update.action,\n                    hasEagerState: update.hasEagerState,\n                    eagerState: update.eagerState,\n                    next: null\n                  }),\n                updateLane === currentEntangledLane &&\n                  (didReadFromEntangledAsyncAction = !0);\n            else if ((renderLanes & revertLane) === revertLane) {\n              update = update.next;\n              revertLane === currentEntangledLane &&\n                (didReadFromEntangledAsyncAction = !0);\n              continue;\n            } else\n              (updateLane = {\n                lane: 0,\n                revertLane: update.revertLane,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              }),\n                null === newBaseQueueLast\n                  ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),\n                    (baseFirst = pendingQueue))\n                  : (newBaseQueueLast = newBaseQueueLast.next = updateLane),\n                (currentlyRenderingFiber$1.lanes |= revertLane),\n                (workInProgressRootSkippedLanes |= revertLane);\n            updateLane = update.action;\n            shouldDoubleInvokeUserFnsInHooksDEV &&\n              reducer(pendingQueue, updateLane);\n            pendingQueue = update.hasEagerState\n              ? update.eagerState\n              : reducer(pendingQueue, updateLane);\n          } else\n            (revertLane = {\n              lane: updateLane,\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            }),\n              null === newBaseQueueLast\n                ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),\n                  (baseFirst = pendingQueue))\n                : (newBaseQueueLast = newBaseQueueLast.next = revertLane),\n              (currentlyRenderingFiber$1.lanes |= updateLane),\n              (workInProgressRootSkippedLanes |= updateLane);\n          update = update.next;\n        } while (null !== update && update !== current);\n        null === newBaseQueueLast\n          ? (baseFirst = pendingQueue)\n          : (newBaseQueueLast.next = newBaseQueueFirst);\n        if (\n          !objectIs(pendingQueue, hook.memoizedState) &&\n          ((didReceiveUpdate = !0),\n          didReadFromEntangledAsyncAction &&\n            ((reducer = currentEntangledActionThenable), null !== reducer))\n        )\n          throw reducer;\n        hook.memoizedState = pendingQueue;\n        hook.baseState = baseFirst;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = pendingQueue;\n      }\n      null === baseQueue && (queue.lanes = 0);\n      return [hook.memoizedState, queue.dispatch];\n    }\n    function rerenderReducer(reducer) {\n      var hook = updateWorkInProgressHook(),\n        queue = hook.queue;\n      if (null === queue)\n        throw Error(\n          \"Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)\"\n        );\n      queue.lastRenderedReducer = reducer;\n      var dispatch = queue.dispatch,\n        lastRenderPhaseUpdate = queue.pending,\n        newState = hook.memoizedState;\n      if (null !== lastRenderPhaseUpdate) {\n        queue.pending = null;\n        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);\n        do\n          (newState = reducer(newState, update.action)), (update = update.next);\n        while (update !== lastRenderPhaseUpdate);\n        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);\n        hook.memoizedState = newState;\n        null === hook.baseQueue && (hook.baseState = newState);\n        queue.lastRenderedState = newState;\n      }\n      return [newState, dispatch];\n    }\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1,\n        hook = mountWorkInProgressHook();\n      if (isHydrating) {\n        if (void 0 === getServerSnapshot)\n          throw Error(\n            \"Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.\"\n          );\n        var nextSnapshot = getServerSnapshot();\n        didWarnUncachedGetSnapshot ||\n          nextSnapshot === getServerSnapshot() ||\n          (console.error(\n            \"The result of getServerSnapshot should be cached to avoid an infinite loop\"\n          ),\n          (didWarnUncachedGetSnapshot = !0));\n      } else {\n        nextSnapshot = getSnapshot();\n        didWarnUncachedGetSnapshot ||\n          ((getServerSnapshot = getSnapshot()),\n          objectIs(nextSnapshot, getServerSnapshot) ||\n            (console.error(\n              \"The result of getSnapshot should be cached to avoid an infinite loop\"\n            ),\n            (didWarnUncachedGetSnapshot = !0)));\n        if (null === workInProgressRoot)\n          throw Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        0 !== (workInProgressRootRenderLanes & 60) ||\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n      }\n      hook.memoizedState = nextSnapshot;\n      getServerSnapshot = { value: nextSnapshot, getSnapshot: getSnapshot };\n      hook.queue = getServerSnapshot;\n      mountEffect(\n        subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),\n        [subscribe]\n      );\n      fiber.flags |= 2048;\n      pushEffect(\n        HasEffect | Passive,\n        updateStoreInstance.bind(\n          null,\n          fiber,\n          getServerSnapshot,\n          nextSnapshot,\n          getSnapshot\n        ),\n        { destroy: void 0 },\n        null\n      );\n      return nextSnapshot;\n    }\n    function updateSyncExternalStore(\n      subscribe,\n      getSnapshot,\n      getServerSnapshot\n    ) {\n      var fiber = currentlyRenderingFiber$1,\n        hook = updateWorkInProgressHook(),\n        isHydrating$jscomp$0 = isHydrating;\n      if (isHydrating$jscomp$0) {\n        if (void 0 === getServerSnapshot)\n          throw Error(\n            \"Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.\"\n          );\n        getServerSnapshot = getServerSnapshot();\n      } else if (\n        ((getServerSnapshot = getSnapshot()), !didWarnUncachedGetSnapshot)\n      ) {\n        var cachedSnapshot = getSnapshot();\n        objectIs(getServerSnapshot, cachedSnapshot) ||\n          (console.error(\n            \"The result of getSnapshot should be cached to avoid an infinite loop\"\n          ),\n          (didWarnUncachedGetSnapshot = !0));\n      }\n      if (\n        (cachedSnapshot = !objectIs(\n          (currentHook || hook).memoizedState,\n          getServerSnapshot\n        ))\n      )\n        (hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0);\n      hook = hook.queue;\n      var create = subscribeToStore.bind(null, fiber, hook, subscribe);\n      updateEffectImpl(2048, Passive, create, [subscribe]);\n      if (\n        hook.getSnapshot !== getSnapshot ||\n        cachedSnapshot ||\n        (null !== workInProgressHook &&\n          workInProgressHook.memoizedState.tag & HasEffect)\n      ) {\n        fiber.flags |= 2048;\n        pushEffect(\n          HasEffect | Passive,\n          updateStoreInstance.bind(\n            null,\n            fiber,\n            hook,\n            getServerSnapshot,\n            getSnapshot\n          ),\n          { destroy: void 0 },\n          null\n        );\n        if (null === workInProgressRoot)\n          throw Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        isHydrating$jscomp$0 ||\n          0 !== (renderLanes & 60) ||\n          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);\n      }\n      return getServerSnapshot;\n    }\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= 16384;\n      fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };\n      getSnapshot = currentlyRenderingFiber$1.updateQueue;\n      null === getSnapshot\n        ? ((getSnapshot = createFunctionComponentUpdateQueue()),\n          (currentlyRenderingFiber$1.updateQueue = getSnapshot),\n          (getSnapshot.stores = [fiber]))\n        : ((renderedSnapshot = getSnapshot.stores),\n          null === renderedSnapshot\n            ? (getSnapshot.stores = [fiber])\n            : renderedSnapshot.push(fiber));\n    }\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);\n    }\n    function subscribeToStore(fiber, inst, subscribe) {\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);\n      });\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      inst = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(inst, nextValue);\n      } catch (error) {\n        return !0;\n      }\n    }\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, 2);\n      null !== root && scheduleUpdateOnFiber(root, fiber, 2);\n    }\n    function mountStateImpl(initialState) {\n      var hook = mountWorkInProgressHook();\n      if (\"function\" === typeof initialState) {\n        var initialStateInitializer = initialState;\n        initialState = initialStateInitializer();\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(!0);\n          try {\n            initialStateInitializer();\n          } finally {\n            setIsStrictModeForDevtools(!1);\n          }\n        }\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      hook.queue = {\n        pending: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      return hook;\n    }\n    function mountState(initialState) {\n      initialState = mountStateImpl(initialState);\n      var queue = initialState.queue,\n        dispatch = dispatchSetState.bind(\n          null,\n          currentlyRenderingFiber$1,\n          queue\n        );\n      queue.dispatch = dispatch;\n      return [initialState.memoizedState, dispatch];\n    }\n    function mountOptimistic(passthrough) {\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = hook.baseState = passthrough;\n      var queue = {\n        pending: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: null,\n        lastRenderedState: null\n      };\n      hook.queue = queue;\n      hook = dispatchOptimisticSetState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        !0,\n        queue\n      );\n      queue.dispatch = hook;\n      return [passthrough, hook];\n    }\n    function updateOptimistic(passthrough, reducer) {\n      var hook = updateWorkInProgressHook();\n      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n    }\n    function updateOptimisticImpl(hook, current, passthrough, reducer) {\n      hook.baseState = passthrough;\n      return updateReducerImpl(\n        hook,\n        currentHook,\n        \"function\" === typeof reducer ? reducer : basicStateReducer\n      );\n    }\n    function rerenderOptimistic(passthrough, reducer) {\n      var hook = updateWorkInProgressHook();\n      if (null !== currentHook)\n        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n      hook.baseState = passthrough;\n      return [passthrough, hook.queue.dispatch];\n    }\n    function dispatchActionState(\n      fiber,\n      actionQueue,\n      setPendingState,\n      setState,\n      payload\n    ) {\n      if (isRenderPhaseUpdate(fiber))\n        throw Error(\"Cannot update form state while rendering.\");\n      fiber = actionQueue.action;\n      if (null !== fiber) {\n        var actionNode = {\n          payload: payload,\n          action: fiber,\n          next: null,\n          isTransition: !0,\n          status: \"pending\",\n          value: null,\n          reason: null,\n          listeners: [],\n          then: function (listener) {\n            actionNode.listeners.push(listener);\n          }\n        };\n        null !== ReactSharedInternals.T\n          ? setPendingState(!0)\n          : (actionNode.isTransition = !1);\n        setState(actionNode);\n        setPendingState = actionQueue.pending;\n        null === setPendingState\n          ? ((actionNode.next = actionQueue.pending = actionNode),\n            runActionStateAction(actionQueue, actionNode))\n          : ((actionNode.next = setPendingState.next),\n            (actionQueue.pending = setPendingState.next = actionNode));\n      }\n    }\n    function runActionStateAction(actionQueue, node) {\n      var action = node.action,\n        payload = node.payload,\n        prevState = actionQueue.state;\n      if (node.isTransition) {\n        var prevTransition = ReactSharedInternals.T,\n          currentTransition = {};\n        ReactSharedInternals.T = currentTransition;\n        ReactSharedInternals.T._updatedFibers = new Set();\n        try {\n          var returnValue = action(prevState, payload),\n            onStartTransitionFinish = ReactSharedInternals.S;\n          null !== onStartTransitionFinish &&\n            onStartTransitionFinish(currentTransition, returnValue);\n          handleActionReturnValue(actionQueue, node, returnValue);\n        } catch (error) {\n          onActionError(actionQueue, node, error);\n        } finally {\n          (ReactSharedInternals.T = prevTransition),\n            null === prevTransition &&\n              currentTransition._updatedFibers &&\n              ((actionQueue = currentTransition._updatedFibers.size),\n              currentTransition._updatedFibers.clear(),\n              10 < actionQueue &&\n                console.warn(\n                  \"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.\"\n                ));\n        }\n      } else\n        try {\n          (currentTransition = action(prevState, payload)),\n            handleActionReturnValue(actionQueue, node, currentTransition);\n        } catch (error$2) {\n          onActionError(actionQueue, node, error$2);\n        }\n    }\n    function handleActionReturnValue(actionQueue, node, returnValue) {\n      null !== returnValue &&\n      \"object\" === typeof returnValue &&\n      \"function\" === typeof returnValue.then\n        ? (returnValue.then(\n            function (nextState) {\n              onActionSuccess(actionQueue, node, nextState);\n            },\n            function (error) {\n              return onActionError(actionQueue, node, error);\n            }\n          ),\n          node.isTransition ||\n            console.error(\n              \"An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`\"\n            ))\n        : onActionSuccess(actionQueue, node, returnValue);\n    }\n    function onActionSuccess(actionQueue, actionNode, nextState) {\n      actionNode.status = \"fulfilled\";\n      actionNode.value = nextState;\n      notifyActionListeners(actionNode);\n      actionQueue.state = nextState;\n      actionNode = actionQueue.pending;\n      null !== actionNode &&\n        ((nextState = actionNode.next),\n        nextState === actionNode\n          ? (actionQueue.pending = null)\n          : ((nextState = nextState.next),\n            (actionNode.next = nextState),\n            runActionStateAction(actionQueue, nextState)));\n    }\n    function onActionError(actionQueue, actionNode, error) {\n      var last = actionQueue.pending;\n      actionQueue.pending = null;\n      if (null !== last) {\n        last = last.next;\n        do\n          (actionNode.status = \"rejected\"),\n            (actionNode.reason = error),\n            notifyActionListeners(actionNode),\n            (actionNode = actionNode.next);\n        while (actionNode !== last);\n      }\n      actionQueue.action = null;\n    }\n    function notifyActionListeners(actionNode) {\n      actionNode = actionNode.listeners;\n      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();\n    }\n    function actionStateReducer(oldState, newState) {\n      return newState;\n    }\n    function mountActionState(action, initialStateProp) {\n      if (isHydrating) {\n        var ssrFormState = workInProgressRoot.formState;\n        if (null !== ssrFormState) {\n          a: {\n            var isMatching = currentlyRenderingFiber$1;\n            if (isHydrating) {\n              if (nextHydratableInstance) {\n                var markerInstance = canHydrateFormStateMarker(\n                  nextHydratableInstance,\n                  rootOrSingletonContext\n                );\n                if (markerInstance) {\n                  nextHydratableInstance =\n                    getNextHydratableSibling(markerInstance);\n                  isMatching = isFormStateMarkerMatching(markerInstance);\n                  break a;\n                }\n              }\n              throwOnHydrationMismatch(isMatching);\n            }\n            isMatching = !1;\n          }\n          isMatching && (initialStateProp = ssrFormState[0]);\n        }\n      }\n      ssrFormState = mountWorkInProgressHook();\n      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;\n      isMatching = {\n        pending: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: actionStateReducer,\n        lastRenderedState: initialStateProp\n      };\n      ssrFormState.queue = isMatching;\n      ssrFormState = dispatchSetState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        isMatching\n      );\n      isMatching.dispatch = ssrFormState;\n      isMatching = mountStateImpl(!1);\n      var setPendingState = dispatchOptimisticSetState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        !1,\n        isMatching.queue\n      );\n      isMatching = mountWorkInProgressHook();\n      markerInstance = {\n        state: initialStateProp,\n        dispatch: null,\n        action: action,\n        pending: null\n      };\n      isMatching.queue = markerInstance;\n      ssrFormState = dispatchActionState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        markerInstance,\n        setPendingState,\n        ssrFormState\n      );\n      markerInstance.dispatch = ssrFormState;\n      isMatching.memoizedState = action;\n      return [initialStateProp, ssrFormState, !1];\n    }\n    function updateActionState(action) {\n      var stateHook = updateWorkInProgressHook();\n      return updateActionStateImpl(stateHook, currentHook, action);\n    }\n    function updateActionStateImpl(stateHook, currentStateHook, action) {\n      currentStateHook = updateReducerImpl(\n        stateHook,\n        currentStateHook,\n        actionStateReducer\n      )[0];\n      stateHook = updateReducer(basicStateReducer)[0];\n      currentStateHook =\n        \"object\" === typeof currentStateHook &&\n        null !== currentStateHook &&\n        \"function\" === typeof currentStateHook.then\n          ? useThenable(currentStateHook)\n          : currentStateHook;\n      var actionQueueHook = updateWorkInProgressHook(),\n        actionQueue = actionQueueHook.queue,\n        dispatch = actionQueue.dispatch;\n      action !== actionQueueHook.memoizedState &&\n        ((currentlyRenderingFiber$1.flags |= 2048),\n        pushEffect(\n          HasEffect | Passive,\n          actionStateActionEffect.bind(null, actionQueue, action),\n          { destroy: void 0 },\n          null\n        ));\n      return [currentStateHook, dispatch, stateHook];\n    }\n    function actionStateActionEffect(actionQueue, action) {\n      actionQueue.action = action;\n    }\n    function rerenderActionState(action) {\n      var stateHook = updateWorkInProgressHook(),\n        currentStateHook = currentHook;\n      if (null !== currentStateHook)\n        return updateActionStateImpl(stateHook, currentStateHook, action);\n      updateWorkInProgressHook();\n      stateHook = stateHook.memoizedState;\n      currentStateHook = updateWorkInProgressHook();\n      var dispatch = currentStateHook.queue.dispatch;\n      currentStateHook.memoizedState = action;\n      return [stateHook, dispatch, !1];\n    }\n    function pushEffect(tag, create, inst, deps) {\n      tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };\n      create = currentlyRenderingFiber$1.updateQueue;\n      null === create &&\n        ((create = createFunctionComponentUpdateQueue()),\n        (currentlyRenderingFiber$1.updateQueue = create));\n      inst = create.lastEffect;\n      null === inst\n        ? (create.lastEffect = tag.next = tag)\n        : ((deps = inst.next),\n          (inst.next = tag),\n          (tag.next = deps),\n          (create.lastEffect = tag));\n      return tag;\n    }\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      initialValue = { current: initialValue };\n      return (hook.memoizedState = initialValue);\n    }\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(\n        HasEffect | hookFlags,\n        create,\n        { destroy: void 0 },\n        void 0 === deps ? null : deps\n      );\n    }\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      deps = void 0 === deps ? null : deps;\n      var inst = hook.memoizedState.inst;\n      null !== currentHook &&\n      null !== deps &&\n      areHookInputsEqual(deps, currentHook.memoizedState.deps)\n        ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))\n        : ((currentlyRenderingFiber$1.flags |= fiberFlags),\n          (hook.memoizedState = pushEffect(\n            HasEffect | hookFlags,\n            create,\n            inst,\n            deps\n          )));\n    }\n    function mountEffect(create, deps) {\n      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&\n      (currentlyRenderingFiber$1.mode & 64) === NoMode\n        ? mountEffectImpl(142608384, Passive, create, deps)\n        : mountEffectImpl(8390656, Passive, create, deps);\n    }\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = 4194308;\n      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&\n        (fiberFlags |= 67108864);\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n    function imperativeHandleEffect(create, ref) {\n      if (\"function\" === typeof ref) {\n        create = create();\n        var refCleanup = ref(create);\n        return function () {\n          \"function\" === typeof refCleanup ? refCleanup() : ref(null);\n        };\n      }\n      if (null !== ref && void 0 !== ref)\n        return (\n          ref.hasOwnProperty(\"current\") ||\n            console.error(\n              \"Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.\",\n              \"an object with keys {\" + Object.keys(ref).join(\", \") + \"}\"\n            ),\n          (create = create()),\n          (ref.current = create),\n          function () {\n            ref.current = null;\n          }\n        );\n    }\n    function mountImperativeHandle(ref, create, deps) {\n      \"function\" !== typeof create &&\n        console.error(\n          \"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.\",\n          null !== create ? typeof create : \"null\"\n        );\n      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;\n      var fiberFlags = 4194308;\n      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&\n        (fiberFlags |= 67108864);\n      mountEffectImpl(\n        fiberFlags,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        deps\n      );\n    }\n    function updateImperativeHandle(ref, create, deps) {\n      \"function\" !== typeof create &&\n        console.error(\n          \"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.\",\n          null !== create ? typeof create : \"null\"\n        );\n      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;\n      updateEffectImpl(\n        4,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        deps\n      );\n    }\n    function mountCallback(callback, deps) {\n      mountWorkInProgressHook().memoizedState = [\n        callback,\n        void 0 === deps ? null : deps\n      ];\n      return callback;\n    }\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      deps = void 0 === deps ? null : deps;\n      var prevState = hook.memoizedState;\n      if (null !== deps && areHookInputsEqual(deps, prevState[1]))\n        return prevState[0];\n      hook.memoizedState = [callback, deps];\n      return callback;\n    }\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      deps = void 0 === deps ? null : deps;\n      var nextValue = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(!0);\n        try {\n          nextCreate();\n        } finally {\n          setIsStrictModeForDevtools(!1);\n        }\n      }\n      hook.memoizedState = [nextValue, deps];\n      return nextValue;\n    }\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      deps = void 0 === deps ? null : deps;\n      var prevState = hook.memoizedState;\n      if (null !== deps && areHookInputsEqual(deps, prevState[1]))\n        return prevState[0];\n      prevState = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(!0);\n        try {\n          nextCreate();\n        } finally {\n          setIsStrictModeForDevtools(!1);\n        }\n      }\n      hook.memoizedState = [prevState, deps];\n      return prevState;\n    }\n    function mountDeferredValue(value, initialValue) {\n      var hook = mountWorkInProgressHook();\n      return mountDeferredValueImpl(hook, value, initialValue);\n    }\n    function updateDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      return updateDeferredValueImpl(\n        hook,\n        currentHook.memoizedState,\n        value,\n        initialValue\n      );\n    }\n    function rerenderDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      return null === currentHook\n        ? mountDeferredValueImpl(hook, value, initialValue)\n        : updateDeferredValueImpl(\n            hook,\n            currentHook.memoizedState,\n            value,\n            initialValue\n          );\n    }\n    function mountDeferredValueImpl(hook, value, initialValue) {\n      if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))\n        return (hook.memoizedState = value);\n      hook.memoizedState = initialValue;\n      hook = requestDeferredLane();\n      currentlyRenderingFiber$1.lanes |= hook;\n      workInProgressRootSkippedLanes |= hook;\n      return initialValue;\n    }\n    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n      if (objectIs(value, prevValue)) return value;\n      if (null !== currentTreeHiddenStackCursor.current)\n        return (\n          (hook = mountDeferredValueImpl(hook, value, initialValue)),\n          objectIs(hook, prevValue) || (didReceiveUpdate = !0),\n          hook\n        );\n      if (0 === (renderLanes & 42))\n        return (didReceiveUpdate = !0), (hook.memoizedState = value);\n      hook = requestDeferredLane();\n      currentlyRenderingFiber$1.lanes |= hook;\n      workInProgressRootSkippedLanes |= hook;\n      return prevValue;\n    }\n    function startTransition(\n      fiber,\n      queue,\n      pendingState,\n      finishedState,\n      callback\n    ) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(\n        0 !== previousPriority && 8 > previousPriority ? previousPriority : 8\n      );\n      var prevTransition = ReactSharedInternals.T,\n        currentTransition = {};\n      ReactSharedInternals.T = currentTransition;\n      dispatchOptimisticSetState(fiber, !1, queue, pendingState);\n      currentTransition._updatedFibers = new Set();\n      try {\n        var returnValue = callback(),\n          onStartTransitionFinish = ReactSharedInternals.S;\n        null !== onStartTransitionFinish &&\n          onStartTransitionFinish(currentTransition, returnValue);\n        if (\n          null !== returnValue &&\n          \"object\" === typeof returnValue &&\n          \"function\" === typeof returnValue.then\n        ) {\n          var thenableForFinishedState = chainThenableValue(\n            returnValue,\n            finishedState\n          );\n          dispatchSetStateInternal(\n            fiber,\n            queue,\n            thenableForFinishedState,\n            requestUpdateLane(fiber)\n          );\n        } else\n          dispatchSetStateInternal(\n            fiber,\n            queue,\n            finishedState,\n            requestUpdateLane(fiber)\n          );\n      } catch (error) {\n        dispatchSetStateInternal(\n          fiber,\n          queue,\n          { then: function () {}, status: \"rejected\", reason: error },\n          requestUpdateLane(fiber)\n        );\n      } finally {\n        setCurrentUpdatePriority(previousPriority),\n          (ReactSharedInternals.T = prevTransition),\n          null === prevTransition &&\n            currentTransition._updatedFibers &&\n            ((fiber = currentTransition._updatedFibers.size),\n            currentTransition._updatedFibers.clear(),\n            10 < fiber &&\n              console.warn(\n                \"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.\"\n              ));\n      }\n    }\n    function ensureFormComponentIsStateful(formFiber) {\n      var existingStateHook = formFiber.memoizedState;\n      if (null !== existingStateHook) return existingStateHook;\n      existingStateHook = {\n        memoizedState: NotPendingTransition,\n        baseState: NotPendingTransition,\n        baseQueue: null,\n        queue: {\n          pending: null,\n          lanes: 0,\n          dispatch: null,\n          lastRenderedReducer: basicStateReducer,\n          lastRenderedState: NotPendingTransition\n        },\n        next: null\n      };\n      var initialResetState = {};\n      existingStateHook.next = {\n        memoizedState: initialResetState,\n        baseState: initialResetState,\n        baseQueue: null,\n        queue: {\n          pending: null,\n          lanes: 0,\n          dispatch: null,\n          lastRenderedReducer: basicStateReducer,\n          lastRenderedState: initialResetState\n        },\n        next: null\n      };\n      formFiber.memoizedState = existingStateHook;\n      formFiber = formFiber.alternate;\n      null !== formFiber && (formFiber.memoizedState = existingStateHook);\n      return existingStateHook;\n    }\n    function mountTransition() {\n      var stateHook = mountStateImpl(!1);\n      stateHook = startTransition.bind(\n        null,\n        currentlyRenderingFiber$1,\n        stateHook.queue,\n        !0,\n        !1\n      );\n      mountWorkInProgressHook().memoizedState = stateHook;\n      return [!1, stateHook];\n    }\n    function updateTransition() {\n      var booleanOrThenable = updateReducer(basicStateReducer)[0],\n        start = updateWorkInProgressHook().memoizedState;\n      return [\n        \"boolean\" === typeof booleanOrThenable\n          ? booleanOrThenable\n          : useThenable(booleanOrThenable),\n        start\n      ];\n    }\n    function rerenderTransition() {\n      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],\n        start = updateWorkInProgressHook().memoizedState;\n      return [\n        \"boolean\" === typeof booleanOrThenable\n          ? booleanOrThenable\n          : useThenable(booleanOrThenable),\n        start\n      ];\n    }\n    function useHostTransitionStatus() {\n      return readContext(HostTransitionContext);\n    }\n    function mountId() {\n      var hook = mountWorkInProgressHook(),\n        identifierPrefix = workInProgressRoot.identifierPrefix;\n      if (isHydrating) {\n        var treeId = treeContextOverflow;\n        var idWithLeadingBit = treeContextId;\n        treeId =\n          (\n            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))\n          ).toString(32) + treeId;\n        identifierPrefix = \":\" + identifierPrefix + \"R\" + treeId;\n        treeId = localIdCounter++;\n        0 < treeId && (identifierPrefix += \"H\" + treeId.toString(32));\n        identifierPrefix += \":\";\n      } else\n        (treeId = globalClientIdCounter++),\n          (identifierPrefix =\n            \":\" + identifierPrefix + \"r\" + treeId.toString(32) + \":\");\n      return (hook.memoizedState = identifierPrefix);\n    }\n    function mountRefresh() {\n      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(\n        null,\n        currentlyRenderingFiber$1\n      ));\n    }\n    function refreshCache(fiber, seedKey) {\n      for (var provider = fiber.return; null !== provider; ) {\n        switch (provider.tag) {\n          case 24:\n          case 3:\n            var lane = requestUpdateLane(provider);\n            fiber = createUpdate(lane);\n            var root = enqueueUpdate(provider, fiber, lane);\n            null !== root &&\n              (scheduleUpdateOnFiber(root, provider, lane),\n              entangleTransitions(root, provider, lane));\n            provider = createCache();\n            null !== seedKey &&\n              void 0 !== seedKey &&\n              null !== root &&\n              console.error(\n                \"The seed argument is not enabled outside experimental channels.\"\n              );\n            fiber.payload = { cache: provider };\n            return;\n        }\n        provider = provider.return;\n      }\n    }\n    function dispatchReducerAction(\n      fiber,\n      queue,\n      action,\n      JSCompiler_OptimizeArgumentsArray_p0\n    ) {\n      \"function\" === typeof JSCompiler_OptimizeArgumentsArray_p0 &&\n        console.error(\n          \"State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().\"\n        );\n      JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);\n      action = {\n        lane: JSCompiler_OptimizeArgumentsArray_p0,\n        revertLane: 0,\n        action: action,\n        hasEagerState: !1,\n        eagerState: null,\n        next: null\n      };\n      isRenderPhaseUpdate(fiber)\n        ? enqueueRenderPhaseUpdate(queue, action)\n        : ((action = enqueueConcurrentHookUpdate(\n            fiber,\n            queue,\n            action,\n            JSCompiler_OptimizeArgumentsArray_p0\n          )),\n          null !== action &&\n            (scheduleUpdateOnFiber(\n              action,\n              fiber,\n              JSCompiler_OptimizeArgumentsArray_p0\n            ),\n            entangleTransitionUpdate(\n              action,\n              queue,\n              JSCompiler_OptimizeArgumentsArray_p0\n            )));\n      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);\n    }\n    function dispatchSetState(\n      fiber,\n      queue,\n      action,\n      JSCompiler_OptimizeArgumentsArray_p1\n    ) {\n      \"function\" === typeof JSCompiler_OptimizeArgumentsArray_p1 &&\n        console.error(\n          \"State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().\"\n        );\n      JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);\n      dispatchSetStateInternal(\n        fiber,\n        queue,\n        action,\n        JSCompiler_OptimizeArgumentsArray_p1\n      );\n      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);\n    }\n    function dispatchSetStateInternal(fiber, queue, action, lane) {\n      var update = {\n        lane: lane,\n        revertLane: 0,\n        action: action,\n        hasEagerState: !1,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);\n      else {\n        var alternate = fiber.alternate;\n        if (\n          0 === fiber.lanes &&\n          (null === alternate || 0 === alternate.lanes) &&\n          ((alternate = queue.lastRenderedReducer), null !== alternate)\n        ) {\n          var prevDispatcher = ReactSharedInternals.H;\n          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            var currentState = queue.lastRenderedState,\n              eagerState = alternate(currentState, action);\n            update.hasEagerState = !0;\n            update.eagerState = eagerState;\n            if (objectIs(eagerState, currentState))\n              return (\n                enqueueUpdate$1(fiber, queue, update, 0),\n                null === workInProgressRoot &&\n                  finishQueueingConcurrentUpdates(),\n                !1\n              );\n          } catch (error) {\n          } finally {\n            ReactSharedInternals.H = prevDispatcher;\n          }\n        }\n        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (null !== action)\n          return (\n            scheduleUpdateOnFiber(action, fiber, lane),\n            entangleTransitionUpdate(action, queue, lane),\n            !0\n          );\n      }\n      return !1;\n    }\n    function dispatchOptimisticSetState(\n      fiber,\n      throwIfDuringRender,\n      queue,\n      action\n    ) {\n      null === ReactSharedInternals.T &&\n        0 === currentEntangledLane &&\n        console.error(\n          \"An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition.\"\n        );\n      action = {\n        lane: 2,\n        revertLane: requestTransitionLane(),\n        action: action,\n        hasEagerState: !1,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        if (throwIfDuringRender)\n          throw Error(\"Cannot update optimistic state while rendering.\");\n        console.error(\"Cannot call startTransition while rendering.\");\n      } else\n        (throwIfDuringRender = enqueueConcurrentHookUpdate(\n          fiber,\n          queue,\n          action,\n          2\n        )),\n          null !== throwIfDuringRender &&\n            scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);\n      markStateUpdateScheduled(fiber, 2);\n    }\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return (\n        fiber === currentlyRenderingFiber$1 ||\n        (null !== alternate && alternate === currentlyRenderingFiber$1)\n      );\n    }\n    function enqueueRenderPhaseUpdate(queue, update) {\n      didScheduleRenderPhaseUpdateDuringThisPass =\n        didScheduleRenderPhaseUpdate = !0;\n      var pending = queue.pending;\n      null === pending\n        ? (update.next = update)\n        : ((update.next = pending.next), (pending.next = update));\n      queue.pending = update;\n    }\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (0 !== (lane & 4194176)) {\n        var queueLanes = queue.lanes;\n        queueLanes &= root.pendingLanes;\n        lane |= queueLanes;\n        queue.lanes = lane;\n        markRootEntangled(root, lane);\n      }\n    }\n    function warnOnInvalidCallback(callback) {\n      if (null !== callback && \"function\" !== typeof callback) {\n        var key = String(callback);\n        didWarnOnInvalidCallback.has(key) ||\n          (didWarnOnInvalidCallback.add(key),\n          console.error(\n            \"Expected the last optional `callback` argument to be a function. Instead received: %s.\",\n            callback\n          ));\n      }\n    }\n    function applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      nextProps\n    ) {\n      var prevState = workInProgress.memoizedState,\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      if (workInProgress.mode & 8) {\n        setIsStrictModeForDevtools(!0);\n        try {\n          partialState = getDerivedStateFromProps(nextProps, prevState);\n        } finally {\n          setIsStrictModeForDevtools(!1);\n        }\n      }\n      void 0 === partialState &&\n        ((ctor = getComponentNameFromType(ctor) || \"Component\"),\n        didWarnAboutUndefinedDerivedState.has(ctor) ||\n          (didWarnAboutUndefinedDerivedState.add(ctor),\n          console.error(\n            \"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.\",\n            ctor\n          )));\n      prevState =\n        null === partialState || void 0 === partialState\n          ? prevState\n          : assign({}, prevState, partialState);\n      workInProgress.memoizedState = prevState;\n      0 === workInProgress.lanes &&\n        (workInProgress.updateQueue.baseState = prevState);\n    }\n    function checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext\n    ) {\n      var instance = workInProgress.stateNode;\n      if (\"function\" === typeof instance.shouldComponentUpdate) {\n        oldProps = instance.shouldComponentUpdate(\n          newProps,\n          newState,\n          nextContext\n        );\n        if (workInProgress.mode & 8) {\n          setIsStrictModeForDevtools(!0);\n          try {\n            oldProps = instance.shouldComponentUpdate(\n              newProps,\n              newState,\n              nextContext\n            );\n          } finally {\n            setIsStrictModeForDevtools(!1);\n          }\n        }\n        void 0 === oldProps &&\n          console.error(\n            \"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.\",\n            getComponentNameFromType(ctor) || \"Component\"\n          );\n        return oldProps;\n      }\n      return ctor.prototype && ctor.prototype.isPureReactComponent\n        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n        : !0;\n    }\n    function callComponentWillReceiveProps(\n      workInProgress,\n      instance,\n      newProps,\n      nextContext\n    ) {\n      var oldState = instance.state;\n      \"function\" === typeof instance.componentWillReceiveProps &&\n        instance.componentWillReceiveProps(newProps, nextContext);\n      \"function\" === typeof instance.UNSAFE_componentWillReceiveProps &&\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      instance.state !== oldState &&\n        ((workInProgress =\n          getComponentNameFromFiber(workInProgress) || \"Component\"),\n        didWarnAboutStateAssignmentForComponent.has(workInProgress) ||\n          (didWarnAboutStateAssignmentForComponent.add(workInProgress),\n          console.error(\n            \"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.\",\n            workInProgress\n          )),\n        classComponentUpdater.enqueueReplaceState(\n          instance,\n          instance.state,\n          null\n        ));\n    }\n    function resolveClassComponentProps(Component, baseProps) {\n      var newProps = baseProps;\n      if (\"ref\" in baseProps) {\n        newProps = {};\n        for (var propName in baseProps)\n          \"ref\" !== propName && (newProps[propName] = baseProps[propName]);\n      }\n      if ((Component = Component.defaultProps)) {\n        newProps === baseProps && (newProps = assign({}, newProps));\n        for (var _propName in Component)\n          void 0 === newProps[_propName] &&\n            (newProps[_propName] = Component[_propName]);\n      }\n      return newProps;\n    }\n    function logUncaughtError(root, errorInfo) {\n      try {\n        componentName = errorInfo.source\n          ? getComponentNameFromFiber(errorInfo.source)\n          : null;\n        errorBoundaryName = null;\n        var error = errorInfo.value;\n        if (null !== ReactSharedInternals.actQueue)\n          ReactSharedInternals.thrownErrors.push(error);\n        else {\n          var onUncaughtError = root.onUncaughtError;\n          onUncaughtError(error, { componentStack: errorInfo.stack });\n        }\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n    function logCaughtError(root, boundary, errorInfo) {\n      try {\n        componentName = errorInfo.source\n          ? getComponentNameFromFiber(errorInfo.source)\n          : null;\n        errorBoundaryName = getComponentNameFromFiber(boundary);\n        var onCaughtError = root.onCaughtError;\n        onCaughtError(errorInfo.value, {\n          componentStack: errorInfo.stack,\n          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null\n        });\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n    function createRootErrorUpdate(root, errorInfo, lane) {\n      lane = createUpdate(lane);\n      lane.tag = CaptureUpdate;\n      lane.payload = { element: null };\n      lane.callback = function () {\n        runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);\n      };\n      return lane;\n    }\n    function createClassErrorUpdate(lane) {\n      lane = createUpdate(lane);\n      lane.tag = CaptureUpdate;\n      return lane;\n    }\n    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n      if (\"function\" === typeof getDerivedStateFromError) {\n        var error = errorInfo.value;\n        update.payload = function () {\n          return getDerivedStateFromError(error);\n        };\n        update.callback = function () {\n          markFailedErrorBoundaryForHotReloading(fiber);\n          runWithFiberInDEV(\n            errorInfo.source,\n            logCaughtError,\n            root,\n            fiber,\n            errorInfo\n          );\n        };\n      }\n      var inst = fiber.stateNode;\n      null !== inst &&\n        \"function\" === typeof inst.componentDidCatch &&\n        (update.callback = function () {\n          markFailedErrorBoundaryForHotReloading(fiber);\n          runWithFiberInDEV(\n            errorInfo.source,\n            logCaughtError,\n            root,\n            fiber,\n            errorInfo\n          );\n          \"function\" !== typeof getDerivedStateFromError &&\n            (null === legacyErrorBoundariesThatAlreadyFailed\n              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))\n              : legacyErrorBoundariesThatAlreadyFailed.add(this));\n          callComponentDidCatchInDEV(this, errorInfo);\n          \"function\" === typeof getDerivedStateFromError ||\n            (0 === (fiber.lanes & 2) &&\n              console.error(\n                \"%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.\",\n                getComponentNameFromFiber(fiber) || \"Unknown\"\n              ));\n        });\n    }\n    function throwException(\n      root,\n      returnFiber,\n      sourceFiber,\n      value,\n      rootRenderLanes\n    ) {\n      sourceFiber.flags |= 32768;\n      isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);\n      if (\n        null !== value &&\n        \"object\" === typeof value &&\n        \"function\" === typeof value.then\n      ) {\n        returnFiber = sourceFiber.alternate;\n        null !== returnFiber &&\n          propagateParentContextChanges(\n            returnFiber,\n            sourceFiber,\n            rootRenderLanes,\n            !0\n          );\n        isHydrating && (didSuspendOrErrorDEV = !0);\n        sourceFiber = suspenseHandlerStackCursor.current;\n        if (null !== sourceFiber) {\n          switch (sourceFiber.tag) {\n            case 13:\n              return (\n                null === shellBoundary\n                  ? renderDidSuspendDelayIfPossible()\n                  : null === sourceFiber.alternate &&\n                    workInProgressRootExitStatus === RootInProgress &&\n                    (workInProgressRootExitStatus = RootSuspended),\n                (sourceFiber.flags &= -257),\n                (sourceFiber.flags |= 65536),\n                (sourceFiber.lanes = rootRenderLanes),\n                value === noopSuspenseyCommitThenable\n                  ? (sourceFiber.flags |= 16384)\n                  : ((returnFiber = sourceFiber.updateQueue),\n                    null === returnFiber\n                      ? (sourceFiber.updateQueue = new Set([value]))\n                      : returnFiber.add(value),\n                    attachPingListener(root, value, rootRenderLanes)),\n                !1\n              );\n            case 22:\n              return (\n                (sourceFiber.flags |= 65536),\n                value === noopSuspenseyCommitThenable\n                  ? (sourceFiber.flags |= 16384)\n                  : ((returnFiber = sourceFiber.updateQueue),\n                    null === returnFiber\n                      ? ((returnFiber = {\n                          transitions: null,\n                          markerInstances: null,\n                          retryQueue: new Set([value])\n                        }),\n                        (sourceFiber.updateQueue = returnFiber))\n                      : ((sourceFiber = returnFiber.retryQueue),\n                        null === sourceFiber\n                          ? (returnFiber.retryQueue = new Set([value]))\n                          : sourceFiber.add(value)),\n                    attachPingListener(root, value, rootRenderLanes)),\n                !1\n              );\n          }\n          throw Error(\n            \"Unexpected Suspense handler tag (\" +\n              sourceFiber.tag +\n              \"). This is a bug in React.\"\n          );\n        }\n        attachPingListener(root, value, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return !1;\n      }\n      if (isHydrating)\n        return (\n          (didSuspendOrErrorDEV = !0),\n          (returnFiber = suspenseHandlerStackCursor.current),\n          null !== returnFiber\n            ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),\n              (returnFiber.flags |= 65536),\n              (returnFiber.lanes = rootRenderLanes),\n              value !== HydrationMismatchException &&\n                queueHydrationError(\n                  createCapturedValueAtFiber(\n                    Error(\n                      \"There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.\",\n                      { cause: value }\n                    ),\n                    sourceFiber\n                  )\n                ))\n            : (value !== HydrationMismatchException &&\n                queueHydrationError(\n                  createCapturedValueAtFiber(\n                    Error(\n                      \"There was an error while hydrating but React was able to recover by instead client rendering the entire root.\",\n                      { cause: value }\n                    ),\n                    sourceFiber\n                  )\n                ),\n              (root = root.current.alternate),\n              (root.flags |= 65536),\n              (rootRenderLanes &= -rootRenderLanes),\n              (root.lanes |= rootRenderLanes),\n              (value = createCapturedValueAtFiber(value, sourceFiber)),\n              (rootRenderLanes = createRootErrorUpdate(\n                root.stateNode,\n                value,\n                rootRenderLanes\n              )),\n              enqueueCapturedUpdate(root, rootRenderLanes),\n              workInProgressRootExitStatus !== RootSuspendedWithDelay &&\n                (workInProgressRootExitStatus = RootErrored)),\n          !1\n        );\n      var error = createCapturedValueAtFiber(\n        Error(\n          \"There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.\",\n          { cause: value }\n        ),\n        sourceFiber\n      );\n      null === workInProgressRootConcurrentErrors\n        ? (workInProgressRootConcurrentErrors = [error])\n        : workInProgressRootConcurrentErrors.push(error);\n      workInProgressRootExitStatus !== RootSuspendedWithDelay &&\n        (workInProgressRootExitStatus = RootErrored);\n      if (null === returnFiber) return !0;\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      sourceFiber = returnFiber;\n      do {\n        switch (sourceFiber.tag) {\n          case 3:\n            return (\n              (sourceFiber.flags |= 65536),\n              (root = rootRenderLanes & -rootRenderLanes),\n              (sourceFiber.lanes |= root),\n              (root = createRootErrorUpdate(\n                sourceFiber.stateNode,\n                value,\n                root\n              )),\n              enqueueCapturedUpdate(sourceFiber, root),\n              !1\n            );\n          case 1:\n            if (\n              ((returnFiber = sourceFiber.type),\n              (error = sourceFiber.stateNode),\n              0 === (sourceFiber.flags & 128) &&\n                (\"function\" === typeof returnFiber.getDerivedStateFromError ||\n                  (null !== error &&\n                    \"function\" === typeof error.componentDidCatch &&\n                    (null === legacyErrorBoundariesThatAlreadyFailed ||\n                      !legacyErrorBoundariesThatAlreadyFailed.has(error)))))\n            )\n              return (\n                (sourceFiber.flags |= 65536),\n                (rootRenderLanes &= -rootRenderLanes),\n                (sourceFiber.lanes |= rootRenderLanes),\n                (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),\n                initializeClassErrorUpdate(\n                  rootRenderLanes,\n                  root,\n                  sourceFiber,\n                  value\n                ),\n                enqueueCapturedUpdate(sourceFiber, rootRenderLanes),\n                !1\n              );\n        }\n        sourceFiber = sourceFiber.return;\n      } while (null !== sourceFiber);\n      return !1;\n    }\n    function reconcileChildren(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      workInProgress.child =\n        null === current\n          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)\n          : reconcileChildFibers(\n              workInProgress,\n              current.child,\n              nextChildren,\n              renderLanes\n            );\n    }\n    function updateForwardRef(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      Component = Component.render;\n      var ref = workInProgress.ref;\n      if (\"ref\" in nextProps) {\n        var propsWithoutRef = {};\n        for (var key in nextProps)\n          \"ref\" !== key && (propsWithoutRef[key] = nextProps[key]);\n      } else propsWithoutRef = nextProps;\n      prepareToReadContext(workInProgress);\n      markComponentRenderStarted(workInProgress);\n      nextProps = renderWithHooks(\n        current,\n        workInProgress,\n        Component,\n        propsWithoutRef,\n        ref,\n        renderLanes\n      );\n      key = checkDidRenderIdHook();\n      markComponentRenderStopped();\n      if (null !== current && !didReceiveUpdate)\n        return (\n          bailoutHooks(current, workInProgress, renderLanes),\n          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n        );\n      isHydrating && key && pushMaterializedTreeId(workInProgress);\n      workInProgress.flags |= 1;\n      reconcileChildren(current, workInProgress, nextProps, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      if (null === current) {\n        var type = Component.type;\n        if (\n          \"function\" === typeof type &&\n          !shouldConstruct(type) &&\n          void 0 === type.defaultProps &&\n          null === Component.compare\n        )\n          return (\n            (Component = resolveFunctionForHotReloading(type)),\n            (workInProgress.tag = 15),\n            (workInProgress.type = Component),\n            validateFunctionComponentInDev(workInProgress, type),\n            updateSimpleMemoComponent(\n              current,\n              workInProgress,\n              Component,\n              nextProps,\n              renderLanes\n            )\n          );\n        current = createFiberFromTypeAndProps(\n          Component.type,\n          null,\n          nextProps,\n          workInProgress,\n          workInProgress.mode,\n          renderLanes\n        );\n        current.ref = workInProgress.ref;\n        current.return = workInProgress;\n        return (workInProgress.child = current);\n      }\n      type = current.child;\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        var prevProps = type.memoizedProps;\n        Component = Component.compare;\n        Component = null !== Component ? Component : shallowEqual;\n        if (\n          Component(prevProps, nextProps) &&\n          current.ref === workInProgress.ref\n        )\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes\n          );\n      }\n      workInProgress.flags |= 1;\n      current = createWorkInProgress(type, nextProps);\n      current.ref = workInProgress.ref;\n      current.return = workInProgress;\n      return (workInProgress.child = current);\n    }\n    function updateSimpleMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      if (null !== current) {\n        var prevProps = current.memoizedProps;\n        if (\n          shallowEqual(prevProps, nextProps) &&\n          current.ref === workInProgress.ref &&\n          workInProgress.type === current.type\n        )\n          if (\n            ((didReceiveUpdate = !1),\n            (workInProgress.pendingProps = nextProps = prevProps),\n            checkScheduledUpdateOrContext(current, renderLanes))\n          )\n            0 !== (current.flags & 131072) && (didReceiveUpdate = !0);\n          else\n            return (\n              (workInProgress.lanes = current.lanes),\n              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n            );\n      }\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        renderLanes\n      );\n    }\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps,\n        nextChildren = nextProps.children,\n        nextIsDetached =\n          0 !== (workInProgress.stateNode._pendingVisibility & 2),\n        prevState = null !== current ? current.memoizedState : null;\n      markRef(current, workInProgress);\n      if (\"hidden\" === nextProps.mode || nextIsDetached) {\n        if (0 !== (workInProgress.flags & 128)) {\n          nextProps =\n            null !== prevState\n              ? prevState.baseLanes | renderLanes\n              : renderLanes;\n          if (null !== current) {\n            nextChildren = workInProgress.child = current.child;\n            for (nextIsDetached = 0; null !== nextChildren; )\n              (nextIsDetached =\n                nextIsDetached | nextChildren.lanes | nextChildren.childLanes),\n                (nextChildren = nextChildren.sibling);\n            workInProgress.childLanes = nextIsDetached & ~nextProps;\n          } else (workInProgress.childLanes = 0), (workInProgress.child = null);\n          return deferHiddenOffscreenComponent(\n            current,\n            workInProgress,\n            nextProps,\n            renderLanes\n          );\n        }\n        if (0 !== (renderLanes & 536870912))\n          (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),\n            null !== current &&\n              pushTransition(\n                workInProgress,\n                null !== prevState ? prevState.cachePool : null\n              ),\n            null !== prevState\n              ? pushHiddenContext(workInProgress, prevState)\n              : reuseHiddenContextOnStack(workInProgress),\n            pushOffscreenSuspenseHandler(workInProgress);\n        else\n          return (\n            (workInProgress.lanes = workInProgress.childLanes = 536870912),\n            deferHiddenOffscreenComponent(\n              current,\n              workInProgress,\n              null !== prevState\n                ? prevState.baseLanes | renderLanes\n                : renderLanes,\n              renderLanes\n            )\n          );\n      } else\n        null !== prevState\n          ? (pushTransition(workInProgress, prevState.cachePool),\n            pushHiddenContext(workInProgress, prevState),\n            reuseSuspenseHandlerOnStack(workInProgress),\n            (workInProgress.memoizedState = null))\n          : (null !== current && pushTransition(workInProgress, null),\n            reuseHiddenContextOnStack(workInProgress),\n            reuseSuspenseHandlerOnStack(workInProgress));\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function deferHiddenOffscreenComponent(\n      current,\n      workInProgress,\n      nextBaseLanes,\n      renderLanes\n    ) {\n      var JSCompiler_inline_result = peekCacheFromPool();\n      JSCompiler_inline_result =\n        null === JSCompiler_inline_result\n          ? null\n          : {\n              parent: isPrimaryRenderer\n                ? CacheContext._currentValue\n                : CacheContext._currentValue2,\n              pool: JSCompiler_inline_result\n            };\n      workInProgress.memoizedState = {\n        baseLanes: nextBaseLanes,\n        cachePool: JSCompiler_inline_result\n      };\n      null !== current && pushTransition(workInProgress, null);\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n      null !== current &&\n        propagateParentContextChanges(current, workInProgress, renderLanes, !0);\n      return null;\n    }\n    function markRef(current, workInProgress) {\n      var ref = workInProgress.ref;\n      if (null === ref)\n        null !== current &&\n          null !== current.ref &&\n          (workInProgress.flags |= 2097664);\n      else {\n        if (\"function\" !== typeof ref && \"object\" !== typeof ref)\n          throw Error(\n            \"Expected ref to be a function, an object returned by React.createRef(), or undefined/null.\"\n          );\n        if (null === current || current.ref !== ref)\n          workInProgress.flags |= 2097664;\n      }\n    }\n    function updateFunctionComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      if (\n        Component.prototype &&\n        \"function\" === typeof Component.prototype.render\n      ) {\n        var componentName = getComponentNameFromType(Component) || \"Unknown\";\n        didWarnAboutBadClass[componentName] ||\n          (console.error(\n            \"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.\",\n            componentName,\n            componentName\n          ),\n          (didWarnAboutBadClass[componentName] = !0));\n      }\n      workInProgress.mode & 8 &&\n        ReactStrictModeWarnings.recordLegacyContextWarning(\n          workInProgress,\n          null\n        );\n      null === current &&\n        (validateFunctionComponentInDev(workInProgress, workInProgress.type),\n        Component.contextTypes &&\n          ((componentName = getComponentNameFromType(Component) || \"Unknown\"),\n          didWarnAboutContextTypes[componentName] ||\n            ((didWarnAboutContextTypes[componentName] = !0),\n            console.error(\n              \"%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)\",\n              componentName\n            ))));\n      prepareToReadContext(workInProgress);\n      markComponentRenderStarted(workInProgress);\n      Component = renderWithHooks(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        void 0,\n        renderLanes\n      );\n      nextProps = checkDidRenderIdHook();\n      markComponentRenderStopped();\n      if (null !== current && !didReceiveUpdate)\n        return (\n          bailoutHooks(current, workInProgress, renderLanes),\n          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n        );\n      isHydrating && nextProps && pushMaterializedTreeId(workInProgress);\n      workInProgress.flags |= 1;\n      reconcileChildren(current, workInProgress, Component, renderLanes);\n      return workInProgress.child;\n    }\n    function replayFunctionComponent(\n      current,\n      workInProgress,\n      nextProps,\n      Component,\n      secondArg,\n      renderLanes\n    ) {\n      prepareToReadContext(workInProgress);\n      markComponentRenderStarted(workInProgress);\n      hookTypesUpdateIndexDev = -1;\n      ignorePreviousDependencies =\n        null !== current && current.type !== workInProgress.type;\n      workInProgress.updateQueue = null;\n      nextProps = renderWithHooksAgain(\n        workInProgress,\n        Component,\n        nextProps,\n        secondArg\n      );\n      finishRenderingHooks(current, workInProgress);\n      Component = checkDidRenderIdHook();\n      markComponentRenderStopped();\n      if (null !== current && !didReceiveUpdate)\n        return (\n          bailoutHooks(current, workInProgress, renderLanes),\n          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n        );\n      isHydrating && Component && pushMaterializedTreeId(workInProgress);\n      workInProgress.flags |= 1;\n      reconcileChildren(current, workInProgress, nextProps, renderLanes);\n      return workInProgress.child;\n    }\n    function updateClassComponent(\n      current$jscomp$0,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      switch (shouldErrorImpl(workInProgress)) {\n        case !1:\n          var _instance = workInProgress.stateNode,\n            state = new workInProgress.type(\n              workInProgress.memoizedProps,\n              _instance.context\n            ).state;\n          _instance.updater.enqueueSetState(_instance, state, null);\n          break;\n        case !0:\n          workInProgress.flags |= 128;\n          workInProgress.flags |= 65536;\n          _instance = Error(\"Simulated error coming from DevTools\");\n          var lane = renderLanes & -renderLanes;\n          workInProgress.lanes |= lane;\n          state = workInProgressRoot;\n          if (null === state)\n            throw Error(\n              \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n            );\n          lane = createClassErrorUpdate(lane);\n          initializeClassErrorUpdate(\n            lane,\n            state,\n            workInProgress,\n            createCapturedValueAtFiber(_instance, workInProgress)\n          );\n          enqueueCapturedUpdate(workInProgress, lane);\n      }\n      prepareToReadContext(workInProgress);\n      if (null === workInProgress.stateNode) {\n        state = emptyContextObject;\n        _instance = Component.contextType;\n        \"contextType\" in Component &&\n          null !== _instance &&\n          (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) &&\n          !didWarnAboutInvalidateContextType.has(Component) &&\n          (didWarnAboutInvalidateContextType.add(Component),\n          (lane =\n            void 0 === _instance\n              ? \" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.\"\n              : \"object\" !== typeof _instance\n                ? \" However, it is set to a \" + typeof _instance + \".\"\n                : _instance.$$typeof === REACT_CONSUMER_TYPE\n                  ? \" Did you accidentally pass the Context.Consumer instead?\"\n                  : \" However, it is set to an object with keys {\" +\n                    Object.keys(_instance).join(\", \") +\n                    \"}.\"),\n          console.error(\n            \"%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s\",\n            getComponentNameFromType(Component) || \"Component\",\n            lane\n          ));\n        \"object\" === typeof _instance &&\n          null !== _instance &&\n          (state = readContext(_instance));\n        _instance = new Component(nextProps, state);\n        if (workInProgress.mode & 8) {\n          setIsStrictModeForDevtools(!0);\n          try {\n            _instance = new Component(nextProps, state);\n          } finally {\n            setIsStrictModeForDevtools(!1);\n          }\n        }\n        state = workInProgress.memoizedState =\n          null !== _instance.state && void 0 !== _instance.state\n            ? _instance.state\n            : null;\n        _instance.updater = classComponentUpdater;\n        workInProgress.stateNode = _instance;\n        _instance._reactInternals = workInProgress;\n        _instance._reactInternalInstance = fakeInternalInstance;\n        \"function\" === typeof Component.getDerivedStateFromProps &&\n          null === state &&\n          ((state = getComponentNameFromType(Component) || \"Component\"),\n          didWarnAboutUninitializedState.has(state) ||\n            (didWarnAboutUninitializedState.add(state),\n            console.error(\n              \"`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\",\n              state,\n              null === _instance.state ? \"null\" : \"undefined\",\n              state\n            )));\n        if (\n          \"function\" === typeof Component.getDerivedStateFromProps ||\n          \"function\" === typeof _instance.getSnapshotBeforeUpdate\n        ) {\n          var foundWillUpdateName = (lane = state = null);\n          \"function\" === typeof _instance.componentWillMount &&\n          !0 !== _instance.componentWillMount.__suppressDeprecationWarning\n            ? (state = \"componentWillMount\")\n            : \"function\" === typeof _instance.UNSAFE_componentWillMount &&\n              (state = \"UNSAFE_componentWillMount\");\n          \"function\" === typeof _instance.componentWillReceiveProps &&\n          !0 !==\n            _instance.componentWillReceiveProps.__suppressDeprecationWarning\n            ? (lane = \"componentWillReceiveProps\")\n            : \"function\" ===\n                typeof _instance.UNSAFE_componentWillReceiveProps &&\n              (lane = \"UNSAFE_componentWillReceiveProps\");\n          \"function\" === typeof _instance.componentWillUpdate &&\n          !0 !== _instance.componentWillUpdate.__suppressDeprecationWarning\n            ? (foundWillUpdateName = \"componentWillUpdate\")\n            : \"function\" === typeof _instance.UNSAFE_componentWillUpdate &&\n              (foundWillUpdateName = \"UNSAFE_componentWillUpdate\");\n          if (null !== state || null !== lane || null !== foundWillUpdateName) {\n            _instance = getComponentNameFromType(Component) || \"Component\";\n            var newApiName =\n              \"function\" === typeof Component.getDerivedStateFromProps\n                ? \"getDerivedStateFromProps()\"\n                : \"getSnapshotBeforeUpdate()\";\n            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) ||\n              (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance),\n              console.error(\n                \"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\nhttps://react.dev/link/unsafe-component-lifecycles\",\n                _instance,\n                newApiName,\n                null !== state ? \"\\n  \" + state : \"\",\n                null !== lane ? \"\\n  \" + lane : \"\",\n                null !== foundWillUpdateName ? \"\\n  \" + foundWillUpdateName : \"\"\n              ));\n          }\n        }\n        _instance = workInProgress.stateNode;\n        state = getComponentNameFromType(Component) || \"Component\";\n        _instance.render ||\n          (Component.prototype &&\n          \"function\" === typeof Component.prototype.render\n            ? console.error(\n                \"No `render` method found on the %s instance: did you accidentally return an object from the constructor?\",\n                state\n              )\n            : console.error(\n                \"No `render` method found on the %s instance: you may have forgotten to define `render`.\",\n                state\n              ));\n        !_instance.getInitialState ||\n          _instance.getInitialState.isReactClassApproved ||\n          _instance.state ||\n          console.error(\n            \"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\",\n            state\n          );\n        _instance.getDefaultProps &&\n          !_instance.getDefaultProps.isReactClassApproved &&\n          console.error(\n            \"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.\",\n            state\n          );\n        _instance.contextType &&\n          console.error(\n            \"contextType was defined as an instance property on %s. Use a static property to define contextType instead.\",\n            state\n          );\n        Component.childContextTypes &&\n          !didWarnAboutChildContextTypes.has(Component) &&\n          (didWarnAboutChildContextTypes.add(Component),\n          console.error(\n            \"%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)\",\n            state\n          ));\n        Component.contextTypes &&\n          !didWarnAboutContextTypes$1.has(Component) &&\n          (didWarnAboutContextTypes$1.add(Component),\n          console.error(\n            \"%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)\",\n            state\n          ));\n        \"function\" === typeof _instance.componentShouldUpdate &&\n          console.error(\n            \"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.\",\n            state\n          );\n        Component.prototype &&\n          Component.prototype.isPureReactComponent &&\n          \"undefined\" !== typeof _instance.shouldComponentUpdate &&\n          console.error(\n            \"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.\",\n            getComponentNameFromType(Component) || \"A pure component\"\n          );\n        \"function\" === typeof _instance.componentDidUnmount &&\n          console.error(\n            \"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?\",\n            state\n          );\n        \"function\" === typeof _instance.componentDidReceiveProps &&\n          console.error(\n            \"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().\",\n            state\n          );\n        \"function\" === typeof _instance.componentWillRecieveProps &&\n          console.error(\n            \"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\",\n            state\n          );\n        \"function\" === typeof _instance.UNSAFE_componentWillRecieveProps &&\n          console.error(\n            \"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\",\n            state\n          );\n        lane = _instance.props !== nextProps;\n        void 0 !== _instance.props &&\n          lane &&\n          console.error(\n            \"When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.\",\n            state\n          );\n        _instance.defaultProps &&\n          console.error(\n            \"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.\",\n            state,\n            state\n          );\n        \"function\" !== typeof _instance.getSnapshotBeforeUpdate ||\n          \"function\" === typeof _instance.componentDidUpdate ||\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) ||\n          (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component),\n          console.error(\n            \"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.\",\n            getComponentNameFromType(Component)\n          ));\n        \"function\" === typeof _instance.getDerivedStateFromProps &&\n          console.error(\n            \"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.\",\n            state\n          );\n        \"function\" === typeof _instance.getDerivedStateFromError &&\n          console.error(\n            \"%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.\",\n            state\n          );\n        \"function\" === typeof Component.getSnapshotBeforeUpdate &&\n          console.error(\n            \"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.\",\n            state\n          );\n        (lane = _instance.state) &&\n          (\"object\" !== typeof lane || isArrayImpl(lane)) &&\n          console.error(\"%s.state: must be set to an object or null\", state);\n        \"function\" === typeof _instance.getChildContext &&\n          \"object\" !== typeof Component.childContextTypes &&\n          console.error(\n            \"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().\",\n            state\n          );\n        _instance = workInProgress.stateNode;\n        _instance.props = nextProps;\n        _instance.state = workInProgress.memoizedState;\n        _instance.refs = {};\n        initializeUpdateQueue(workInProgress);\n        state = Component.contextType;\n        _instance.context =\n          \"object\" === typeof state && null !== state\n            ? readContext(state)\n            : emptyContextObject;\n        _instance.state === nextProps &&\n          ((state = getComponentNameFromType(Component) || \"Component\"),\n          didWarnAboutDirectlyAssigningPropsToState.has(state) ||\n            (didWarnAboutDirectlyAssigningPropsToState.add(state),\n            console.error(\n              \"%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.\",\n              state\n            )));\n        workInProgress.mode & 8 &&\n          ReactStrictModeWarnings.recordLegacyContextWarning(\n            workInProgress,\n            _instance\n          );\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n          workInProgress,\n          _instance\n        );\n        _instance.state = workInProgress.memoizedState;\n        state = Component.getDerivedStateFromProps;\n        \"function\" === typeof state &&\n          (applyDerivedStateFromProps(\n            workInProgress,\n            Component,\n            state,\n            nextProps\n          ),\n          (_instance.state = workInProgress.memoizedState));\n        \"function\" === typeof Component.getDerivedStateFromProps ||\n          \"function\" === typeof _instance.getSnapshotBeforeUpdate ||\n          (\"function\" !== typeof _instance.UNSAFE_componentWillMount &&\n            \"function\" !== typeof _instance.componentWillMount) ||\n          ((state = _instance.state),\n          \"function\" === typeof _instance.componentWillMount &&\n            _instance.componentWillMount(),\n          \"function\" === typeof _instance.UNSAFE_componentWillMount &&\n            _instance.UNSAFE_componentWillMount(),\n          state !== _instance.state &&\n            (console.error(\n              \"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.\",\n              getComponentNameFromFiber(workInProgress) || \"Component\"\n            ),\n            classComponentUpdater.enqueueReplaceState(\n              _instance,\n              _instance.state,\n              null\n            )),\n          processUpdateQueue(workInProgress, nextProps, _instance, renderLanes),\n          suspendIfUpdateReadFromEntangledAsyncAction(),\n          (_instance.state = workInProgress.memoizedState));\n        \"function\" === typeof _instance.componentDidMount &&\n          (workInProgress.flags |= 4194308);\n        (workInProgress.mode & 16) !== NoMode &&\n          (workInProgress.flags |= 67108864);\n        _instance = !0;\n      } else if (null === current$jscomp$0) {\n        _instance = workInProgress.stateNode;\n        var unresolvedOldProps = workInProgress.memoizedProps;\n        lane = resolveClassComponentProps(Component, unresolvedOldProps);\n        _instance.props = lane;\n        var oldContext = _instance.context;\n        foundWillUpdateName = Component.contextType;\n        state = emptyContextObject;\n        \"object\" === typeof foundWillUpdateName &&\n          null !== foundWillUpdateName &&\n          (state = readContext(foundWillUpdateName));\n        newApiName = Component.getDerivedStateFromProps;\n        foundWillUpdateName =\n          \"function\" === typeof newApiName ||\n          \"function\" === typeof _instance.getSnapshotBeforeUpdate;\n        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;\n        foundWillUpdateName ||\n          (\"function\" !== typeof _instance.UNSAFE_componentWillReceiveProps &&\n            \"function\" !== typeof _instance.componentWillReceiveProps) ||\n          ((unresolvedOldProps || oldContext !== state) &&\n            callComponentWillReceiveProps(\n              workInProgress,\n              _instance,\n              nextProps,\n              state\n            ));\n        hasForceUpdate = !1;\n        var oldState = workInProgress.memoizedState;\n        _instance.state = oldState;\n        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        oldContext = workInProgress.memoizedState;\n        unresolvedOldProps || oldState !== oldContext || hasForceUpdate\n          ? (\"function\" === typeof newApiName &&\n              (applyDerivedStateFromProps(\n                workInProgress,\n                Component,\n                newApiName,\n                nextProps\n              ),\n              (oldContext = workInProgress.memoizedState)),\n            (lane =\n              hasForceUpdate ||\n              checkShouldComponentUpdate(\n                workInProgress,\n                Component,\n                lane,\n                nextProps,\n                oldState,\n                oldContext,\n                state\n              ))\n              ? (foundWillUpdateName ||\n                  (\"function\" !== typeof _instance.UNSAFE_componentWillMount &&\n                    \"function\" !== typeof _instance.componentWillMount) ||\n                  (\"function\" === typeof _instance.componentWillMount &&\n                    _instance.componentWillMount(),\n                  \"function\" === typeof _instance.UNSAFE_componentWillMount &&\n                    _instance.UNSAFE_componentWillMount()),\n                \"function\" === typeof _instance.componentDidMount &&\n                  (workInProgress.flags |= 4194308),\n                (workInProgress.mode & 16) !== NoMode &&\n                  (workInProgress.flags |= 67108864))\n              : (\"function\" === typeof _instance.componentDidMount &&\n                  (workInProgress.flags |= 4194308),\n                (workInProgress.mode & 16) !== NoMode &&\n                  (workInProgress.flags |= 67108864),\n                (workInProgress.memoizedProps = nextProps),\n                (workInProgress.memoizedState = oldContext)),\n            (_instance.props = nextProps),\n            (_instance.state = oldContext),\n            (_instance.context = state),\n            (_instance = lane))\n          : (\"function\" === typeof _instance.componentDidMount &&\n              (workInProgress.flags |= 4194308),\n            (workInProgress.mode & 16) !== NoMode &&\n              (workInProgress.flags |= 67108864),\n            (_instance = !1));\n      } else {\n        _instance = workInProgress.stateNode;\n        cloneUpdateQueue(current$jscomp$0, workInProgress);\n        state = workInProgress.memoizedProps;\n        foundWillUpdateName = resolveClassComponentProps(Component, state);\n        _instance.props = foundWillUpdateName;\n        newApiName = workInProgress.pendingProps;\n        oldState = _instance.context;\n        oldContext = Component.contextType;\n        lane = emptyContextObject;\n        \"object\" === typeof oldContext &&\n          null !== oldContext &&\n          (lane = readContext(oldContext));\n        unresolvedOldProps = Component.getDerivedStateFromProps;\n        (oldContext =\n          \"function\" === typeof unresolvedOldProps ||\n          \"function\" === typeof _instance.getSnapshotBeforeUpdate) ||\n          (\"function\" !== typeof _instance.UNSAFE_componentWillReceiveProps &&\n            \"function\" !== typeof _instance.componentWillReceiveProps) ||\n          ((state !== newApiName || oldState !== lane) &&\n            callComponentWillReceiveProps(\n              workInProgress,\n              _instance,\n              nextProps,\n              lane\n            ));\n        hasForceUpdate = !1;\n        oldState = workInProgress.memoizedState;\n        _instance.state = oldState;\n        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        var newState = workInProgress.memoizedState;\n        state !== newApiName ||\n        oldState !== newState ||\n        hasForceUpdate ||\n        (null !== current$jscomp$0 &&\n          null !== current$jscomp$0.dependencies &&\n          checkIfContextChanged(current$jscomp$0.dependencies))\n          ? (\"function\" === typeof unresolvedOldProps &&\n              (applyDerivedStateFromProps(\n                workInProgress,\n                Component,\n                unresolvedOldProps,\n                nextProps\n              ),\n              (newState = workInProgress.memoizedState)),\n            (foundWillUpdateName =\n              hasForceUpdate ||\n              checkShouldComponentUpdate(\n                workInProgress,\n                Component,\n                foundWillUpdateName,\n                nextProps,\n                oldState,\n                newState,\n                lane\n              ) ||\n              (null !== current$jscomp$0 &&\n                null !== current$jscomp$0.dependencies &&\n                checkIfContextChanged(current$jscomp$0.dependencies)))\n              ? (oldContext ||\n                  (\"function\" !== typeof _instance.UNSAFE_componentWillUpdate &&\n                    \"function\" !== typeof _instance.componentWillUpdate) ||\n                  (\"function\" === typeof _instance.componentWillUpdate &&\n                    _instance.componentWillUpdate(nextProps, newState, lane),\n                  \"function\" === typeof _instance.UNSAFE_componentWillUpdate &&\n                    _instance.UNSAFE_componentWillUpdate(\n                      nextProps,\n                      newState,\n                      lane\n                    )),\n                \"function\" === typeof _instance.componentDidUpdate &&\n                  (workInProgress.flags |= 4),\n                \"function\" === typeof _instance.getSnapshotBeforeUpdate &&\n                  (workInProgress.flags |= 1024))\n              : (\"function\" !== typeof _instance.componentDidUpdate ||\n                  (state === current$jscomp$0.memoizedProps &&\n                    oldState === current$jscomp$0.memoizedState) ||\n                  (workInProgress.flags |= 4),\n                \"function\" !== typeof _instance.getSnapshotBeforeUpdate ||\n                  (state === current$jscomp$0.memoizedProps &&\n                    oldState === current$jscomp$0.memoizedState) ||\n                  (workInProgress.flags |= 1024),\n                (workInProgress.memoizedProps = nextProps),\n                (workInProgress.memoizedState = newState)),\n            (_instance.props = nextProps),\n            (_instance.state = newState),\n            (_instance.context = lane),\n            (_instance = foundWillUpdateName))\n          : (\"function\" !== typeof _instance.componentDidUpdate ||\n              (state === current$jscomp$0.memoizedProps &&\n                oldState === current$jscomp$0.memoizedState) ||\n              (workInProgress.flags |= 4),\n            \"function\" !== typeof _instance.getSnapshotBeforeUpdate ||\n              (state === current$jscomp$0.memoizedProps &&\n                oldState === current$jscomp$0.memoizedState) ||\n              (workInProgress.flags |= 1024),\n            (_instance = !1));\n      }\n      lane = _instance;\n      markRef(current$jscomp$0, workInProgress);\n      state = 0 !== (workInProgress.flags & 128);\n      if (lane || state) {\n        lane = workInProgress.stateNode;\n        ReactSharedInternals.getCurrentStack =\n          null === workInProgress ? null : getCurrentFiberStackInDev;\n        isRendering = !1;\n        current = workInProgress;\n        if (state && \"function\" !== typeof Component.getDerivedStateFromError)\n          (Component = null), (profilerStartTime = -1);\n        else {\n          markComponentRenderStarted(workInProgress);\n          Component = callRenderInDEV(lane);\n          if (workInProgress.mode & 8) {\n            setIsStrictModeForDevtools(!0);\n            try {\n              callRenderInDEV(lane);\n            } finally {\n              setIsStrictModeForDevtools(!1);\n            }\n          }\n          markComponentRenderStopped();\n        }\n        workInProgress.flags |= 1;\n        null !== current$jscomp$0 && state\n          ? ((workInProgress.child = reconcileChildFibers(\n              workInProgress,\n              current$jscomp$0.child,\n              null,\n              renderLanes\n            )),\n            (workInProgress.child = reconcileChildFibers(\n              workInProgress,\n              null,\n              Component,\n              renderLanes\n            )))\n          : reconcileChildren(\n              current$jscomp$0,\n              workInProgress,\n              Component,\n              renderLanes\n            );\n        workInProgress.memoizedState = lane.state;\n        current$jscomp$0 = workInProgress.child;\n      } else\n        current$jscomp$0 = bailoutOnAlreadyFinishedWork(\n          current$jscomp$0,\n          workInProgress,\n          renderLanes\n        );\n      renderLanes = workInProgress.stateNode;\n      _instance &&\n        renderLanes.props !== nextProps &&\n        (didWarnAboutReassigningProps ||\n          console.error(\n            \"It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.\",\n            getComponentNameFromFiber(workInProgress) || \"a component\"\n          ),\n        (didWarnAboutReassigningProps = !0));\n      return current$jscomp$0;\n    }\n    function mountHostRootWithoutHydrating(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      resetHydrationState();\n      workInProgress.flags |= 256;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      Component &&\n        Component.childContextTypes &&\n        console.error(\n          \"childContextTypes cannot be defined on a function component.\\n  %s.childContextTypes = ...\",\n          Component.displayName || Component.name || \"Component\"\n        );\n      \"function\" === typeof Component.getDerivedStateFromProps &&\n        ((workInProgress = getComponentNameFromType(Component) || \"Unknown\"),\n        didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] ||\n          (console.error(\n            \"%s: Function components do not support getDerivedStateFromProps.\",\n            workInProgress\n          ),\n          (didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] =\n            !0)));\n      \"object\" === typeof Component.contextType &&\n        null !== Component.contextType &&\n        ((Component = getComponentNameFromType(Component) || \"Unknown\"),\n        didWarnAboutContextTypeOnFunctionComponent[Component] ||\n          (console.error(\n            \"%s: Function components do not support contextType.\",\n            Component\n          ),\n          (didWarnAboutContextTypeOnFunctionComponent[Component] = !0)));\n    }\n    function mountSuspenseOffscreenState(renderLanes) {\n      return { baseLanes: renderLanes, cachePool: getSuspendedCache() };\n    }\n    function getRemainingWorkInPrimaryTree(\n      current,\n      primaryTreeDidDefer,\n      renderLanes\n    ) {\n      current = null !== current ? current.childLanes & ~renderLanes : 0;\n      primaryTreeDidDefer && (current |= workInProgressDeferredLane);\n      return current;\n    }\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);\n      var showFallback = !1,\n        didSuspend = 0 !== (workInProgress.flags & 128),\n        JSCompiler_temp;\n      (JSCompiler_temp = didSuspend) ||\n        (JSCompiler_temp =\n          null !== current && null === current.memoizedState\n            ? !1\n            : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));\n      JSCompiler_temp && ((showFallback = !0), (workInProgress.flags &= -129));\n      JSCompiler_temp = 0 !== (workInProgress.flags & 32);\n      workInProgress.flags &= -33;\n      if (null === current) {\n        if (isHydrating) {\n          showFallback\n            ? pushPrimaryTreeSuspenseHandler(workInProgress)\n            : reuseSuspenseHandlerOnStack(workInProgress);\n          if (isHydrating) {\n            var nextInstance = nextHydratableInstance,\n              JSCompiler_temp$jscomp$0;\n            (JSCompiler_temp$jscomp$0 = !nextInstance) ||\n              ((JSCompiler_temp$jscomp$0 = canHydrateSuspenseInstance(\n                nextInstance,\n                rootOrSingletonContext\n              )),\n              null !== JSCompiler_temp$jscomp$0\n                ? (warnIfNotHydrating(),\n                  (workInProgress.memoizedState = {\n                    dehydrated: JSCompiler_temp$jscomp$0,\n                    treeContext:\n                      null !== treeContextProvider\n                        ? { id: treeContextId, overflow: treeContextOverflow }\n                        : null,\n                    retryLane: 536870912\n                  }),\n                  (didSuspend = createFiber(18, null, null, NoMode)),\n                  (didSuspend.stateNode = JSCompiler_temp$jscomp$0),\n                  (didSuspend.return = workInProgress),\n                  (workInProgress.child = didSuspend),\n                  (hydrationParentFiber = workInProgress),\n                  (nextHydratableInstance = null),\n                  (JSCompiler_temp$jscomp$0 = !0))\n                : (JSCompiler_temp$jscomp$0 = !1),\n              (JSCompiler_temp$jscomp$0 = !JSCompiler_temp$jscomp$0));\n            JSCompiler_temp$jscomp$0 &&\n              (warnNonHydratedInstance(workInProgress, nextInstance),\n              throwOnHydrationMismatch(workInProgress));\n          }\n          nextInstance = workInProgress.memoizedState;\n          if (\n            null !== nextInstance &&\n            ((nextInstance = nextInstance.dehydrated), null !== nextInstance)\n          )\n            return (\n              isSuspenseInstanceFallback(nextInstance)\n                ? (workInProgress.lanes = 16)\n                : (workInProgress.lanes = 536870912),\n              null\n            );\n          popSuspenseHandler(workInProgress);\n        }\n        nextInstance = nextProps.children;\n        nextProps = nextProps.fallback;\n        if (showFallback)\n          return (\n            reuseSuspenseHandlerOnStack(workInProgress),\n            (showFallback = workInProgress.mode),\n            (nextInstance = mountWorkInProgressOffscreenFiber(\n              { mode: \"hidden\", children: nextInstance },\n              showFallback\n            )),\n            (nextProps = createFiberFromFragment(\n              nextProps,\n              showFallback,\n              renderLanes,\n              null\n            )),\n            (nextInstance.return = workInProgress),\n            (nextProps.return = workInProgress),\n            (nextInstance.sibling = nextProps),\n            (workInProgress.child = nextInstance),\n            (showFallback = workInProgress.child),\n            (showFallback.memoizedState =\n              mountSuspenseOffscreenState(renderLanes)),\n            (showFallback.childLanes = getRemainingWorkInPrimaryTree(\n              current,\n              JSCompiler_temp,\n              renderLanes\n            )),\n            (workInProgress.memoizedState = SUSPENDED_MARKER),\n            nextProps\n          );\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n        return mountSuspensePrimaryChildren(workInProgress, nextInstance);\n      }\n      JSCompiler_temp$jscomp$0 = current.memoizedState;\n      if (\n        null !== JSCompiler_temp$jscomp$0 &&\n        ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),\n        null !== nextInstance)\n      ) {\n        if (didSuspend)\n          workInProgress.flags & 256\n            ? (pushPrimaryTreeSuspenseHandler(workInProgress),\n              (workInProgress.flags &= -257),\n              (workInProgress = retrySuspenseComponentWithoutHydrating(\n                current,\n                workInProgress,\n                renderLanes\n              )))\n            : null !== workInProgress.memoizedState\n              ? (reuseSuspenseHandlerOnStack(workInProgress),\n                (workInProgress.child = current.child),\n                (workInProgress.flags |= 128),\n                (workInProgress = null))\n              : (reuseSuspenseHandlerOnStack(workInProgress),\n                (showFallback = nextProps.fallback),\n                (nextInstance = workInProgress.mode),\n                (nextProps = mountWorkInProgressOffscreenFiber(\n                  { mode: \"visible\", children: nextProps.children },\n                  nextInstance\n                )),\n                (showFallback = createFiberFromFragment(\n                  showFallback,\n                  nextInstance,\n                  renderLanes,\n                  null\n                )),\n                (showFallback.flags |= 2),\n                (nextProps.return = workInProgress),\n                (showFallback.return = workInProgress),\n                (nextProps.sibling = showFallback),\n                (workInProgress.child = nextProps),\n                reconcileChildFibers(\n                  workInProgress,\n                  current.child,\n                  null,\n                  renderLanes\n                ),\n                (nextProps = workInProgress.child),\n                (nextProps.memoizedState =\n                  mountSuspenseOffscreenState(renderLanes)),\n                (nextProps.childLanes = getRemainingWorkInPrimaryTree(\n                  current,\n                  JSCompiler_temp,\n                  renderLanes\n                )),\n                (workInProgress.memoizedState = SUSPENDED_MARKER),\n                (workInProgress = showFallback));\n        else if (\n          (pushPrimaryTreeSuspenseHandler(workInProgress),\n          isHydrating &&\n            console.error(\n              \"We should not be hydrating here. This is a bug in React. Please file a bug.\"\n            ),\n          isSuspenseInstanceFallback(nextInstance))\n        )\n          (nextInstance =\n            getSuspenseInstanceFallbackErrorDetails(nextInstance)),\n            (JSCompiler_temp = nextInstance.digest),\n            (showFallback = nextInstance.message),\n            (nextProps = nextInstance.stack),\n            (nextInstance = nextInstance.componentStack),\n            (showFallback = showFallback\n              ? Error(showFallback)\n              : Error(\n                  \"The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.\"\n                )),\n            (showFallback.stack = nextProps || \"\"),\n            (showFallback.digest = JSCompiler_temp),\n            (JSCompiler_temp = void 0 === nextInstance ? null : nextInstance),\n            (nextProps = {\n              value: showFallback,\n              source: null,\n              stack: JSCompiler_temp\n            }),\n            \"string\" === typeof JSCompiler_temp &&\n              CapturedStacks.set(showFallback, nextProps),\n            queueHydrationError(nextProps),\n            (workInProgress = retrySuspenseComponentWithoutHydrating(\n              current,\n              workInProgress,\n              renderLanes\n            ));\n        else if (\n          (didReceiveUpdate ||\n            propagateParentContextChanges(\n              current,\n              workInProgress,\n              renderLanes,\n              !1\n            ),\n          (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),\n          didReceiveUpdate || JSCompiler_temp)\n        ) {\n          JSCompiler_temp = workInProgressRoot;\n          if (null !== JSCompiler_temp) {\n            nextProps = renderLanes & -renderLanes;\n            if (0 !== (nextProps & 42)) nextProps = 1;\n            else\n              switch (nextProps) {\n                case 2:\n                  nextProps = 1;\n                  break;\n                case 8:\n                  nextProps = 4;\n                  break;\n                case 32:\n                  nextProps = 16;\n                  break;\n                case 128:\n                case 256:\n                case 512:\n                case 1024:\n                case 2048:\n                case 4096:\n                case 8192:\n                case 16384:\n                case 32768:\n                case 65536:\n                case 131072:\n                case 262144:\n                case 524288:\n                case 1048576:\n                case 2097152:\n                case 4194304:\n                case 8388608:\n                case 16777216:\n                case 33554432:\n                  nextProps = 64;\n                  break;\n                case 268435456:\n                  nextProps = 134217728;\n                  break;\n                default:\n                  nextProps = 0;\n              }\n            nextProps =\n              0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))\n                ? 0\n                : nextProps;\n            if (\n              0 !== nextProps &&\n              nextProps !== JSCompiler_temp$jscomp$0.retryLane\n            )\n              throw (\n                ((JSCompiler_temp$jscomp$0.retryLane = nextProps),\n                enqueueConcurrentRenderForLane(current, nextProps),\n                scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),\n                SelectiveHydrationException)\n              );\n          }\n          isSuspenseInstancePending(nextInstance) ||\n            renderDidSuspendDelayIfPossible();\n          workInProgress = retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        } else\n          isSuspenseInstancePending(nextInstance)\n            ? ((workInProgress.flags |= 128),\n              (workInProgress.child = current.child),\n              (workInProgress = retryDehydratedSuspenseBoundary.bind(\n                null,\n                current\n              )),\n              registerSuspenseInstanceRetry(nextInstance, workInProgress),\n              (workInProgress = null))\n            : ((current = JSCompiler_temp$jscomp$0.treeContext),\n              supportsHydration &&\n                ((nextHydratableInstance =\n                  getFirstHydratableChildWithinSuspenseInstance(nextInstance)),\n                (hydrationParentFiber = workInProgress),\n                (isHydrating = !0),\n                (hydrationErrors = null),\n                (didSuspendOrErrorDEV = !1),\n                (hydrationDiffRootDEV = null),\n                (rootOrSingletonContext = !1),\n                null !== current &&\n                  (warnIfNotHydrating(),\n                  (idStack[idStackIndex++] = treeContextId),\n                  (idStack[idStackIndex++] = treeContextOverflow),\n                  (idStack[idStackIndex++] = treeContextProvider),\n                  (treeContextId = current.id),\n                  (treeContextOverflow = current.overflow),\n                  (treeContextProvider = workInProgress))),\n              (workInProgress = mountSuspensePrimaryChildren(\n                workInProgress,\n                nextProps.children\n              )),\n              (workInProgress.flags |= 4096));\n        return workInProgress;\n      }\n      if (showFallback)\n        return (\n          reuseSuspenseHandlerOnStack(workInProgress),\n          (showFallback = nextProps.fallback),\n          (nextInstance = workInProgress.mode),\n          (JSCompiler_temp$jscomp$0 = current.child),\n          (didSuspend = JSCompiler_temp$jscomp$0.sibling),\n          (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {\n            mode: \"hidden\",\n            children: nextProps.children\n          })),\n          (nextProps.subtreeFlags =\n            JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),\n          null !== didSuspend\n            ? (showFallback = createWorkInProgress(didSuspend, showFallback))\n            : ((showFallback = createFiberFromFragment(\n                showFallback,\n                nextInstance,\n                renderLanes,\n                null\n              )),\n              (showFallback.flags |= 2)),\n          (showFallback.return = workInProgress),\n          (nextProps.return = workInProgress),\n          (nextProps.sibling = showFallback),\n          (workInProgress.child = nextProps),\n          (nextProps = showFallback),\n          (showFallback = workInProgress.child),\n          (nextInstance = current.child.memoizedState),\n          null === nextInstance\n            ? (nextInstance = mountSuspenseOffscreenState(renderLanes))\n            : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),\n              null !== JSCompiler_temp$jscomp$0\n                ? ((didSuspend = isPrimaryRenderer\n                    ? CacheContext._currentValue\n                    : CacheContext._currentValue2),\n                  (JSCompiler_temp$jscomp$0 =\n                    JSCompiler_temp$jscomp$0.parent !== didSuspend\n                      ? { parent: didSuspend, pool: didSuspend }\n                      : JSCompiler_temp$jscomp$0))\n                : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),\n              (nextInstance = {\n                baseLanes: nextInstance.baseLanes | renderLanes,\n                cachePool: JSCompiler_temp$jscomp$0\n              })),\n          (showFallback.memoizedState = nextInstance),\n          (showFallback.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            JSCompiler_temp,\n            renderLanes\n          )),\n          (workInProgress.memoizedState = SUSPENDED_MARKER),\n          nextProps\n        );\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      renderLanes = current.child;\n      current = renderLanes.sibling;\n      renderLanes = createWorkInProgress(renderLanes, {\n        mode: \"visible\",\n        children: nextProps.children\n      });\n      renderLanes.return = workInProgress;\n      renderLanes.sibling = null;\n      null !== current &&\n        ((JSCompiler_temp = workInProgress.deletions),\n        null === JSCompiler_temp\n          ? ((workInProgress.deletions = [current]),\n            (workInProgress.flags |= 16))\n          : JSCompiler_temp.push(current));\n      workInProgress.child = renderLanes;\n      workInProgress.memoizedState = null;\n      return renderLanes;\n    }\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {\n      primaryChildren = mountWorkInProgressOffscreenFiber(\n        { mode: \"visible\", children: primaryChildren },\n        workInProgress.mode\n      );\n      primaryChildren.return = workInProgress;\n      return (workInProgress.child = primaryChildren);\n    }\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {\n      return createFiberFromOffscreen(offscreenProps, mode, 0, null);\n    }\n    function retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      current = mountSuspensePrimaryChildren(\n        workInProgress,\n        workInProgress.pendingProps.children\n      );\n      current.flags |= 2;\n      workInProgress.memoizedState = null;\n      return current;\n    }\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes |= renderLanes;\n      var alternate = fiber.alternate;\n      null !== alternate && (alternate.lanes |= renderLanes);\n      scheduleContextWorkOnParentPath(\n        fiber.return,\n        renderLanes,\n        propagationRoot\n      );\n    }\n    function validateSuspenseListNestedChild(childSlot, index) {\n      var isAnArray = isArrayImpl(childSlot);\n      childSlot = !isAnArray && \"function\" === typeof getIteratorFn(childSlot);\n      return isAnArray || childSlot\n        ? ((isAnArray = isAnArray ? \"array\" : \"iterable\"),\n          console.error(\n            \"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>\",\n            isAnArray,\n            index,\n            isAnArray\n          ),\n          !1)\n        : !0;\n    }\n    function initSuspenseListRenderState(\n      workInProgress,\n      isBackwards,\n      tail,\n      lastContentRow,\n      tailMode\n    ) {\n      var renderState = workInProgress.memoizedState;\n      null === renderState\n        ? (workInProgress.memoizedState = {\n            isBackwards: isBackwards,\n            rendering: null,\n            renderingStartTime: 0,\n            last: lastContentRow,\n            tail: tail,\n            tailMode: tailMode\n          })\n        : ((renderState.isBackwards = isBackwards),\n          (renderState.rendering = null),\n          (renderState.renderingStartTime = 0),\n          (renderState.last = lastContentRow),\n          (renderState.tail = tail),\n          (renderState.tailMode = tailMode));\n    }\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps,\n        revealOrder = nextProps.revealOrder,\n        tailMode = nextProps.tail;\n      nextProps = nextProps.children;\n      if (\n        void 0 !== revealOrder &&\n        \"forwards\" !== revealOrder &&\n        \"backwards\" !== revealOrder &&\n        \"together\" !== revealOrder &&\n        !didWarnAboutRevealOrder[revealOrder]\n      )\n        if (\n          ((didWarnAboutRevealOrder[revealOrder] = !0),\n          \"string\" === typeof revealOrder)\n        )\n          switch (revealOrder.toLowerCase()) {\n            case \"together\":\n            case \"forwards\":\n            case \"backwards\":\n              console.error(\n                '\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.',\n                revealOrder,\n                revealOrder.toLowerCase()\n              );\n              break;\n            case \"forward\":\n            case \"backward\":\n              console.error(\n                '\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n                revealOrder,\n                revealOrder.toLowerCase()\n              );\n              break;\n            default:\n              console.error(\n                '\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?',\n                revealOrder\n              );\n          }\n        else\n          console.error(\n            '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?',\n            revealOrder\n          );\n      void 0 === tailMode ||\n        didWarnAboutTailOptions[tailMode] ||\n        (\"collapsed\" !== tailMode && \"hidden\" !== tailMode\n          ? ((didWarnAboutTailOptions[tailMode] = !0),\n            console.error(\n              '\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?',\n              tailMode\n            ))\n          : \"forwards\" !== revealOrder &&\n            \"backwards\" !== revealOrder &&\n            ((didWarnAboutTailOptions[tailMode] = !0),\n            console.error(\n              '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?',\n              tailMode\n            )));\n      a: if (\n        (\"forwards\" === revealOrder || \"backwards\" === revealOrder) &&\n        void 0 !== nextProps &&\n        null !== nextProps &&\n        !1 !== nextProps\n      )\n        if (isArrayImpl(nextProps))\n          for (var i = 0; i < nextProps.length; i++) {\n            if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;\n          }\n        else if (((i = getIteratorFn(nextProps)), \"function\" === typeof i)) {\n          if ((i = i.call(nextProps)))\n            for (var step = i.next(), _i = 0; !step.done; step = i.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) break a;\n              _i++;\n            }\n        } else\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',\n            revealOrder\n          );\n      reconcileChildren(current, workInProgress, nextProps, renderLanes);\n      nextProps = suspenseStackCursor.current;\n      if (0 !== (nextProps & ForceSuspenseFallback))\n        (nextProps =\n          (nextProps & SubtreeSuspenseContextMask) | ForceSuspenseFallback),\n          (workInProgress.flags |= 128);\n      else {\n        if (null !== current && 0 !== (current.flags & 128))\n          a: for (current = workInProgress.child; null !== current; ) {\n            if (13 === current.tag)\n              null !== current.memoizedState &&\n                scheduleSuspenseWorkOnFiber(\n                  current,\n                  renderLanes,\n                  workInProgress\n                );\n            else if (19 === current.tag)\n              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);\n            else if (null !== current.child) {\n              current.child.return = current;\n              current = current.child;\n              continue;\n            }\n            if (current === workInProgress) break a;\n            for (; null === current.sibling; ) {\n              if (null === current.return || current.return === workInProgress)\n                break a;\n              current = current.return;\n            }\n            current.sibling.return = current.return;\n            current = current.sibling;\n          }\n        nextProps &= SubtreeSuspenseContextMask;\n      }\n      push(suspenseStackCursor, nextProps, workInProgress);\n      switch (revealOrder) {\n        case \"forwards\":\n          renderLanes = workInProgress.child;\n          for (revealOrder = null; null !== renderLanes; )\n            (current = renderLanes.alternate),\n              null !== current &&\n                null === findFirstSuspended(current) &&\n                (revealOrder = renderLanes),\n              (renderLanes = renderLanes.sibling);\n          renderLanes = revealOrder;\n          null === renderLanes\n            ? ((revealOrder = workInProgress.child),\n              (workInProgress.child = null))\n            : ((revealOrder = renderLanes.sibling),\n              (renderLanes.sibling = null));\n          initSuspenseListRenderState(\n            workInProgress,\n            !1,\n            revealOrder,\n            renderLanes,\n            tailMode\n          );\n          break;\n        case \"backwards\":\n          renderLanes = null;\n          revealOrder = workInProgress.child;\n          for (workInProgress.child = null; null !== revealOrder; ) {\n            current = revealOrder.alternate;\n            if (null !== current && null === findFirstSuspended(current)) {\n              workInProgress.child = revealOrder;\n              break;\n            }\n            current = revealOrder.sibling;\n            revealOrder.sibling = renderLanes;\n            renderLanes = revealOrder;\n            revealOrder = current;\n          }\n          initSuspenseListRenderState(\n            workInProgress,\n            !0,\n            renderLanes,\n            null,\n            tailMode\n          );\n          break;\n        case \"together\":\n          initSuspenseListRenderState(workInProgress, !1, null, null, void 0);\n          break;\n        default:\n          workInProgress.memoizedState = null;\n      }\n      return workInProgress.child;\n    }\n    function bailoutOnAlreadyFinishedWork(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      null !== current && (workInProgress.dependencies = current.dependencies);\n      profilerStartTime = -1;\n      workInProgressRootSkippedLanes |= workInProgress.lanes;\n      if (0 === (renderLanes & workInProgress.childLanes))\n        if (null !== current) {\n          if (\n            (propagateParentContextChanges(\n              current,\n              workInProgress,\n              renderLanes,\n              !1\n            ),\n            0 === (renderLanes & workInProgress.childLanes))\n          )\n            return null;\n        } else return null;\n      if (null !== current && workInProgress.child !== current.child)\n        throw Error(\"Resuming work not yet implemented.\");\n      if (null !== workInProgress.child) {\n        current = workInProgress.child;\n        renderLanes = createWorkInProgress(current, current.pendingProps);\n        workInProgress.child = renderLanes;\n        for (renderLanes.return = workInProgress; null !== current.sibling; )\n          (current = current.sibling),\n            (renderLanes = renderLanes.sibling =\n              createWorkInProgress(current, current.pendingProps)),\n            (renderLanes.return = workInProgress);\n        renderLanes.sibling = null;\n      }\n      return workInProgress.child;\n    }\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      if (0 !== (current.lanes & renderLanes)) return !0;\n      current = current.dependencies;\n      return null !== current && checkIfContextChanged(current) ? !0 : !1;\n    }\n    function attemptEarlyBailoutIfNoScheduledUpdate(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      switch (workInProgress.tag) {\n        case 3:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo\n          );\n          pushProvider(\n            workInProgress,\n            CacheContext,\n            current.memoizedState.cache\n          );\n          resetHydrationState();\n          break;\n        case 27:\n        case 5:\n          pushHostContext(workInProgress);\n          break;\n        case 4:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo\n          );\n          break;\n        case 10:\n          pushProvider(\n            workInProgress,\n            workInProgress.type,\n            workInProgress.memoizedProps.value\n          );\n          break;\n        case 12:\n          0 !== (renderLanes & workInProgress.childLanes) &&\n            (workInProgress.flags |= 4);\n          workInProgress.flags |= 2048;\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = -0;\n          stateNode.passiveEffectDuration = -0;\n          break;\n        case 13:\n          stateNode = workInProgress.memoizedState;\n          if (null !== stateNode) {\n            if (null !== stateNode.dehydrated)\n              return (\n                pushPrimaryTreeSuspenseHandler(workInProgress),\n                (workInProgress.flags |= 128),\n                null\n              );\n            if (0 !== (renderLanes & workInProgress.child.childLanes))\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            pushPrimaryTreeSuspenseHandler(workInProgress);\n            current = bailoutOnAlreadyFinishedWork(\n              current,\n              workInProgress,\n              renderLanes\n            );\n            return null !== current ? current.sibling : null;\n          }\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          break;\n        case 19:\n          var didSuspendBefore = 0 !== (current.flags & 128);\n          stateNode = 0 !== (renderLanes & workInProgress.childLanes);\n          stateNode ||\n            (propagateParentContextChanges(\n              current,\n              workInProgress,\n              renderLanes,\n              !1\n            ),\n            (stateNode = 0 !== (renderLanes & workInProgress.childLanes)));\n          if (didSuspendBefore) {\n            if (stateNode)\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            workInProgress.flags |= 128;\n          }\n          didSuspendBefore = workInProgress.memoizedState;\n          null !== didSuspendBefore &&\n            ((didSuspendBefore.rendering = null),\n            (didSuspendBefore.tail = null),\n            (didSuspendBefore.lastEffect = null));\n          push(\n            suspenseStackCursor,\n            suspenseStackCursor.current,\n            workInProgress\n          );\n          if (stateNode) break;\n          else return null;\n        case 22:\n        case 23:\n          return (\n            (workInProgress.lanes = 0),\n            updateOffscreenComponent(current, workInProgress, renderLanes)\n          );\n        case 24:\n          pushProvider(\n            workInProgress,\n            CacheContext,\n            current.memoizedState.cache\n          );\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    function beginWork(current, workInProgress, renderLanes) {\n      if (workInProgress._debugNeedsRemount && null !== current) {\n        renderLanes = createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes\n        );\n        var returnFiber = workInProgress.return;\n        if (null === returnFiber) throw Error(\"Cannot swap the root fiber.\");\n        current.alternate = null;\n        workInProgress.alternate = null;\n        renderLanes.index = workInProgress.index;\n        renderLanes.sibling = workInProgress.sibling;\n        renderLanes.return = workInProgress.return;\n        renderLanes.ref = workInProgress.ref;\n        renderLanes._debugInfo = workInProgress._debugInfo;\n        if (workInProgress === returnFiber.child)\n          returnFiber.child = renderLanes;\n        else {\n          var prevSibling = returnFiber.child;\n          if (null === prevSibling)\n            throw Error(\"Expected parent to have a child.\");\n          for (; prevSibling.sibling !== workInProgress; )\n            if (((prevSibling = prevSibling.sibling), null === prevSibling))\n              throw Error(\"Expected to find the previous sibling.\");\n          prevSibling.sibling = renderLanes;\n        }\n        workInProgress = returnFiber.deletions;\n        null === workInProgress\n          ? ((returnFiber.deletions = [current]), (returnFiber.flags |= 16))\n          : workInProgress.push(current);\n        renderLanes.flags |= 2;\n        return renderLanes;\n      }\n      if (null !== current)\n        if (\n          current.memoizedProps !== workInProgress.pendingProps ||\n          workInProgress.type !== current.type\n        )\n          didReceiveUpdate = !0;\n        else {\n          if (\n            !checkScheduledUpdateOrContext(current, renderLanes) &&\n            0 === (workInProgress.flags & 128)\n          )\n            return (\n              (didReceiveUpdate = !1),\n              attemptEarlyBailoutIfNoScheduledUpdate(\n                current,\n                workInProgress,\n                renderLanes\n              )\n            );\n          didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;\n        }\n      else {\n        didReceiveUpdate = !1;\n        if ((returnFiber = isHydrating))\n          warnIfNotHydrating(),\n            (returnFiber = 0 !== (workInProgress.flags & 1048576));\n        returnFiber &&\n          ((returnFiber = workInProgress.index),\n          warnIfNotHydrating(),\n          pushTreeId(workInProgress, treeForkCount, returnFiber));\n      }\n      workInProgress.lanes = 0;\n      switch (workInProgress.tag) {\n        case 16:\n          a: if (\n            ((returnFiber = workInProgress.pendingProps),\n            (current = callLazyInitInDEV(workInProgress.elementType)),\n            (workInProgress.type = current),\n            \"function\" === typeof current)\n          )\n            shouldConstruct(current)\n              ? ((returnFiber = resolveClassComponentProps(\n                  current,\n                  returnFiber\n                )),\n                (workInProgress.tag = 1),\n                (workInProgress.type = current =\n                  resolveFunctionForHotReloading(current)),\n                (workInProgress = updateClassComponent(\n                  null,\n                  workInProgress,\n                  current,\n                  returnFiber,\n                  renderLanes\n                )))\n              : ((workInProgress.tag = 0),\n                validateFunctionComponentInDev(workInProgress, current),\n                (workInProgress.type = current =\n                  resolveFunctionForHotReloading(current)),\n                (workInProgress = updateFunctionComponent(\n                  null,\n                  workInProgress,\n                  current,\n                  returnFiber,\n                  renderLanes\n                )));\n          else {\n            if (void 0 !== current && null !== current)\n              if (\n                ((prevSibling = current.$$typeof),\n                prevSibling === REACT_FORWARD_REF_TYPE)\n              ) {\n                workInProgress.tag = 11;\n                workInProgress.type = current =\n                  resolveForwardRefForHotReloading(current);\n                workInProgress = updateForwardRef(\n                  null,\n                  workInProgress,\n                  current,\n                  returnFiber,\n                  renderLanes\n                );\n                break a;\n              } else if (prevSibling === REACT_MEMO_TYPE) {\n                workInProgress.tag = 14;\n                workInProgress = updateMemoComponent(\n                  null,\n                  workInProgress,\n                  current,\n                  returnFiber,\n                  renderLanes\n                );\n                break a;\n              }\n            workInProgress = \"\";\n            null !== current &&\n              \"object\" === typeof current &&\n              current.$$typeof === REACT_LAZY_TYPE &&\n              (workInProgress =\n                \" Did you wrap a component in React.lazy() more than once?\");\n            current = getComponentNameFromType(current) || current;\n            throw Error(\n              \"Element type is invalid. Received a promise that resolves to: \" +\n                current +\n                \". Lazy element type must resolve to a class or function.\" +\n                workInProgress\n            );\n          }\n          return workInProgress;\n        case 0:\n          return updateFunctionComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        case 1:\n          return (\n            (returnFiber = workInProgress.type),\n            (prevSibling = resolveClassComponentProps(\n              returnFiber,\n              workInProgress.pendingProps\n            )),\n            updateClassComponent(\n              current,\n              workInProgress,\n              returnFiber,\n              prevSibling,\n              renderLanes\n            )\n          );\n        case 3:\n          a: {\n            pushHostContainer(\n              workInProgress,\n              workInProgress.stateNode.containerInfo\n            );\n            if (null === current)\n              throw Error(\n                \"Should have a current fiber. This is a bug in React.\"\n              );\n            var nextProps = workInProgress.pendingProps;\n            prevSibling = workInProgress.memoizedState;\n            returnFiber = prevSibling.element;\n            cloneUpdateQueue(current, workInProgress);\n            processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n            var nextState = workInProgress.memoizedState;\n            nextProps = nextState.cache;\n            pushProvider(workInProgress, CacheContext, nextProps);\n            nextProps !== prevSibling.cache &&\n              propagateContextChanges(\n                workInProgress,\n                [CacheContext],\n                renderLanes,\n                !0\n              );\n            suspendIfUpdateReadFromEntangledAsyncAction();\n            nextProps = nextState.element;\n            if (supportsHydration && prevSibling.isDehydrated)\n              if (\n                ((prevSibling = {\n                  element: nextProps,\n                  isDehydrated: !1,\n                  cache: nextState.cache\n                }),\n                (workInProgress.updateQueue.baseState = prevSibling),\n                (workInProgress.memoizedState = prevSibling),\n                workInProgress.flags & 256)\n              ) {\n                workInProgress = mountHostRootWithoutHydrating(\n                  current,\n                  workInProgress,\n                  nextProps,\n                  renderLanes\n                );\n                break a;\n              } else if (nextProps !== returnFiber) {\n                returnFiber = createCapturedValueAtFiber(\n                  Error(\n                    \"This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.\"\n                  ),\n                  workInProgress\n                );\n                queueHydrationError(returnFiber);\n                workInProgress = mountHostRootWithoutHydrating(\n                  current,\n                  workInProgress,\n                  nextProps,\n                  renderLanes\n                );\n                break a;\n              } else\n                for (\n                  supportsHydration &&\n                    ((nextHydratableInstance =\n                      getFirstHydratableChildWithinContainer(\n                        workInProgress.stateNode.containerInfo\n                      )),\n                    (hydrationParentFiber = workInProgress),\n                    (isHydrating = !0),\n                    (hydrationErrors = null),\n                    (didSuspendOrErrorDEV = !1),\n                    (hydrationDiffRootDEV = null),\n                    (rootOrSingletonContext = !0)),\n                    current = mountChildFibers(\n                      workInProgress,\n                      null,\n                      nextProps,\n                      renderLanes\n                    ),\n                    workInProgress.child = current;\n                  current;\n\n                )\n                  (current.flags = (current.flags & -3) | 4096),\n                    (current = current.sibling);\n            else {\n              resetHydrationState();\n              if (nextProps === returnFiber) {\n                workInProgress = bailoutOnAlreadyFinishedWork(\n                  current,\n                  workInProgress,\n                  renderLanes\n                );\n                break a;\n              }\n              reconcileChildren(\n                current,\n                workInProgress,\n                nextProps,\n                renderLanes\n              );\n            }\n            workInProgress = workInProgress.child;\n          }\n          return workInProgress;\n        case 26:\n          if (supportsResources)\n            return (\n              markRef(current, workInProgress),\n              null === current\n                ? (current = getResource(\n                    workInProgress.type,\n                    null,\n                    workInProgress.pendingProps,\n                    null\n                  ))\n                  ? (workInProgress.memoizedState = current)\n                  : isHydrating ||\n                    (workInProgress.stateNode = createHoistableInstance(\n                      workInProgress.type,\n                      workInProgress.pendingProps,\n                      requiredContext(rootInstanceStackCursor.current),\n                      workInProgress\n                    ))\n                : (workInProgress.memoizedState = getResource(\n                    workInProgress.type,\n                    current.memoizedProps,\n                    workInProgress.pendingProps,\n                    current.memoizedState\n                  )),\n              null\n            );\n        case 27:\n          if (supportsSingletons)\n            return (\n              pushHostContext(workInProgress),\n              null === current &&\n                supportsSingletons &&\n                isHydrating &&\n                ((prevSibling = requiredContext(\n                  rootInstanceStackCursor.current\n                )),\n                (returnFiber = getHostContext()),\n                (prevSibling = workInProgress.stateNode =\n                  resolveSingletonInstance(\n                    workInProgress.type,\n                    workInProgress.pendingProps,\n                    prevSibling,\n                    returnFiber,\n                    !1\n                  )),\n                didSuspendOrErrorDEV ||\n                  ((returnFiber = diffHydratedPropsForDevWarnings(\n                    prevSibling,\n                    workInProgress.type,\n                    workInProgress.pendingProps,\n                    returnFiber\n                  )),\n                  null !== returnFiber &&\n                    (buildHydrationDiffNode(workInProgress, 0).serverProps =\n                      returnFiber)),\n                (hydrationParentFiber = workInProgress),\n                (rootOrSingletonContext = !0),\n                (nextHydratableInstance =\n                  getFirstHydratableChild(prevSibling))),\n              (returnFiber = workInProgress.pendingProps.children),\n              null !== current || isHydrating\n                ? reconcileChildren(\n                    current,\n                    workInProgress,\n                    returnFiber,\n                    renderLanes\n                  )\n                : (workInProgress.child = reconcileChildFibers(\n                    workInProgress,\n                    null,\n                    returnFiber,\n                    renderLanes\n                  )),\n              markRef(current, workInProgress),\n              workInProgress.child\n            );\n        case 5:\n          return (\n            null === current &&\n              isHydrating &&\n              ((nextProps = getHostContext()),\n              (returnFiber = validateHydratableInstance(\n                workInProgress.type,\n                workInProgress.pendingProps,\n                nextProps\n              )),\n              (prevSibling = nextHydratableInstance),\n              (nextState = !prevSibling) ||\n                ((nextState = canHydrateInstance(\n                  prevSibling,\n                  workInProgress.type,\n                  workInProgress.pendingProps,\n                  rootOrSingletonContext\n                )),\n                null !== nextState\n                  ? ((workInProgress.stateNode = nextState),\n                    didSuspendOrErrorDEV ||\n                      ((nextProps = diffHydratedPropsForDevWarnings(\n                        nextState,\n                        workInProgress.type,\n                        workInProgress.pendingProps,\n                        nextProps\n                      )),\n                      null !== nextProps &&\n                        (buildHydrationDiffNode(workInProgress, 0).serverProps =\n                          nextProps)),\n                    (hydrationParentFiber = workInProgress),\n                    (nextHydratableInstance =\n                      getFirstHydratableChild(nextState)),\n                    (rootOrSingletonContext = !1),\n                    (nextProps = !0))\n                  : (nextProps = !1),\n                (nextState = !nextProps)),\n              nextState &&\n                (returnFiber &&\n                  warnNonHydratedInstance(workInProgress, prevSibling),\n                throwOnHydrationMismatch(workInProgress))),\n            pushHostContext(workInProgress),\n            (prevSibling = workInProgress.type),\n            (nextProps = workInProgress.pendingProps),\n            (nextState = null !== current ? current.memoizedProps : null),\n            (returnFiber = nextProps.children),\n            shouldSetTextContent(prevSibling, nextProps)\n              ? (returnFiber = null)\n              : null !== nextState &&\n                shouldSetTextContent(prevSibling, nextState) &&\n                (workInProgress.flags |= 32),\n            null !== workInProgress.memoizedState &&\n              ((prevSibling = renderWithHooks(\n                current,\n                workInProgress,\n                TransitionAwareHostComponent,\n                null,\n                null,\n                renderLanes\n              )),\n              isPrimaryRenderer\n                ? (HostTransitionContext._currentValue = prevSibling)\n                : (HostTransitionContext._currentValue2 = prevSibling)),\n            markRef(current, workInProgress),\n            reconcileChildren(\n              current,\n              workInProgress,\n              returnFiber,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 6:\n          return (\n            null === current &&\n              isHydrating &&\n              ((current = workInProgress.pendingProps),\n              (renderLanes = getHostContext()),\n              (current = validateHydratableTextInstance(current, renderLanes)),\n              (renderLanes = nextHydratableInstance),\n              (returnFiber = !renderLanes) ||\n                ((returnFiber = canHydrateTextInstance(\n                  renderLanes,\n                  workInProgress.pendingProps,\n                  rootOrSingletonContext\n                )),\n                null !== returnFiber\n                  ? ((workInProgress.stateNode = returnFiber),\n                    (hydrationParentFiber = workInProgress),\n                    (nextHydratableInstance = null),\n                    (returnFiber = !0))\n                  : (returnFiber = !1),\n                (returnFiber = !returnFiber)),\n              returnFiber &&\n                (current &&\n                  warnNonHydratedInstance(workInProgress, renderLanes),\n                throwOnHydrationMismatch(workInProgress))),\n            null\n          );\n        case 13:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        case 4:\n          return (\n            pushHostContainer(\n              workInProgress,\n              workInProgress.stateNode.containerInfo\n            ),\n            (returnFiber = workInProgress.pendingProps),\n            null === current\n              ? (workInProgress.child = reconcileChildFibers(\n                  workInProgress,\n                  null,\n                  returnFiber,\n                  renderLanes\n                ))\n              : reconcileChildren(\n                  current,\n                  workInProgress,\n                  returnFiber,\n                  renderLanes\n                ),\n            workInProgress.child\n          );\n        case 11:\n          return updateForwardRef(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        case 7:\n          return (\n            reconcileChildren(\n              current,\n              workInProgress,\n              workInProgress.pendingProps,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 8:\n          return (\n            reconcileChildren(\n              current,\n              workInProgress,\n              workInProgress.pendingProps.children,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 12:\n          return (\n            (workInProgress.flags |= 4),\n            (workInProgress.flags |= 2048),\n            (returnFiber = workInProgress.stateNode),\n            (returnFiber.effectDuration = -0),\n            (returnFiber.passiveEffectDuration = -0),\n            reconcileChildren(\n              current,\n              workInProgress,\n              workInProgress.pendingProps.children,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 10:\n          return (\n            (returnFiber = workInProgress.type),\n            (prevSibling = workInProgress.pendingProps),\n            (nextProps = prevSibling.value),\n            \"value\" in prevSibling ||\n              hasWarnedAboutUsingNoValuePropOnContextProvider ||\n              ((hasWarnedAboutUsingNoValuePropOnContextProvider = !0),\n              console.error(\n                \"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\"\n              )),\n            pushProvider(workInProgress, returnFiber, nextProps),\n            reconcileChildren(\n              current,\n              workInProgress,\n              prevSibling.children,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 9:\n          return (\n            (prevSibling = workInProgress.type._context),\n            (returnFiber = workInProgress.pendingProps.children),\n            \"function\" !== typeof returnFiber &&\n              console.error(\n                \"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\"\n              ),\n            prepareToReadContext(workInProgress),\n            (prevSibling = readContext(prevSibling)),\n            markComponentRenderStarted(workInProgress),\n            (returnFiber = callComponentInDEV(\n              returnFiber,\n              prevSibling,\n              void 0\n            )),\n            markComponentRenderStopped(),\n            (workInProgress.flags |= 1),\n            reconcileChildren(\n              current,\n              workInProgress,\n              returnFiber,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 14:\n          return updateMemoComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        case 15:\n          return updateSimpleMemoComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        case 19:\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        case 22:\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        case 24:\n          return (\n            prepareToReadContext(workInProgress),\n            (returnFiber = readContext(CacheContext)),\n            null === current\n              ? ((prevSibling = peekCacheFromPool()),\n                null === prevSibling &&\n                  ((prevSibling = workInProgressRoot),\n                  (nextProps = createCache()),\n                  (prevSibling.pooledCache = nextProps),\n                  retainCache(nextProps),\n                  null !== nextProps &&\n                    (prevSibling.pooledCacheLanes |= renderLanes),\n                  (prevSibling = nextProps)),\n                (workInProgress.memoizedState = {\n                  parent: returnFiber,\n                  cache: prevSibling\n                }),\n                initializeUpdateQueue(workInProgress),\n                pushProvider(workInProgress, CacheContext, prevSibling))\n              : (0 !== (current.lanes & renderLanes) &&\n                  (cloneUpdateQueue(current, workInProgress),\n                  processUpdateQueue(workInProgress, null, null, renderLanes),\n                  suspendIfUpdateReadFromEntangledAsyncAction()),\n                (prevSibling = current.memoizedState),\n                (nextProps = workInProgress.memoizedState),\n                prevSibling.parent !== returnFiber\n                  ? ((prevSibling = {\n                      parent: returnFiber,\n                      cache: returnFiber\n                    }),\n                    (workInProgress.memoizedState = prevSibling),\n                    0 === workInProgress.lanes &&\n                      (workInProgress.memoizedState =\n                        workInProgress.updateQueue.baseState =\n                          prevSibling),\n                    pushProvider(workInProgress, CacheContext, returnFiber))\n                  : ((returnFiber = nextProps.cache),\n                    pushProvider(workInProgress, CacheContext, returnFiber),\n                    returnFiber !== prevSibling.cache &&\n                      propagateContextChanges(\n                        workInProgress,\n                        [CacheContext],\n                        renderLanes,\n                        !0\n                      ))),\n            reconcileChildren(\n              current,\n              workInProgress,\n              workInProgress.pendingProps.children,\n              renderLanes\n            ),\n            workInProgress.child\n          );\n        case 29:\n          throw workInProgress.pendingProps;\n      }\n      throw Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in React. Please file an issue.\"\n      );\n    }\n    function resetContextDependencies() {\n      lastContextDependency = currentlyRenderingFiber = null;\n      isDisallowedContextReadInDEV = !1;\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      isPrimaryRenderer\n        ? (push(valueCursor, context._currentValue, providerFiber),\n          (context._currentValue = nextValue),\n          push(rendererCursorDEV, context._currentRenderer, providerFiber),\n          void 0 !== context._currentRenderer &&\n            null !== context._currentRenderer &&\n            context._currentRenderer !== rendererSigil &&\n            console.error(\n              \"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\"\n            ),\n          (context._currentRenderer = rendererSigil))\n        : (push(valueCursor, context._currentValue2, providerFiber),\n          (context._currentValue2 = nextValue),\n          push(renderer2CursorDEV, context._currentRenderer2, providerFiber),\n          void 0 !== context._currentRenderer2 &&\n            null !== context._currentRenderer2 &&\n            context._currentRenderer2 !== rendererSigil &&\n            console.error(\n              \"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\"\n            ),\n          (context._currentRenderer2 = rendererSigil));\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      isPrimaryRenderer\n        ? ((context._currentValue = currentValue),\n          (currentValue = rendererCursorDEV.current),\n          pop(rendererCursorDEV, providerFiber),\n          (context._currentRenderer = currentValue))\n        : ((context._currentValue2 = currentValue),\n          (currentValue = renderer2CursorDEV.current),\n          pop(renderer2CursorDEV, providerFiber),\n          (context._currentRenderer2 = currentValue));\n      pop(valueCursor, providerFiber);\n    }\n    function scheduleContextWorkOnParentPath(\n      parent,\n      renderLanes,\n      propagationRoot\n    ) {\n      for (; null !== parent; ) {\n        var alternate = parent.alternate;\n        (parent.childLanes & renderLanes) !== renderLanes\n          ? ((parent.childLanes |= renderLanes),\n            null !== alternate && (alternate.childLanes |= renderLanes))\n          : null !== alternate &&\n            (alternate.childLanes & renderLanes) !== renderLanes &&\n            (alternate.childLanes |= renderLanes);\n        if (parent === propagationRoot) break;\n        parent = parent.return;\n      }\n      parent !== propagationRoot &&\n        console.error(\n          \"Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.\"\n        );\n    }\n    function propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree\n    ) {\n      var fiber = workInProgress.child;\n      null !== fiber && (fiber.return = workInProgress);\n      for (; null !== fiber; ) {\n        var list = fiber.dependencies;\n        if (null !== list) {\n          var nextFiber = fiber.child;\n          list = list.firstContext;\n          a: for (; null !== list; ) {\n            var dependency = list;\n            list = fiber;\n            for (var i = 0; i < contexts.length; i++)\n              if (dependency.context === contexts[i]) {\n                list.lanes |= renderLanes;\n                dependency = list.alternate;\n                null !== dependency && (dependency.lanes |= renderLanes);\n                scheduleContextWorkOnParentPath(\n                  list.return,\n                  renderLanes,\n                  workInProgress\n                );\n                forcePropagateEntireTree || (nextFiber = null);\n                break a;\n              }\n            list = dependency.next;\n          }\n        } else if (18 === fiber.tag) {\n          nextFiber = fiber.return;\n          if (null === nextFiber)\n            throw Error(\n              \"We just came from a parent so we must have had a parent. This is a bug in React.\"\n            );\n          nextFiber.lanes |= renderLanes;\n          list = nextFiber.alternate;\n          null !== list && (list.lanes |= renderLanes);\n          scheduleContextWorkOnParentPath(\n            nextFiber,\n            renderLanes,\n            workInProgress\n          );\n          nextFiber = null;\n        } else nextFiber = fiber.child;\n        if (null !== nextFiber) nextFiber.return = fiber;\n        else\n          for (nextFiber = fiber; null !== nextFiber; ) {\n            if (nextFiber === workInProgress) {\n              nextFiber = null;\n              break;\n            }\n            fiber = nextFiber.sibling;\n            if (null !== fiber) {\n              fiber.return = nextFiber.return;\n              nextFiber = fiber;\n              break;\n            }\n            nextFiber = nextFiber.return;\n          }\n        fiber = nextFiber;\n      }\n    }\n    function propagateParentContextChanges(\n      current,\n      workInProgress,\n      renderLanes,\n      forcePropagateEntireTree\n    ) {\n      current = null;\n      for (\n        var parent = workInProgress, isInsidePropagationBailout = !1;\n        null !== parent;\n\n      ) {\n        if (!isInsidePropagationBailout)\n          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;\n          else if (0 !== (parent.flags & 262144)) break;\n        if (10 === parent.tag) {\n          var currentParent = parent.alternate;\n          if (null === currentParent)\n            throw Error(\"Should have a current fiber. This is a bug in React.\");\n          currentParent = currentParent.memoizedProps;\n          if (null !== currentParent) {\n            var context = parent.type;\n            objectIs(parent.pendingProps.value, currentParent.value) ||\n              (null !== current\n                ? current.push(context)\n                : (current = [context]));\n          }\n        } else if (parent === hostTransitionProviderCursor.current) {\n          currentParent = parent.alternate;\n          if (null === currentParent)\n            throw Error(\"Should have a current fiber. This is a bug in React.\");\n          currentParent.memoizedState.memoizedState !==\n            parent.memoizedState.memoizedState &&\n            (null !== current\n              ? current.push(HostTransitionContext)\n              : (current = [HostTransitionContext]));\n        }\n        parent = parent.return;\n      }\n      null !== current &&\n        propagateContextChanges(\n          workInProgress,\n          current,\n          renderLanes,\n          forcePropagateEntireTree\n        );\n      workInProgress.flags |= 262144;\n    }\n    function checkIfContextChanged(currentDependencies) {\n      for (\n        currentDependencies = currentDependencies.firstContext;\n        null !== currentDependencies;\n\n      ) {\n        var context = currentDependencies.context;\n        if (\n          !objectIs(\n            isPrimaryRenderer ? context._currentValue : context._currentValue2,\n            currentDependencies.memoizedValue\n          )\n        )\n          return !0;\n        currentDependencies = currentDependencies.next;\n      }\n      return !1;\n    }\n    function prepareToReadContext(workInProgress) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      workInProgress = workInProgress.dependencies;\n      null !== workInProgress && (workInProgress.firstContext = null);\n    }\n    function readContext(context) {\n      isDisallowedContextReadInDEV &&\n        console.error(\n          \"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\"\n        );\n      return readContextForConsumer(currentlyRenderingFiber, context);\n    }\n    function readContextDuringReconciliation(consumer, context) {\n      null === currentlyRenderingFiber && prepareToReadContext(consumer);\n      return readContextForConsumer(consumer, context);\n    }\n    function readContextForConsumer(consumer, context) {\n      var value = isPrimaryRenderer\n        ? context._currentValue\n        : context._currentValue2;\n      context = { context: context, memoizedValue: value, next: null };\n      if (null === lastContextDependency) {\n        if (null === consumer)\n          throw Error(\n            \"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\"\n          );\n        lastContextDependency = context;\n        consumer.dependencies = {\n          lanes: 0,\n          firstContext: context,\n          _debugThenableState: null\n        };\n        consumer.flags |= 524288;\n      } else lastContextDependency = lastContextDependency.next = context;\n      return value;\n    }\n    function createCache() {\n      return {\n        controller: new AbortControllerLocal(),\n        data: new Map(),\n        refCount: 0\n      };\n    }\n    function retainCache(cache) {\n      cache.controller.signal.aborted &&\n        console.warn(\n          \"A cache instance was retained after it was already freed. This likely indicates a bug in React.\"\n        );\n      cache.refCount++;\n    }\n    function releaseCache(cache) {\n      cache.refCount--;\n      0 > cache.refCount &&\n        console.warn(\n          \"A cache instance was released after it was already freed. This likely indicates a bug in React.\"\n        );\n      0 === cache.refCount &&\n        scheduleCallback$1(NormalPriority, function () {\n          cache.controller.abort();\n        });\n    }\n    function peekCacheFromPool() {\n      var cacheResumedFromPreviousRender = resumedCache.current;\n      return null !== cacheResumedFromPreviousRender\n        ? cacheResumedFromPreviousRender\n        : workInProgressRoot.pooledCache;\n    }\n    function pushTransition(offscreenWorkInProgress, prevCachePool) {\n      null === prevCachePool\n        ? push(resumedCache, resumedCache.current, offscreenWorkInProgress)\n        : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n    function getSuspendedCache() {\n      var cacheFromPool = peekCacheFromPool();\n      return null === cacheFromPool\n        ? null\n        : {\n            parent: isPrimaryRenderer\n              ? CacheContext._currentValue\n              : CacheContext._currentValue2,\n            pool: cacheFromPool\n          };\n    }\n    function markUpdate(workInProgress) {\n      workInProgress.flags |= 4;\n    }\n    function doesRequireClone(current, completedWork) {\n      if (null !== current && current.child === completedWork.child) return !1;\n      if (0 !== (completedWork.flags & 16)) return !0;\n      for (current = completedWork.child; null !== current; ) {\n        if (\n          0 !== (current.flags & 13878) ||\n          0 !== (current.subtreeFlags & 13878)\n        )\n          return !0;\n        current = current.sibling;\n      }\n      return !1;\n    }\n    function appendAllChildren(\n      parent,\n      workInProgress,\n      needsVisibilityToggle,\n      isHidden\n    ) {\n      if (supportsMutation)\n        for (\n          needsVisibilityToggle = workInProgress.child;\n          null !== needsVisibilityToggle;\n\n        ) {\n          if (\n            5 === needsVisibilityToggle.tag ||\n            6 === needsVisibilityToggle.tag\n          )\n            appendInitialChild(parent, needsVisibilityToggle.stateNode);\n          else if (\n            !(\n              4 === needsVisibilityToggle.tag ||\n              (supportsSingletons && 27 === needsVisibilityToggle.tag)\n            ) &&\n            null !== needsVisibilityToggle.child\n          ) {\n            needsVisibilityToggle.child.return = needsVisibilityToggle;\n            needsVisibilityToggle = needsVisibilityToggle.child;\n            continue;\n          }\n          if (needsVisibilityToggle === workInProgress) break;\n          for (; null === needsVisibilityToggle.sibling; ) {\n            if (\n              null === needsVisibilityToggle.return ||\n              needsVisibilityToggle.return === workInProgress\n            )\n              return;\n            needsVisibilityToggle = needsVisibilityToggle.return;\n          }\n          needsVisibilityToggle.sibling.return = needsVisibilityToggle.return;\n          needsVisibilityToggle = needsVisibilityToggle.sibling;\n        }\n      else if (supportsPersistence)\n        for (var _node = workInProgress.child; null !== _node; ) {\n          if (5 === _node.tag) {\n            var instance = _node.stateNode;\n            needsVisibilityToggle &&\n              isHidden &&\n              (instance = cloneHiddenInstance(\n                instance,\n                _node.type,\n                _node.memoizedProps\n              ));\n            appendInitialChild(parent, instance);\n          } else if (6 === _node.tag)\n            (instance = _node.stateNode),\n              needsVisibilityToggle &&\n                isHidden &&\n                (instance = cloneHiddenTextInstance(\n                  instance,\n                  _node.memoizedProps\n                )),\n              appendInitialChild(parent, instance);\n          else if (4 !== _node.tag)\n            if (22 === _node.tag && null !== _node.memoizedState)\n              (instance = _node.child),\n                null !== instance && (instance.return = _node),\n                appendAllChildren(parent, _node, !0, !0);\n            else if (null !== _node.child) {\n              _node.child.return = _node;\n              _node = _node.child;\n              continue;\n            }\n          if (_node === workInProgress) break;\n          for (; null === _node.sibling; ) {\n            if (null === _node.return || _node.return === workInProgress)\n              return;\n            _node = _node.return;\n          }\n          _node.sibling.return = _node.return;\n          _node = _node.sibling;\n        }\n    }\n    function appendAllChildrenToContainer(\n      containerChildSet,\n      workInProgress,\n      needsVisibilityToggle,\n      isHidden\n    ) {\n      if (supportsPersistence)\n        for (var node = workInProgress.child; null !== node; ) {\n          if (5 === node.tag) {\n            var instance = node.stateNode;\n            needsVisibilityToggle &&\n              isHidden &&\n              (instance = cloneHiddenInstance(\n                instance,\n                node.type,\n                node.memoizedProps\n              ));\n            appendChildToContainerChildSet(containerChildSet, instance);\n          } else if (6 === node.tag)\n            (instance = node.stateNode),\n              needsVisibilityToggle &&\n                isHidden &&\n                (instance = cloneHiddenTextInstance(\n                  instance,\n                  node.memoizedProps\n                )),\n              appendChildToContainerChildSet(containerChildSet, instance);\n          else if (4 !== node.tag)\n            if (22 === node.tag && null !== node.memoizedState)\n              (instance = node.child),\n                null !== instance && (instance.return = node),\n                appendAllChildrenToContainer(\n                  containerChildSet,\n                  node,\n                  !(\n                    null !== node.memoizedProps &&\n                    \"manual\" === node.memoizedProps.mode\n                  ),\n                  !0\n                );\n            else if (null !== node.child) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n          if (node === workInProgress) break;\n          for (; null === node.sibling; ) {\n            if (null === node.return || node.return === workInProgress) return;\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n    }\n    function updateHostContainer(current, workInProgress) {\n      if (supportsPersistence && doesRequireClone(current, workInProgress)) {\n        current = workInProgress.stateNode;\n        var container = current.containerInfo,\n          newChildSet = createContainerChildSet();\n        appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);\n        current.pendingChildren = newChildSet;\n        markUpdate(workInProgress);\n        finalizeContainerChildren(container, newChildSet);\n      }\n    }\n    function updateHostComponent(current, workInProgress, type, newProps) {\n      if (supportsMutation)\n        current.memoizedProps !== newProps && markUpdate(workInProgress);\n      else if (supportsPersistence) {\n        var currentInstance = current.stateNode,\n          _oldProps = current.memoizedProps;\n        if (\n          (current = doesRequireClone(current, workInProgress)) ||\n          _oldProps !== newProps\n        ) {\n          var currentHostContext = getHostContext();\n          _oldProps = cloneInstance(\n            currentInstance,\n            type,\n            _oldProps,\n            newProps,\n            !current,\n            null\n          );\n          _oldProps === currentInstance\n            ? (workInProgress.stateNode = currentInstance)\n            : (finalizeInitialChildren(\n                _oldProps,\n                type,\n                newProps,\n                currentHostContext\n              ) && markUpdate(workInProgress),\n              (workInProgress.stateNode = _oldProps),\n              current\n                ? appendAllChildren(_oldProps, workInProgress, !1, !1)\n                : markUpdate(workInProgress));\n        } else workInProgress.stateNode = currentInstance;\n      }\n    }\n    function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props) {\n      if (maySuspendCommit(type, props)) {\n        if (((workInProgress.flags |= 16777216), !preloadInstance(type, props)))\n          if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;\n          else\n            throw (\n              ((suspendedThenable = noopSuspenseyCommitThenable),\n              SuspenseyCommitException)\n            );\n      } else workInProgress.flags &= -16777217;\n    }\n    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {\n      if (mayResourceSuspendCommit(resource)) {\n        if (((workInProgress.flags |= 16777216), !preloadResource(resource)))\n          if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;\n          else\n            throw (\n              ((suspendedThenable = noopSuspenseyCommitThenable),\n              SuspenseyCommitException)\n            );\n      } else workInProgress.flags &= -16777217;\n    }\n    function scheduleRetryEffect(workInProgress, retryQueue) {\n      null !== retryQueue && (workInProgress.flags |= 4);\n      workInProgress.flags & 16384 &&\n        ((retryQueue =\n          22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),\n        (workInProgress.lanes |= retryQueue),\n        (workInProgressSuspendedRetryLanes |= retryQueue));\n    }\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      if (!isHydrating)\n        switch (renderState.tailMode) {\n          case \"hidden\":\n            hasRenderedATailFallback = renderState.tail;\n            for (var lastTailNode = null; null !== hasRenderedATailFallback; )\n              null !== hasRenderedATailFallback.alternate &&\n                (lastTailNode = hasRenderedATailFallback),\n                (hasRenderedATailFallback = hasRenderedATailFallback.sibling);\n            null === lastTailNode\n              ? (renderState.tail = null)\n              : (lastTailNode.sibling = null);\n            break;\n          case \"collapsed\":\n            lastTailNode = renderState.tail;\n            for (var _lastTailNode = null; null !== lastTailNode; )\n              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode),\n                (lastTailNode = lastTailNode.sibling);\n            null === _lastTailNode\n              ? hasRenderedATailFallback || null === renderState.tail\n                ? (renderState.tail = null)\n                : (renderState.tail.sibling = null)\n              : (_lastTailNode.sibling = null);\n        }\n    }\n    function bubbleProperties(completedWork) {\n      var didBailout =\n          null !== completedWork.alternate &&\n          completedWork.alternate.child === completedWork.child,\n        newChildLanes = 0,\n        subtreeFlags = 0;\n      if (didBailout)\n        if ((completedWork.mode & 2) !== NoMode) {\n          for (\n            var _treeBaseDuration = completedWork.selfBaseDuration,\n              _child2 = completedWork.child;\n            null !== _child2;\n\n          )\n            (newChildLanes |= _child2.lanes | _child2.childLanes),\n              (subtreeFlags |= _child2.subtreeFlags & 31457280),\n              (subtreeFlags |= _child2.flags & 31457280),\n              (_treeBaseDuration += _child2.treeBaseDuration),\n              (_child2 = _child2.sibling);\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else\n          for (\n            _treeBaseDuration = completedWork.child;\n            null !== _treeBaseDuration;\n\n          )\n            (newChildLanes |=\n              _treeBaseDuration.lanes | _treeBaseDuration.childLanes),\n              (subtreeFlags |= _treeBaseDuration.subtreeFlags & 31457280),\n              (subtreeFlags |= _treeBaseDuration.flags & 31457280),\n              (_treeBaseDuration.return = completedWork),\n              (_treeBaseDuration = _treeBaseDuration.sibling);\n      else if ((completedWork.mode & 2) !== NoMode) {\n        _treeBaseDuration = completedWork.actualDuration;\n        _child2 = completedWork.selfBaseDuration;\n        for (var child = completedWork.child; null !== child; )\n          (newChildLanes |= child.lanes | child.childLanes),\n            (subtreeFlags |= child.subtreeFlags),\n            (subtreeFlags |= child.flags),\n            (_treeBaseDuration += child.actualDuration),\n            (_child2 += child.treeBaseDuration),\n            (child = child.sibling);\n        completedWork.actualDuration = _treeBaseDuration;\n        completedWork.treeBaseDuration = _child2;\n      } else\n        for (\n          _treeBaseDuration = completedWork.child;\n          null !== _treeBaseDuration;\n\n        )\n          (newChildLanes |=\n            _treeBaseDuration.lanes | _treeBaseDuration.childLanes),\n            (subtreeFlags |= _treeBaseDuration.subtreeFlags),\n            (subtreeFlags |= _treeBaseDuration.flags),\n            (_treeBaseDuration.return = completedWork),\n            (_treeBaseDuration = _treeBaseDuration.sibling);\n      completedWork.subtreeFlags |= subtreeFlags;\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps;\n      popTreeContext(workInProgress);\n      switch (workInProgress.tag) {\n        case 16:\n        case 15:\n        case 0:\n        case 11:\n        case 7:\n        case 8:\n        case 12:\n        case 9:\n        case 14:\n          return bubbleProperties(workInProgress), null;\n        case 1:\n          return bubbleProperties(workInProgress), null;\n        case 3:\n          renderLanes = workInProgress.stateNode;\n          newProps = null;\n          null !== current && (newProps = current.memoizedState.cache);\n          workInProgress.memoizedState.cache !== newProps &&\n            (workInProgress.flags |= 2048);\n          popProvider(CacheContext, workInProgress);\n          popHostContainer(workInProgress);\n          renderLanes.pendingContext &&\n            ((renderLanes.context = renderLanes.pendingContext),\n            (renderLanes.pendingContext = null));\n          if (null === current || null === current.child)\n            popHydrationState(workInProgress)\n              ? (emitPendingHydrationWarnings(), markUpdate(workInProgress))\n              : null === current ||\n                (current.memoizedState.isDehydrated &&\n                  0 === (workInProgress.flags & 256)) ||\n                ((workInProgress.flags |= 1024),\n                null !== hydrationErrors &&\n                  (queueRecoverableErrors(hydrationErrors),\n                  (hydrationErrors = null)));\n          updateHostContainer(current, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case 26:\n          if (supportsResources) {\n            renderLanes = workInProgress.type;\n            var nextResource = workInProgress.memoizedState;\n            null === current\n              ? (markUpdate(workInProgress),\n                null !== nextResource\n                  ? (bubbleProperties(workInProgress),\n                    preloadResourceAndSuspendIfNeeded(\n                      workInProgress,\n                      nextResource\n                    ))\n                  : (bubbleProperties(workInProgress),\n                    preloadInstanceAndSuspendIfNeeded(\n                      workInProgress,\n                      renderLanes,\n                      newProps\n                    )))\n              : nextResource\n                ? nextResource !== current.memoizedState\n                  ? (markUpdate(workInProgress),\n                    bubbleProperties(workInProgress),\n                    preloadResourceAndSuspendIfNeeded(\n                      workInProgress,\n                      nextResource\n                    ))\n                  : (bubbleProperties(workInProgress),\n                    (workInProgress.flags &= -16777217))\n                : (supportsMutation\n                    ? current.memoizedProps !== newProps &&\n                      markUpdate(workInProgress)\n                    : updateHostComponent(\n                        current,\n                        workInProgress,\n                        renderLanes,\n                        newProps\n                      ),\n                  bubbleProperties(workInProgress),\n                  preloadInstanceAndSuspendIfNeeded(\n                    workInProgress,\n                    renderLanes,\n                    newProps\n                  ));\n            return null;\n          }\n        case 27:\n          if (supportsSingletons) {\n            popHostContext(workInProgress);\n            renderLanes = requiredContext(rootInstanceStackCursor.current);\n            nextResource = workInProgress.type;\n            if (null !== current && null != workInProgress.stateNode)\n              supportsMutation\n                ? current.memoizedProps !== newProps &&\n                  markUpdate(workInProgress)\n                : updateHostComponent(\n                    current,\n                    workInProgress,\n                    nextResource,\n                    newProps\n                  );\n            else {\n              if (!newProps) {\n                if (null === workInProgress.stateNode)\n                  throw Error(\n                    \"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\"\n                  );\n                bubbleProperties(workInProgress);\n                return null;\n              }\n              current = getHostContext();\n              popHydrationState(workInProgress)\n                ? prepareToHydrateHostInstance(workInProgress, current)\n                : ((current = resolveSingletonInstance(\n                    nextResource,\n                    newProps,\n                    renderLanes,\n                    current,\n                    !0\n                  )),\n                  (workInProgress.stateNode = current),\n                  markUpdate(workInProgress));\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case 5:\n          popHostContext(workInProgress);\n          renderLanes = workInProgress.type;\n          if (null !== current && null != workInProgress.stateNode)\n            updateHostComponent(current, workInProgress, renderLanes, newProps);\n          else {\n            if (!newProps) {\n              if (null === workInProgress.stateNode)\n                throw Error(\n                  \"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\"\n                );\n              bubbleProperties(workInProgress);\n              return null;\n            }\n            current = getHostContext();\n            popHydrationState(workInProgress)\n              ? prepareToHydrateHostInstance(workInProgress, current)\n              : ((nextResource = requiredContext(\n                  rootInstanceStackCursor.current\n                )),\n                (nextResource = createInstance(\n                  renderLanes,\n                  newProps,\n                  nextResource,\n                  current,\n                  workInProgress\n                )),\n                appendAllChildren(nextResource, workInProgress, !1, !1),\n                (workInProgress.stateNode = nextResource),\n                finalizeInitialChildren(\n                  nextResource,\n                  renderLanes,\n                  newProps,\n                  current\n                ) && markUpdate(workInProgress));\n          }\n          bubbleProperties(workInProgress);\n          preloadInstanceAndSuspendIfNeeded(\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps\n          );\n          return null;\n        case 6:\n          if (current && null != workInProgress.stateNode)\n            (renderLanes = current.memoizedProps),\n              supportsMutation\n                ? renderLanes !== newProps && markUpdate(workInProgress)\n                : supportsPersistence &&\n                  (renderLanes !== newProps\n                    ? ((current = requiredContext(\n                        rootInstanceStackCursor.current\n                      )),\n                      (renderLanes = getHostContext()),\n                      (workInProgress.stateNode = createTextInstance(\n                        newProps,\n                        current,\n                        renderLanes,\n                        workInProgress\n                      )),\n                      markUpdate(workInProgress))\n                    : (workInProgress.stateNode = current.stateNode));\n          else {\n            if (\n              \"string\" !== typeof newProps &&\n              null === workInProgress.stateNode\n            )\n              throw Error(\n                \"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\"\n              );\n            current = requiredContext(rootInstanceStackCursor.current);\n            renderLanes = getHostContext();\n            if (popHydrationState(workInProgress)) {\n              if (!supportsHydration)\n                throw Error(\n                  \"Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\"\n                );\n              current = workInProgress.stateNode;\n              renderLanes = workInProgress.memoizedProps;\n              nextResource = !didSuspendOrErrorDEV;\n              newProps = null;\n              var returnFiber = hydrationParentFiber;\n              if (null !== returnFiber)\n                switch (returnFiber.tag) {\n                  case 3:\n                    nextResource &&\n                      ((nextResource = diffHydratedTextForDevWarnings(\n                        current,\n                        renderLanes,\n                        newProps\n                      )),\n                      null !== nextResource &&\n                        (buildHydrationDiffNode(workInProgress, 0).serverProps =\n                          nextResource));\n                    break;\n                  case 27:\n                  case 5:\n                    (newProps = returnFiber.memoizedProps),\n                      nextResource &&\n                        ((nextResource = diffHydratedTextForDevWarnings(\n                          current,\n                          renderLanes,\n                          newProps\n                        )),\n                        null !== nextResource &&\n                          (buildHydrationDiffNode(\n                            workInProgress,\n                            0\n                          ).serverProps = nextResource));\n                }\n              hydrateTextInstance(\n                current,\n                renderLanes,\n                workInProgress,\n                newProps\n              ) || throwOnHydrationMismatch(workInProgress);\n            } else\n              workInProgress.stateNode = createTextInstance(\n                newProps,\n                current,\n                renderLanes,\n                workInProgress\n              );\n          }\n          bubbleProperties(workInProgress);\n          return null;\n        case 13:\n          newProps = workInProgress.memoizedState;\n          if (\n            null === current ||\n            (null !== current.memoizedState &&\n              null !== current.memoizedState.dehydrated)\n          ) {\n            nextResource = popHydrationState(workInProgress);\n            if (null !== newProps && null !== newProps.dehydrated) {\n              if (null === current) {\n                if (!nextResource)\n                  throw Error(\n                    \"A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.\"\n                  );\n                if (!supportsHydration)\n                  throw Error(\n                    \"Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\"\n                  );\n                nextResource = workInProgress.memoizedState;\n                nextResource =\n                  null !== nextResource ? nextResource.dehydrated : null;\n                if (!nextResource)\n                  throw Error(\n                    \"Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.\"\n                  );\n                hydrateSuspenseInstance(nextResource, workInProgress);\n                bubbleProperties(workInProgress);\n                (workInProgress.mode & 2) !== NoMode &&\n                  null !== newProps &&\n                  ((nextResource = workInProgress.child),\n                  null !== nextResource &&\n                    (workInProgress.treeBaseDuration -=\n                      nextResource.treeBaseDuration));\n              } else\n                emitPendingHydrationWarnings(),\n                  resetHydrationState(),\n                  0 === (workInProgress.flags & 128) &&\n                    (workInProgress.memoizedState = null),\n                  (workInProgress.flags |= 4),\n                  bubbleProperties(workInProgress),\n                  (workInProgress.mode & 2) !== NoMode &&\n                    null !== newProps &&\n                    ((nextResource = workInProgress.child),\n                    null !== nextResource &&\n                      (workInProgress.treeBaseDuration -=\n                        nextResource.treeBaseDuration));\n              nextResource = !1;\n            } else\n              null !== hydrationErrors &&\n                (queueRecoverableErrors(hydrationErrors),\n                (hydrationErrors = null)),\n                (nextResource = !0);\n            if (!nextResource) {\n              if (workInProgress.flags & 256)\n                return popSuspenseHandler(workInProgress), workInProgress;\n              popSuspenseHandler(workInProgress);\n              return null;\n            }\n          }\n          popSuspenseHandler(workInProgress);\n          if (0 !== (workInProgress.flags & 128))\n            return (\n              (workInProgress.lanes = renderLanes),\n              (workInProgress.mode & 2) !== NoMode &&\n                transferActualDuration(workInProgress),\n              workInProgress\n            );\n          renderLanes = null !== newProps;\n          current = null !== current && null !== current.memoizedState;\n          renderLanes &&\n            ((newProps = workInProgress.child),\n            (nextResource = null),\n            null !== newProps.alternate &&\n              null !== newProps.alternate.memoizedState &&\n              null !== newProps.alternate.memoizedState.cachePool &&\n              (nextResource = newProps.alternate.memoizedState.cachePool.pool),\n            (returnFiber = null),\n            null !== newProps.memoizedState &&\n              null !== newProps.memoizedState.cachePool &&\n              (returnFiber = newProps.memoizedState.cachePool.pool),\n            returnFiber !== nextResource && (newProps.flags |= 2048));\n          renderLanes !== current &&\n            renderLanes &&\n            (workInProgress.child.flags |= 8192);\n          scheduleRetryEffect(workInProgress, workInProgress.updateQueue);\n          bubbleProperties(workInProgress);\n          (workInProgress.mode & 2) !== NoMode &&\n            renderLanes &&\n            ((current = workInProgress.child),\n            null !== current &&\n              (workInProgress.treeBaseDuration -= current.treeBaseDuration));\n          return null;\n        case 4:\n          return (\n            popHostContainer(workInProgress),\n            updateHostContainer(current, workInProgress),\n            null === current &&\n              preparePortalMount(workInProgress.stateNode.containerInfo),\n            bubbleProperties(workInProgress),\n            null\n          );\n        case 10:\n          return (\n            popProvider(workInProgress.type, workInProgress),\n            bubbleProperties(workInProgress),\n            null\n          );\n        case 19:\n          pop(suspenseStackCursor, workInProgress);\n          nextResource = workInProgress.memoizedState;\n          if (null === nextResource)\n            return bubbleProperties(workInProgress), null;\n          newProps = 0 !== (workInProgress.flags & 128);\n          returnFiber = nextResource.rendering;\n          if (null === returnFiber)\n            if (newProps) cutOffTailIfNeeded(nextResource, !1);\n            else {\n              if (\n                workInProgressRootExitStatus !== RootInProgress ||\n                (null !== current && 0 !== (current.flags & 128))\n              )\n                for (current = workInProgress.child; null !== current; ) {\n                  returnFiber = findFirstSuspended(current);\n                  if (null !== returnFiber) {\n                    workInProgress.flags |= 128;\n                    cutOffTailIfNeeded(nextResource, !1);\n                    current = returnFiber.updateQueue;\n                    workInProgress.updateQueue = current;\n                    scheduleRetryEffect(workInProgress, current);\n                    workInProgress.subtreeFlags = 0;\n                    current = renderLanes;\n                    for (\n                      renderLanes = workInProgress.child;\n                      null !== renderLanes;\n\n                    )\n                      resetWorkInProgress(renderLanes, current),\n                        (renderLanes = renderLanes.sibling);\n                    push(\n                      suspenseStackCursor,\n                      (suspenseStackCursor.current &\n                        SubtreeSuspenseContextMask) |\n                        ForceSuspenseFallback,\n                      workInProgress\n                    );\n                    return workInProgress.child;\n                  }\n                  current = current.sibling;\n                }\n              null !== nextResource.tail &&\n                now$1() > workInProgressRootRenderTargetTime &&\n                ((workInProgress.flags |= 128),\n                (newProps = !0),\n                cutOffTailIfNeeded(nextResource, !1),\n                (workInProgress.lanes = 4194304));\n            }\n          else {\n            if (!newProps)\n              if (\n                ((current = findFirstSuspended(returnFiber)), null !== current)\n              ) {\n                if (\n                  ((workInProgress.flags |= 128),\n                  (newProps = !0),\n                  (current = current.updateQueue),\n                  (workInProgress.updateQueue = current),\n                  scheduleRetryEffect(workInProgress, current),\n                  cutOffTailIfNeeded(nextResource, !0),\n                  null === nextResource.tail &&\n                    \"hidden\" === nextResource.tailMode &&\n                    !returnFiber.alternate &&\n                    !isHydrating)\n                )\n                  return bubbleProperties(workInProgress), null;\n              } else\n                2 * now$1() - nextResource.renderingStartTime >\n                  workInProgressRootRenderTargetTime &&\n                  536870912 !== renderLanes &&\n                  ((workInProgress.flags |= 128),\n                  (newProps = !0),\n                  cutOffTailIfNeeded(nextResource, !1),\n                  (workInProgress.lanes = 4194304));\n            nextResource.isBackwards\n              ? ((returnFiber.sibling = workInProgress.child),\n                (workInProgress.child = returnFiber))\n              : ((current = nextResource.last),\n                null !== current\n                  ? (current.sibling = returnFiber)\n                  : (workInProgress.child = returnFiber),\n                (nextResource.last = returnFiber));\n          }\n          if (null !== nextResource.tail)\n            return (\n              (current = nextResource.tail),\n              (nextResource.rendering = current),\n              (nextResource.tail = current.sibling),\n              (nextResource.renderingStartTime = now$1()),\n              (current.sibling = null),\n              (renderLanes = suspenseStackCursor.current),\n              (renderLanes = newProps\n                ? (renderLanes & SubtreeSuspenseContextMask) |\n                  ForceSuspenseFallback\n                : renderLanes & SubtreeSuspenseContextMask),\n              push(suspenseStackCursor, renderLanes, workInProgress),\n              current\n            );\n          bubbleProperties(workInProgress);\n          return null;\n        case 22:\n        case 23:\n          return (\n            popSuspenseHandler(workInProgress),\n            popHiddenContext(workInProgress),\n            (newProps = null !== workInProgress.memoizedState),\n            null !== current\n              ? (null !== current.memoizedState) !== newProps &&\n                (workInProgress.flags |= 8192)\n              : newProps && (workInProgress.flags |= 8192),\n            newProps\n              ? 0 !== (renderLanes & 536870912) &&\n                0 === (workInProgress.flags & 128) &&\n                (bubbleProperties(workInProgress),\n                workInProgress.subtreeFlags & 6 &&\n                  (workInProgress.flags |= 8192))\n              : bubbleProperties(workInProgress),\n            (renderLanes = workInProgress.updateQueue),\n            null !== renderLanes &&\n              scheduleRetryEffect(workInProgress, renderLanes.retryQueue),\n            (renderLanes = null),\n            null !== current &&\n              null !== current.memoizedState &&\n              null !== current.memoizedState.cachePool &&\n              (renderLanes = current.memoizedState.cachePool.pool),\n            (newProps = null),\n            null !== workInProgress.memoizedState &&\n              null !== workInProgress.memoizedState.cachePool &&\n              (newProps = workInProgress.memoizedState.cachePool.pool),\n            newProps !== renderLanes && (workInProgress.flags |= 2048),\n            null !== current && pop(resumedCache, workInProgress),\n            null\n          );\n        case 24:\n          return (\n            (renderLanes = null),\n            null !== current && (renderLanes = current.memoizedState.cache),\n            workInProgress.memoizedState.cache !== renderLanes &&\n              (workInProgress.flags |= 2048),\n            popProvider(CacheContext, workInProgress),\n            bubbleProperties(workInProgress),\n            null\n          );\n        case 25:\n          return null;\n      }\n      throw Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in React. Please file an issue.\"\n      );\n    }\n    function unwindWork(current, workInProgress) {\n      popTreeContext(workInProgress);\n      switch (workInProgress.tag) {\n        case 1:\n          return (\n            (current = workInProgress.flags),\n            current & 65536\n              ? ((workInProgress.flags = (current & -65537) | 128),\n                (workInProgress.mode & 2) !== NoMode &&\n                  transferActualDuration(workInProgress),\n                workInProgress)\n              : null\n          );\n        case 3:\n          return (\n            popProvider(CacheContext, workInProgress),\n            popHostContainer(workInProgress),\n            (current = workInProgress.flags),\n            0 !== (current & 65536) && 0 === (current & 128)\n              ? ((workInProgress.flags = (current & -65537) | 128),\n                workInProgress)\n              : null\n          );\n        case 26:\n        case 27:\n        case 5:\n          return popHostContext(workInProgress), null;\n        case 13:\n          popSuspenseHandler(workInProgress);\n          current = workInProgress.memoizedState;\n          if (null !== current && null !== current.dehydrated) {\n            if (null === workInProgress.alternate)\n              throw Error(\n                \"Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.\"\n              );\n            resetHydrationState();\n          }\n          current = workInProgress.flags;\n          return current & 65536\n            ? ((workInProgress.flags = (current & -65537) | 128),\n              (workInProgress.mode & 2) !== NoMode &&\n                transferActualDuration(workInProgress),\n              workInProgress)\n            : null;\n        case 19:\n          return pop(suspenseStackCursor, workInProgress), null;\n        case 4:\n          return popHostContainer(workInProgress), null;\n        case 10:\n          return popProvider(workInProgress.type, workInProgress), null;\n        case 22:\n        case 23:\n          return (\n            popSuspenseHandler(workInProgress),\n            popHiddenContext(workInProgress),\n            null !== current && pop(resumedCache, workInProgress),\n            (current = workInProgress.flags),\n            current & 65536\n              ? ((workInProgress.flags = (current & -65537) | 128),\n                (workInProgress.mode & 2) !== NoMode &&\n                  transferActualDuration(workInProgress),\n                workInProgress)\n              : null\n          );\n        case 24:\n          return popProvider(CacheContext, workInProgress), null;\n        case 25:\n          return null;\n        default:\n          return null;\n      }\n    }\n    function unwindInterruptedWork(current, interruptedWork) {\n      popTreeContext(interruptedWork);\n      switch (interruptedWork.tag) {\n        case 3:\n          popProvider(CacheContext, interruptedWork);\n          popHostContainer(interruptedWork);\n          break;\n        case 26:\n        case 27:\n        case 5:\n          popHostContext(interruptedWork);\n          break;\n        case 4:\n          popHostContainer(interruptedWork);\n          break;\n        case 13:\n          popSuspenseHandler(interruptedWork);\n          break;\n        case 19:\n          pop(suspenseStackCursor, interruptedWork);\n          break;\n        case 10:\n          popProvider(interruptedWork.type, interruptedWork);\n          break;\n        case 22:\n        case 23:\n          popSuspenseHandler(interruptedWork);\n          popHiddenContext(interruptedWork);\n          null !== current && pop(resumedCache, interruptedWork);\n          break;\n        case 24:\n          popProvider(CacheContext, interruptedWork);\n      }\n    }\n    function shouldProfile(current) {\n      return (current.mode & 2) !== NoMode;\n    }\n    function commitHookLayoutEffects(finishedWork, hookFlags) {\n      shouldProfile(finishedWork)\n        ? (startEffectTimer(),\n          commitHookEffectListMount(hookFlags, finishedWork),\n          recordEffectDuration())\n        : commitHookEffectListMount(hookFlags, finishedWork);\n    }\n    function commitHookLayoutUnmountEffects(\n      finishedWork,\n      nearestMountedAncestor,\n      hookFlags\n    ) {\n      shouldProfile(finishedWork)\n        ? (startEffectTimer(),\n          commitHookEffectListUnmount(\n            hookFlags,\n            finishedWork,\n            nearestMountedAncestor\n          ),\n          recordEffectDuration())\n        : commitHookEffectListUnmount(\n            hookFlags,\n            finishedWork,\n            nearestMountedAncestor\n          );\n    }\n    function commitHookEffectListMount(flags, finishedWork) {\n      try {\n        var updateQueue = finishedWork.updateQueue,\n          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;\n        if (null !== lastEffect) {\n          var firstEffect = lastEffect.next;\n          updateQueue = firstEffect;\n          do {\n            if (\n              (updateQueue.tag & flags) === flags &&\n              ((flags & Passive) !== NoFlags\n                ? null !== injectedProfilingHooks &&\n                  \"function\" ===\n                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted &&\n                  injectedProfilingHooks.markComponentPassiveEffectMountStarted(\n                    finishedWork\n                  )\n                : (flags & Layout) !== NoFlags &&\n                  null !== injectedProfilingHooks &&\n                  \"function\" ===\n                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted &&\n                  injectedProfilingHooks.markComponentLayoutEffectMountStarted(\n                    finishedWork\n                  ),\n              (lastEffect = void 0),\n              (flags & Insertion) !== NoFlags &&\n                (isRunningInsertionEffect = !0),\n              (lastEffect = runWithFiberInDEV(\n                finishedWork,\n                callCreateInDEV,\n                updateQueue\n              )),\n              (flags & Insertion) !== NoFlags &&\n                (isRunningInsertionEffect = !1),\n              (flags & Passive) !== NoFlags\n                ? null !== injectedProfilingHooks &&\n                  \"function\" ===\n                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped &&\n                  injectedProfilingHooks.markComponentPassiveEffectMountStopped()\n                : (flags & Layout) !== NoFlags &&\n                  null !== injectedProfilingHooks &&\n                  \"function\" ===\n                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped &&\n                  injectedProfilingHooks.markComponentLayoutEffectMountStopped(),\n              void 0 !== lastEffect && \"function\" !== typeof lastEffect)\n            ) {\n              var hookName = void 0;\n              hookName =\n                0 !== (updateQueue.tag & Layout)\n                  ? \"useLayoutEffect\"\n                  : 0 !== (updateQueue.tag & Insertion)\n                    ? \"useInsertionEffect\"\n                    : \"useEffect\";\n              var addendum = void 0;\n              addendum =\n                null === lastEffect\n                  ? \" You returned null. If your effect does not require clean up, return undefined (or nothing).\"\n                  : \"function\" === typeof lastEffect.then\n                    ? \"\\n\\nIt looks like you wrote \" +\n                      hookName +\n                      \"(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\\n\\n\" +\n                      hookName +\n                      \"(() => {\\n  async function fetchData() {\\n    // You can await here\\n    const response = await MyAPI.getData(someId);\\n    // ...\\n  }\\n  fetchData();\\n}, [someId]); // Or [] if effect doesn't need props or state\\n\\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching\"\n                    : \" You returned: \" + lastEffect;\n              runWithFiberInDEV(\n                finishedWork,\n                function (n, a) {\n                  console.error(\n                    \"%s must not return anything besides a function, which is used for clean-up.%s\",\n                    n,\n                    a\n                  );\n                },\n                hookName,\n                addendum\n              );\n            }\n            updateQueue = updateQueue.next;\n          } while (updateQueue !== firstEffect);\n        }\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitHookEffectListUnmount(\n      flags,\n      finishedWork,\n      nearestMountedAncestor\n    ) {\n      try {\n        var updateQueue = finishedWork.updateQueue,\n          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;\n        if (null !== lastEffect) {\n          var firstEffect = lastEffect.next;\n          updateQueue = firstEffect;\n          do {\n            if ((updateQueue.tag & flags) === flags) {\n              var inst = updateQueue.inst,\n                destroy = inst.destroy;\n              void 0 !== destroy &&\n                ((inst.destroy = void 0),\n                (flags & Passive) !== NoFlags\n                  ? null !== injectedProfilingHooks &&\n                    \"function\" ===\n                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted &&\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(\n                      finishedWork\n                    )\n                  : (flags & Layout) !== NoFlags &&\n                    null !== injectedProfilingHooks &&\n                    \"function\" ===\n                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted &&\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(\n                      finishedWork\n                    ),\n                (flags & Insertion) !== NoFlags &&\n                  (isRunningInsertionEffect = !0),\n                runWithFiberInDEV(\n                  finishedWork,\n                  callDestroyInDEV,\n                  finishedWork,\n                  nearestMountedAncestor,\n                  destroy\n                ),\n                (flags & Insertion) !== NoFlags &&\n                  (isRunningInsertionEffect = !1),\n                (flags & Passive) !== NoFlags\n                  ? null !== injectedProfilingHooks &&\n                    \"function\" ===\n                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped &&\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped()\n                  : (flags & Layout) !== NoFlags &&\n                    null !== injectedProfilingHooks &&\n                    \"function\" ===\n                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped &&\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());\n            }\n            updateQueue = updateQueue.next;\n          } while (updateQueue !== firstEffect);\n        }\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n      shouldProfile(finishedWork)\n        ? (startEffectTimer(),\n          commitHookEffectListMount(hookFlags, finishedWork),\n          recordEffectDuration())\n        : commitHookEffectListMount(hookFlags, finishedWork);\n    }\n    function commitHookPassiveUnmountEffects(\n      finishedWork,\n      nearestMountedAncestor,\n      hookFlags\n    ) {\n      shouldProfile(finishedWork)\n        ? (startEffectTimer(),\n          commitHookEffectListUnmount(\n            hookFlags,\n            finishedWork,\n            nearestMountedAncestor\n          ),\n          recordEffectDuration())\n        : commitHookEffectListUnmount(\n            hookFlags,\n            finishedWork,\n            nearestMountedAncestor\n          );\n    }\n    function commitClassCallbacks(finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      if (null !== updateQueue) {\n        var instance = finishedWork.stateNode;\n        finishedWork.type.defaultProps ||\n          \"ref\" in finishedWork.memoizedProps ||\n          didWarnAboutReassigningProps ||\n          (instance.props !== finishedWork.memoizedProps &&\n            console.error(\n              \"Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",\n              getComponentNameFromFiber(finishedWork) || \"instance\"\n            ),\n          instance.state !== finishedWork.memoizedState &&\n            console.error(\n              \"Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",\n              getComponentNameFromFiber(finishedWork) || \"instance\"\n            ));\n        try {\n          runWithFiberInDEV(\n            finishedWork,\n            commitCallbacks,\n            updateQueue,\n            instance\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {\n      return instance.getSnapshotBeforeUpdate(prevProps, prevState);\n    }\n    function commitClassSnapshot(finishedWork, current) {\n      var prevProps = current.memoizedProps,\n        prevState = current.memoizedState;\n      current = finishedWork.stateNode;\n      finishedWork.type.defaultProps ||\n        \"ref\" in finishedWork.memoizedProps ||\n        didWarnAboutReassigningProps ||\n        (current.props !== finishedWork.memoizedProps &&\n          console.error(\n            \"Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",\n            getComponentNameFromFiber(finishedWork) || \"instance\"\n          ),\n        current.state !== finishedWork.memoizedState &&\n          console.error(\n            \"Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",\n            getComponentNameFromFiber(finishedWork) || \"instance\"\n          ));\n      try {\n        var resolvedPrevProps = resolveClassComponentProps(\n          finishedWork.type,\n          prevProps,\n          finishedWork.elementType === finishedWork.type\n        );\n        var snapshot = runWithFiberInDEV(\n          finishedWork,\n          callGetSnapshotBeforeUpdates,\n          current,\n          resolvedPrevProps,\n          prevState\n        );\n        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;\n        void 0 !== snapshot ||\n          prevProps.has(finishedWork.type) ||\n          (prevProps.add(finishedWork.type),\n          runWithFiberInDEV(finishedWork, function () {\n            console.error(\n              \"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.\",\n              getComponentNameFromFiber(finishedWork)\n            );\n          }));\n        current.__reactInternalSnapshotBeforeUpdate = snapshot;\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function safelyCallComponentWillUnmount(\n      current,\n      nearestMountedAncestor,\n      instance\n    ) {\n      instance.props = resolveClassComponentProps(\n        current.type,\n        current.memoizedProps\n      );\n      instance.state = current.memoizedState;\n      shouldProfile(current)\n        ? (startEffectTimer(),\n          runWithFiberInDEV(\n            current,\n            callComponentWillUnmountInDEV,\n            current,\n            nearestMountedAncestor,\n            instance\n          ),\n          recordEffectDuration())\n        : runWithFiberInDEV(\n            current,\n            callComponentWillUnmountInDEV,\n            current,\n            nearestMountedAncestor,\n            instance\n          );\n    }\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n      if (null !== ref) {\n        var instance = finishedWork.stateNode;\n        switch (finishedWork.tag) {\n          case 26:\n          case 27:\n          case 5:\n            instance = getPublicInstance(instance);\n        }\n        if (\"function\" === typeof ref)\n          if (shouldProfile(finishedWork))\n            try {\n              startEffectTimer(), (finishedWork.refCleanup = ref(instance));\n            } finally {\n              recordEffectDuration();\n            }\n          else finishedWork.refCleanup = ref(instance);\n        else\n          \"string\" === typeof ref\n            ? console.error(\"String refs are no longer supported.\")\n            : ref.hasOwnProperty(\"current\") ||\n              console.error(\n                \"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().\",\n                getComponentNameFromFiber(finishedWork)\n              ),\n            (ref.current = instance);\n      }\n    }\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        runWithFiberInDEV(current, commitAttachRef, current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref,\n        refCleanup = current.refCleanup;\n      if (null !== ref)\n        if (\"function\" === typeof refCleanup)\n          try {\n            if (shouldProfile(current))\n              try {\n                startEffectTimer(), runWithFiberInDEV(current, refCleanup);\n              } finally {\n                recordEffectDuration(current);\n              }\n            else runWithFiberInDEV(current, refCleanup);\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          } finally {\n            (current.refCleanup = null),\n              (current = current.alternate),\n              null != current && (current.refCleanup = null);\n          }\n        else if (\"function\" === typeof ref)\n          try {\n            if (shouldProfile(current))\n              try {\n                startEffectTimer(), runWithFiberInDEV(current, ref, null);\n              } finally {\n                recordEffectDuration(current);\n              }\n            else runWithFiberInDEV(current, ref, null);\n          } catch (error$3) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error$3);\n          }\n        else ref.current = null;\n    }\n    function commitProfiler(\n      finishedWork,\n      current,\n      commitStartTime,\n      effectDuration\n    ) {\n      var _finishedWork$memoize = finishedWork.memoizedProps,\n        id = _finishedWork$memoize.id,\n        onCommit = _finishedWork$memoize.onCommit;\n      _finishedWork$memoize = _finishedWork$memoize.onRender;\n      current = null === current ? \"mount\" : \"update\";\n      currentUpdateIsNested && (current = \"nested-update\");\n      \"function\" === typeof _finishedWork$memoize &&\n        _finishedWork$memoize(\n          id,\n          current,\n          finishedWork.actualDuration,\n          finishedWork.treeBaseDuration,\n          finishedWork.actualStartTime,\n          commitStartTime\n        );\n      \"function\" === typeof onCommit &&\n        onCommit(\n          finishedWork.memoizedProps.id,\n          current,\n          effectDuration,\n          commitStartTime\n        );\n    }\n    function commitProfilerPostCommitImpl(\n      finishedWork,\n      current,\n      commitStartTime,\n      passiveEffectDuration\n    ) {\n      var _finishedWork$memoize2 = finishedWork.memoizedProps;\n      finishedWork = _finishedWork$memoize2.id;\n      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;\n      current = null === current ? \"mount\" : \"update\";\n      currentUpdateIsNested && (current = \"nested-update\");\n      \"function\" === typeof _finishedWork$memoize2 &&\n        _finishedWork$memoize2(\n          finishedWork,\n          current,\n          passiveEffectDuration,\n          commitStartTime\n        );\n    }\n    function commitHostMount(finishedWork) {\n      var type = finishedWork.type,\n        props = finishedWork.memoizedProps,\n        instance = finishedWork.stateNode;\n      try {\n        runWithFiberInDEV(\n          finishedWork,\n          commitMount,\n          instance,\n          type,\n          props,\n          finishedWork\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitHostUpdate(finishedWork, newProps, oldProps) {\n      try {\n        runWithFiberInDEV(\n          finishedWork,\n          commitUpdate,\n          finishedWork.stateNode,\n          finishedWork.type,\n          oldProps,\n          newProps,\n          finishedWork\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function isHostParent(fiber) {\n      return (\n        5 === fiber.tag ||\n        3 === fiber.tag ||\n        (supportsResources ? 26 === fiber.tag : !1) ||\n        (supportsSingletons ? 27 === fiber.tag : !1) ||\n        4 === fiber.tag\n      );\n    }\n    function getHostSibling(fiber) {\n      a: for (;;) {\n        for (; null === fiber.sibling; ) {\n          if (null === fiber.return || isHostParent(fiber.return)) return null;\n          fiber = fiber.return;\n        }\n        fiber.sibling.return = fiber.return;\n        for (\n          fiber = fiber.sibling;\n          5 !== fiber.tag &&\n          6 !== fiber.tag &&\n          (supportsSingletons ? 27 !== fiber.tag : 1) &&\n          18 !== fiber.tag;\n\n        ) {\n          if (fiber.flags & 2) continue a;\n          if (null === fiber.child || 4 === fiber.tag) continue a;\n          else (fiber.child.return = fiber), (fiber = fiber.child);\n        }\n        if (!(fiber.flags & 2)) return fiber.stateNode;\n      }\n    }\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      if (5 === tag || 6 === tag)\n        (node = node.stateNode),\n          before\n            ? insertInContainerBefore(parent, node, before)\n            : appendChildToContainer(parent, node);\n      else if (\n        !(4 === tag || (supportsSingletons && 27 === tag)) &&\n        ((node = node.child), null !== node)\n      )\n        for (\n          insertOrAppendPlacementNodeIntoContainer(node, before, parent),\n            node = node.sibling;\n          null !== node;\n\n        )\n          insertOrAppendPlacementNodeIntoContainer(node, before, parent),\n            (node = node.sibling);\n    }\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      if (5 === tag || 6 === tag)\n        (node = node.stateNode),\n          before\n            ? insertBefore(parent, node, before)\n            : appendChild(parent, node);\n      else if (\n        !(4 === tag || (supportsSingletons && 27 === tag)) &&\n        ((node = node.child), null !== node)\n      )\n        for (\n          insertOrAppendPlacementNode(node, before, parent),\n            node = node.sibling;\n          null !== node;\n\n        )\n          insertOrAppendPlacementNode(node, before, parent),\n            (node = node.sibling);\n    }\n    function commitPlacement(finishedWork) {\n      if (\n        supportsMutation &&\n        (!supportsSingletons || 27 !== finishedWork.tag)\n      ) {\n        a: {\n          for (var parent = finishedWork.return; null !== parent; ) {\n            if (isHostParent(parent)) {\n              var parentFiber = parent;\n              break a;\n            }\n            parent = parent.return;\n          }\n          throw Error(\n            \"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n        switch (parentFiber.tag) {\n          case 27:\n            if (supportsSingletons) {\n              parent = parentFiber.stateNode;\n              parentFiber = getHostSibling(finishedWork);\n              insertOrAppendPlacementNode(finishedWork, parentFiber, parent);\n              break;\n            }\n          case 5:\n            parent = parentFiber.stateNode;\n            parentFiber.flags & 32 &&\n              (resetTextContent(parent), (parentFiber.flags &= -33));\n            parentFiber = getHostSibling(finishedWork);\n            insertOrAppendPlacementNode(finishedWork, parentFiber, parent);\n            break;\n          case 3:\n          case 4:\n            parent = parentFiber.stateNode.containerInfo;\n            parentFiber = getHostSibling(finishedWork);\n            insertOrAppendPlacementNodeIntoContainer(\n              finishedWork,\n              parentFiber,\n              parent\n            );\n            break;\n          default:\n            throw Error(\n              \"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.\"\n            );\n        }\n      }\n    }\n    function commitHostPortalContainerChildren(\n      portal,\n      finishedWork,\n      pendingChildren\n    ) {\n      portal = portal.containerInfo;\n      try {\n        runWithFiberInDEV(\n          finishedWork,\n          replaceContainerChildren,\n          portal,\n          pendingChildren\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitBeforeMutationEffects(root, firstChild) {\n      prepareForCommit(root.containerInfo);\n      for (nextEffect = firstChild; null !== nextEffect; )\n        if (\n          ((root = nextEffect),\n          (firstChild = root.child),\n          0 !== (root.subtreeFlags & 1028) && null !== firstChild)\n        )\n          (firstChild.return = root), (nextEffect = firstChild);\n        else\n          for (; null !== nextEffect; ) {\n            firstChild = root = nextEffect;\n            var current = firstChild.alternate,\n              flags = firstChild.flags;\n            switch (firstChild.tag) {\n              case 0:\n                break;\n              case 11:\n              case 15:\n                break;\n              case 1:\n                0 !== (flags & 1024) &&\n                  null !== current &&\n                  commitClassSnapshot(firstChild, current);\n                break;\n              case 3:\n                0 !== (flags & 1024) &&\n                  supportsMutation &&\n                  clearContainer(firstChild.stateNode.containerInfo);\n                break;\n              case 5:\n              case 26:\n              case 27:\n              case 6:\n              case 4:\n              case 17:\n                break;\n              default:\n                if (0 !== (flags & 1024))\n                  throw Error(\n                    \"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\"\n                  );\n            }\n            firstChild = root.sibling;\n            if (null !== firstChild) {\n              firstChild.return = root.return;\n              nextEffect = firstChild;\n              break;\n            }\n            nextEffect = root.return;\n          }\n      root = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = !1;\n      return root;\n    }\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          flags & 4 &&\n            commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n          break;\n        case 1:\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          if (flags & 4)\n            if (((finishedRoot = finishedWork.stateNode), null === current))\n              finishedWork.type.defaultProps ||\n                \"ref\" in finishedWork.memoizedProps ||\n                didWarnAboutReassigningProps ||\n                (finishedRoot.props !== finishedWork.memoizedProps &&\n                  console.error(\n                    \"Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",\n                    getComponentNameFromFiber(finishedWork) || \"instance\"\n                  ),\n                finishedRoot.state !== finishedWork.memoizedState &&\n                  console.error(\n                    \"Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",\n                    getComponentNameFromFiber(finishedWork) || \"instance\"\n                  )),\n                shouldProfile(finishedWork)\n                  ? (startEffectTimer(),\n                    runWithFiberInDEV(\n                      finishedWork,\n                      callComponentDidMountInDEV,\n                      finishedWork,\n                      finishedRoot\n                    ),\n                    recordEffectDuration())\n                  : runWithFiberInDEV(\n                      finishedWork,\n                      callComponentDidMountInDEV,\n                      finishedWork,\n                      finishedRoot\n                    );\n            else {\n              var prevProps = resolveClassComponentProps(\n                finishedWork.type,\n                current.memoizedProps\n              );\n              current = current.memoizedState;\n              finishedWork.type.defaultProps ||\n                \"ref\" in finishedWork.memoizedProps ||\n                didWarnAboutReassigningProps ||\n                (finishedRoot.props !== finishedWork.memoizedProps &&\n                  console.error(\n                    \"Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",\n                    getComponentNameFromFiber(finishedWork) || \"instance\"\n                  ),\n                finishedRoot.state !== finishedWork.memoizedState &&\n                  console.error(\n                    \"Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",\n                    getComponentNameFromFiber(finishedWork) || \"instance\"\n                  ));\n              shouldProfile(finishedWork)\n                ? (startEffectTimer(),\n                  runWithFiberInDEV(\n                    finishedWork,\n                    callComponentDidUpdateInDEV,\n                    finishedWork,\n                    finishedRoot,\n                    prevProps,\n                    current,\n                    finishedRoot.__reactInternalSnapshotBeforeUpdate\n                  ),\n                  recordEffectDuration())\n                : runWithFiberInDEV(\n                    finishedWork,\n                    callComponentDidUpdateInDEV,\n                    finishedWork,\n                    finishedRoot,\n                    prevProps,\n                    current,\n                    finishedRoot.__reactInternalSnapshotBeforeUpdate\n                  );\n            }\n          flags & 64 && commitClassCallbacks(finishedWork);\n          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        case 3:\n          current = pushNestedEffectDurations();\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          if (\n            flags & 64 &&\n            ((flags = finishedWork.updateQueue), null !== flags)\n          ) {\n            prevProps = null;\n            if (null !== finishedWork.child)\n              switch (finishedWork.child.tag) {\n                case 27:\n                case 5:\n                  prevProps = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n                case 1:\n                  prevProps = finishedWork.child.stateNode;\n              }\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitCallbacks,\n                flags,\n                prevProps\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n          finishedRoot.effectDuration += popNestedEffectDurations(current);\n          break;\n        case 26:\n          if (supportsResources) {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        case 27:\n        case 5:\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          null === current && flags & 4 && commitHostMount(finishedWork);\n          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        case 12:\n          if (flags & 4) {\n            flags = pushNestedEffectDurations();\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            finishedRoot = finishedWork.stateNode;\n            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitProfiler,\n                finishedWork,\n                current,\n                commitStartTime,\n                finishedRoot.effectDuration\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          break;\n        case 13:\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          flags & 4 &&\n            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        case 22:\n          prevProps =\n            null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;\n          if (!prevProps) {\n            current =\n              (null !== current && null !== current.memoizedState) ||\n              offscreenSubtreeWasHidden;\n            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,\n              prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = prevProps;\n            (offscreenSubtreeWasHidden = current) &&\n            !prevOffscreenSubtreeWasHidden\n              ? recursivelyTraverseReappearLayoutEffects(\n                  finishedRoot,\n                  finishedWork,\n                  0 !== (finishedWork.subtreeFlags & 8772)\n                )\n              : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          }\n          flags & 512 &&\n            (\"manual\" === finishedWork.memoizedProps.mode\n              ? safelyAttachRef(finishedWork, finishedWork.return)\n              : safelyDetachRef(finishedWork, finishedWork.return));\n          break;\n        default:\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      }\n    }\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n      null !== alternate &&\n        ((fiber.alternate = null), detachFiberAfterEffects(alternate));\n      fiber.child = null;\n      fiber.deletions = null;\n      fiber.sibling = null;\n      5 === fiber.tag &&\n        ((alternate = fiber.stateNode),\n        null !== alternate && detachDeletedInstance(alternate));\n      fiber.stateNode = null;\n      fiber._debugOwner = null;\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      fiber.updateQueue = null;\n    }\n    function recursivelyTraverseDeletionEffects(\n      finishedRoot,\n      nearestMountedAncestor,\n      parent\n    ) {\n      for (parent = parent.child; null !== parent; )\n        commitDeletionEffectsOnFiber(\n          finishedRoot,\n          nearestMountedAncestor,\n          parent\n        ),\n          (parent = parent.sibling);\n    }\n    function commitDeletionEffectsOnFiber(\n      finishedRoot,\n      nearestMountedAncestor,\n      deletedFiber\n    ) {\n      if (\n        injectedHook &&\n        \"function\" === typeof injectedHook.onCommitFiberUnmount\n      )\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);\n        } catch (err) {\n          hasLoggedError ||\n            ((hasLoggedError = !0),\n            console.error(\n              \"React instrumentation encountered an error: %s\",\n              err\n            ));\n        }\n      switch (deletedFiber.tag) {\n        case 26:\n          if (supportsResources) {\n            offscreenSubtreeWasHidden ||\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            deletedFiber.memoizedState\n              ? releaseResource(deletedFiber.memoizedState)\n              : deletedFiber.stateNode &&\n                unmountHoistable(deletedFiber.stateNode);\n            break;\n          }\n        case 27:\n          if (supportsSingletons) {\n            offscreenSubtreeWasHidden ||\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            var prevHostParent = hostParent,\n              prevHostParentIsContainer = hostParentIsContainer;\n            hostParent = deletedFiber.stateNode;\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            releaseSingletonInstance(deletedFiber.stateNode);\n            hostParent = prevHostParent;\n            hostParentIsContainer = prevHostParentIsContainer;\n            break;\n          }\n        case 5:\n          offscreenSubtreeWasHidden ||\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        case 6:\n          if (supportsMutation) {\n            if (\n              ((prevHostParent = hostParent),\n              (prevHostParentIsContainer = hostParentIsContainer),\n              (hostParent = null),\n              recursivelyTraverseDeletionEffects(\n                finishedRoot,\n                nearestMountedAncestor,\n                deletedFiber\n              ),\n              (hostParent = prevHostParent),\n              (hostParentIsContainer = prevHostParentIsContainer),\n              null !== hostParent)\n            )\n              if (hostParentIsContainer)\n                try {\n                  runWithFiberInDEV(\n                    deletedFiber,\n                    removeChildFromContainer,\n                    hostParent,\n                    deletedFiber.stateNode\n                  );\n                } catch (error) {\n                  captureCommitPhaseError(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    error\n                  );\n                }\n              else\n                try {\n                  runWithFiberInDEV(\n                    deletedFiber,\n                    removeChild,\n                    hostParent,\n                    deletedFiber.stateNode\n                  );\n                } catch (error) {\n                  captureCommitPhaseError(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    error\n                  );\n                }\n          } else\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n          break;\n        case 18:\n          supportsMutation &&\n            null !== hostParent &&\n            (hostParentIsContainer\n              ? clearSuspenseBoundaryFromContainer(\n                  hostParent,\n                  deletedFiber.stateNode\n                )\n              : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));\n          break;\n        case 4:\n          supportsMutation\n            ? ((prevHostParent = hostParent),\n              (prevHostParentIsContainer = hostParentIsContainer),\n              (hostParent = deletedFiber.stateNode.containerInfo),\n              (hostParentIsContainer = !0),\n              recursivelyTraverseDeletionEffects(\n                finishedRoot,\n                nearestMountedAncestor,\n                deletedFiber\n              ),\n              (hostParent = prevHostParent),\n              (hostParentIsContainer = prevHostParentIsContainer))\n            : (supportsPersistence &&\n                commitHostPortalContainerChildren(\n                  deletedFiber.stateNode,\n                  deletedFiber,\n                  createContainerChildSet()\n                ),\n              recursivelyTraverseDeletionEffects(\n                finishedRoot,\n                nearestMountedAncestor,\n                deletedFiber\n              ));\n          break;\n        case 0:\n        case 11:\n        case 14:\n        case 15:\n          offscreenSubtreeWasHidden ||\n            commitHookEffectListUnmount(\n              Insertion,\n              deletedFiber,\n              nearestMountedAncestor\n            );\n          offscreenSubtreeWasHidden ||\n            commitHookLayoutUnmountEffects(\n              deletedFiber,\n              nearestMountedAncestor,\n              Layout\n            );\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          break;\n        case 1:\n          offscreenSubtreeWasHidden ||\n            (safelyDetachRef(deletedFiber, nearestMountedAncestor),\n            (prevHostParent = deletedFiber.stateNode),\n            \"function\" === typeof prevHostParent.componentWillUnmount &&\n              safelyCallComponentWillUnmount(\n                deletedFiber,\n                nearestMountedAncestor,\n                prevHostParent\n              ));\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          break;\n        case 21:\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          break;\n        case 22:\n          offscreenSubtreeWasHidden ||\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          offscreenSubtreeWasHidden =\n            (prevHostParent = offscreenSubtreeWasHidden) ||\n            null !== deletedFiber.memoizedState;\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          offscreenSubtreeWasHidden = prevHostParent;\n          break;\n        default:\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n      }\n    }\n    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n      if (\n        supportsHydration &&\n        null === finishedWork.memoizedState &&\n        ((finishedRoot = finishedWork.alternate),\n        null !== finishedRoot &&\n          ((finishedRoot = finishedRoot.memoizedState),\n          null !== finishedRoot &&\n            ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))\n      )\n        try {\n          runWithFiberInDEV(\n            finishedWork,\n            commitHydratedSuspenseInstance,\n            finishedRoot\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n    }\n    function getRetryCache(finishedWork) {\n      switch (finishedWork.tag) {\n        case 13:\n        case 19:\n          var retryCache = finishedWork.stateNode;\n          null === retryCache &&\n            (retryCache = finishedWork.stateNode = new PossiblyWeakSet());\n          return retryCache;\n        case 22:\n          return (\n            (finishedWork = finishedWork.stateNode),\n            (retryCache = finishedWork._retryCache),\n            null === retryCache &&\n              (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),\n            retryCache\n          );\n        default:\n          throw Error(\n            \"Unexpected Suspense handler tag (\" +\n              finishedWork.tag +\n              \"). This is a bug in React.\"\n          );\n      }\n    }\n    function attachSuspenseRetryListeners(finishedWork, wakeables) {\n      var retryCache = getRetryCache(finishedWork);\n      wakeables.forEach(function (wakeable) {\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n        if (!retryCache.has(wakeable)) {\n          retryCache.add(wakeable);\n          if (isDevToolsPresent)\n            if (null !== inProgressLanes && null !== inProgressRoot)\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            else\n              throw Error(\n                \"Expected finished root and lanes to be set. This is a bug in React.\"\n              );\n          wakeable.then(retry, retry);\n        }\n      });\n    }\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      commitMutationEffectsOnFiber(finishedWork, root);\n      inProgressRoot = inProgressLanes = null;\n    }\n    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {\n      var deletions = parentFiber.deletions;\n      if (null !== deletions)\n        for (var i = 0; i < deletions.length; i++) {\n          var root = root$jscomp$0,\n            returnFiber = parentFiber,\n            deletedFiber = deletions[i];\n          if (supportsMutation) {\n            var parent = returnFiber;\n            a: for (; null !== parent; ) {\n              switch (parent.tag) {\n                case 27:\n                case 5:\n                  hostParent = parent.stateNode;\n                  hostParentIsContainer = !1;\n                  break a;\n                case 3:\n                  hostParent = parent.stateNode.containerInfo;\n                  hostParentIsContainer = !0;\n                  break a;\n                case 4:\n                  hostParent = parent.stateNode.containerInfo;\n                  hostParentIsContainer = !0;\n                  break a;\n              }\n              parent = parent.return;\n            }\n            if (null === hostParent)\n              throw Error(\n                \"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\"\n              );\n            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n            hostParent = null;\n            hostParentIsContainer = !1;\n          } else commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n          root = deletedFiber;\n          returnFiber = root.alternate;\n          null !== returnFiber && (returnFiber.return = null);\n          root.return = null;\n        }\n      if (parentFiber.subtreeFlags & 13878)\n        for (parentFiber = parentFiber.child; null !== parentFiber; )\n          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),\n            (parentFiber = parentFiber.sibling);\n    }\n    function commitMutationEffectsOnFiber(finishedWork, root) {\n      var current = finishedWork.alternate,\n        flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 14:\n        case 15:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          flags & 4 &&\n            (commitHookEffectListUnmount(\n              Insertion | HasEffect,\n              finishedWork,\n              finishedWork.return\n            ),\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork),\n            commitHookLayoutUnmountEffects(\n              finishedWork,\n              finishedWork.return,\n              Layout | HasEffect\n            ));\n          break;\n        case 1:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          flags & 512 &&\n            (offscreenSubtreeWasHidden ||\n              null === current ||\n              safelyDetachRef(current, current.return));\n          flags & 64 &&\n            offscreenSubtreeIsHidden &&\n            ((finishedWork = finishedWork.updateQueue),\n            null !== finishedWork &&\n              ((flags = finishedWork.callbacks),\n              null !== flags &&\n                ((current = finishedWork.shared.hiddenCallbacks),\n                (finishedWork.shared.hiddenCallbacks =\n                  null === current ? flags : current.concat(flags)))));\n          break;\n        case 26:\n          if (supportsResources) {\n            var hoistableRoot = currentHoistableRoot;\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            flags & 512 &&\n              (offscreenSubtreeWasHidden ||\n                null === current ||\n                safelyDetachRef(current, current.return));\n            flags & 4 &&\n              ((flags = null !== current ? current.memoizedState : null),\n              (root = finishedWork.memoizedState),\n              null === current\n                ? null === root\n                  ? null === finishedWork.stateNode\n                    ? (finishedWork.stateNode = hydrateHoistable(\n                        hoistableRoot,\n                        finishedWork.type,\n                        finishedWork.memoizedProps,\n                        finishedWork\n                      ))\n                    : mountHoistable(\n                        hoistableRoot,\n                        finishedWork.type,\n                        finishedWork.stateNode\n                      )\n                  : (finishedWork.stateNode = acquireResource(\n                      hoistableRoot,\n                      root,\n                      finishedWork.memoizedProps\n                    ))\n                : flags !== root\n                  ? (null === flags\n                      ? null !== current.stateNode &&\n                        unmountHoistable(current.stateNode)\n                      : releaseResource(flags),\n                    null === root\n                      ? mountHoistable(\n                          hoistableRoot,\n                          finishedWork.type,\n                          finishedWork.stateNode\n                        )\n                      : acquireResource(\n                          hoistableRoot,\n                          root,\n                          finishedWork.memoizedProps\n                        ))\n                  : null === root &&\n                    null !== finishedWork.stateNode &&\n                    commitHostUpdate(\n                      finishedWork,\n                      finishedWork.memoizedProps,\n                      current.memoizedProps\n                    ));\n            break;\n          }\n        case 27:\n          if (\n            supportsSingletons &&\n            flags & 4 &&\n            null === finishedWork.alternate\n          ) {\n            hoistableRoot = finishedWork.stateNode;\n            var props = finishedWork.memoizedProps;\n            try {\n              clearSingleton(hoistableRoot),\n                runWithFiberInDEV(\n                  finishedWork,\n                  acquireSingletonInstance,\n                  finishedWork.type,\n                  props,\n                  hoistableRoot,\n                  finishedWork\n                );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        case 5:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          flags & 512 &&\n            (offscreenSubtreeWasHidden ||\n              null === current ||\n              safelyDetachRef(current, current.return));\n          if (supportsMutation) {\n            if (finishedWork.flags & 32) {\n              root = finishedWork.stateNode;\n              try {\n                runWithFiberInDEV(finishedWork, resetTextContent, root);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n            flags & 4 &&\n              null != finishedWork.stateNode &&\n              ((root = finishedWork.memoizedProps),\n              commitHostUpdate(\n                finishedWork,\n                root,\n                null !== current ? current.memoizedProps : root\n              ));\n            flags & 1024 &&\n              ((needsFormReset = !0),\n              \"form\" !== finishedWork.type &&\n                console.error(\n                  \"Unexpected host component type. Expected a form. This is a bug in React.\"\n                ));\n          }\n          break;\n        case 6:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          if (flags & 4 && supportsMutation) {\n            if (null === finishedWork.stateNode)\n              throw Error(\n                \"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.\"\n              );\n            flags = finishedWork.memoizedProps;\n            current = null !== current ? current.memoizedProps : flags;\n            root = finishedWork.stateNode;\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitTextUpdate,\n                root,\n                current,\n                flags\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n          break;\n        case 3:\n          hoistableRoot = pushNestedEffectDurations();\n          supportsResources\n            ? (prepareToCommitHoistables(),\n              (props = currentHoistableRoot),\n              (currentHoistableRoot = getHoistableRoot(root.containerInfo)),\n              recursivelyTraverseMutationEffects(root, finishedWork),\n              (currentHoistableRoot = props))\n            : recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          if (flags & 4) {\n            if (\n              supportsMutation &&\n              supportsHydration &&\n              null !== current &&\n              current.memoizedState.isDehydrated\n            )\n              try {\n                runWithFiberInDEV(\n                  finishedWork,\n                  commitHydratedContainer,\n                  root.containerInfo\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            if (supportsPersistence) {\n              flags = root.containerInfo;\n              current = root.pendingChildren;\n              try {\n                runWithFiberInDEV(\n                  finishedWork,\n                  replaceContainerChildren,\n                  flags,\n                  current\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n          needsFormReset &&\n            ((needsFormReset = !1), recursivelyResetForms(finishedWork));\n          root.effectDuration += popNestedEffectDurations(hoistableRoot);\n          break;\n        case 4:\n          supportsResources\n            ? ((current = currentHoistableRoot),\n              (currentHoistableRoot = getHoistableRoot(\n                finishedWork.stateNode.containerInfo\n              )),\n              recursivelyTraverseMutationEffects(root, finishedWork),\n              commitReconciliationEffects(finishedWork),\n              (currentHoistableRoot = current))\n            : (recursivelyTraverseMutationEffects(root, finishedWork),\n              commitReconciliationEffects(finishedWork));\n          flags & 4 &&\n            supportsPersistence &&\n            commitHostPortalContainerChildren(\n              finishedWork.stateNode,\n              finishedWork,\n              finishedWork.stateNode.pendingChildren\n            );\n          break;\n        case 12:\n          flags = pushNestedEffectDurations();\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          finishedWork.stateNode.effectDuration +=\n            bubbleNestedEffectDurations(flags);\n          break;\n        case 13:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          finishedWork.child.flags & 8192 &&\n            (null !== finishedWork.memoizedState) !==\n              (null !== current && null !== current.memoizedState) &&\n            (globalMostRecentFallbackTime = now$1());\n          flags & 4 &&\n            ((flags = finishedWork.updateQueue),\n            null !== flags &&\n              ((finishedWork.updateQueue = null),\n              attachSuspenseRetryListeners(finishedWork, flags)));\n          break;\n        case 22:\n          flags & 512 &&\n            (offscreenSubtreeWasHidden ||\n              null === current ||\n              safelyDetachRef(current, current.return));\n          hoistableRoot = null !== finishedWork.memoizedState;\n          var wasHidden = null !== current && null !== current.memoizedState,\n            prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,\n            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden =\n            prevOffscreenSubtreeIsHidden || hoistableRoot;\n          offscreenSubtreeWasHidden =\n            prevOffscreenSubtreeWasHidden || wasHidden;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          commitReconciliationEffects(finishedWork);\n          root = finishedWork.stateNode;\n          root._current = finishedWork;\n          root._visibility &= -3;\n          root._visibility |= root._pendingVisibility & 2;\n          if (\n            flags & 8192 &&\n            ((root._visibility = hoistableRoot\n              ? root._visibility & -2\n              : root._visibility | 1),\n            hoistableRoot &&\n              ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),\n              null === current ||\n                wasHidden ||\n                root ||\n                recursivelyTraverseDisappearLayoutEffects(finishedWork)),\n            supportsMutation &&\n              (null === finishedWork.memoizedProps ||\n                \"manual\" !== finishedWork.memoizedProps.mode))\n          )\n            a: if (((current = null), supportsMutation))\n              for (root = finishedWork; ; ) {\n                if (\n                  5 === root.tag ||\n                  (supportsResources && 26 === root.tag) ||\n                  (supportsSingletons && 27 === root.tag)\n                ) {\n                  if (null === current) {\n                    wasHidden = current = root;\n                    try {\n                      (props = wasHidden.stateNode),\n                        hoistableRoot\n                          ? runWithFiberInDEV(wasHidden, hideInstance, props)\n                          : runWithFiberInDEV(\n                              wasHidden,\n                              unhideInstance,\n                              wasHidden.stateNode,\n                              wasHidden.memoizedProps\n                            );\n                    } catch (error) {\n                      captureCommitPhaseError(\n                        wasHidden,\n                        wasHidden.return,\n                        error\n                      );\n                    }\n                  }\n                } else if (6 === root.tag) {\n                  if (null === current) {\n                    wasHidden = root;\n                    try {\n                      var instance = wasHidden.stateNode;\n                      hoistableRoot\n                        ? runWithFiberInDEV(\n                            wasHidden,\n                            hideTextInstance,\n                            instance\n                          )\n                        : runWithFiberInDEV(\n                            wasHidden,\n                            unhideTextInstance,\n                            instance,\n                            wasHidden.memoizedProps\n                          );\n                    } catch (error) {\n                      captureCommitPhaseError(\n                        wasHidden,\n                        wasHidden.return,\n                        error\n                      );\n                    }\n                  }\n                } else if (\n                  ((22 !== root.tag && 23 !== root.tag) ||\n                    null === root.memoizedState ||\n                    root === finishedWork) &&\n                  null !== root.child\n                ) {\n                  root.child.return = root;\n                  root = root.child;\n                  continue;\n                }\n                if (root === finishedWork) break a;\n                for (; null === root.sibling; ) {\n                  if (null === root.return || root.return === finishedWork)\n                    break a;\n                  current === root && (current = null);\n                  root = root.return;\n                }\n                current === root && (current = null);\n                root.sibling.return = root.return;\n                root = root.sibling;\n              }\n          flags & 4 &&\n            ((flags = finishedWork.updateQueue),\n            null !== flags &&\n              ((current = flags.retryQueue),\n              null !== current &&\n                ((flags.retryQueue = null),\n                attachSuspenseRetryListeners(finishedWork, current))));\n          break;\n        case 19:\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          flags & 4 &&\n            ((flags = finishedWork.updateQueue),\n            null !== flags &&\n              ((finishedWork.updateQueue = null),\n              attachSuspenseRetryListeners(finishedWork, flags)));\n          break;\n        case 21:\n          break;\n        default:\n          recursivelyTraverseMutationEffects(root, finishedWork),\n            commitReconciliationEffects(finishedWork);\n      }\n    }\n    function commitReconciliationEffects(finishedWork) {\n      var flags = finishedWork.flags;\n      if (flags & 2) {\n        try {\n          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        finishedWork.flags &= -3;\n      }\n      flags & 4096 && (finishedWork.flags &= -4097);\n    }\n    function recursivelyResetForms(parentFiber) {\n      if (parentFiber.subtreeFlags & 1024)\n        for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n          var fiber = parentFiber;\n          recursivelyResetForms(fiber);\n          5 === fiber.tag &&\n            fiber.flags & 1024 &&\n            resetFormInstance(fiber.stateNode);\n          parentFiber = parentFiber.sibling;\n        }\n    }\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork);\n      inProgressRoot = inProgressLanes = null;\n    }\n    function recursivelyTraverseLayoutEffects(root, parentFiber) {\n      if (parentFiber.subtreeFlags & 8772)\n        for (parentFiber = parentFiber.child; null !== parentFiber; )\n          commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),\n            (parentFiber = parentFiber.sibling);\n    }\n    function disappearLayoutEffects(finishedWork) {\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 14:\n        case 15:\n          commitHookLayoutUnmountEffects(\n            finishedWork,\n            finishedWork.return,\n            Layout\n          );\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        case 1:\n          safelyDetachRef(finishedWork, finishedWork.return);\n          var instance = finishedWork.stateNode;\n          \"function\" === typeof instance.componentWillUnmount &&\n            safelyCallComponentWillUnmount(\n              finishedWork,\n              finishedWork.return,\n              instance\n            );\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        case 26:\n        case 27:\n        case 5:\n          safelyDetachRef(finishedWork, finishedWork.return);\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        case 22:\n          safelyDetachRef(finishedWork, finishedWork.return);\n          null === finishedWork.memoizedState &&\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        default:\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      }\n    }\n    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n      for (parentFiber = parentFiber.child; null !== parentFiber; )\n        disappearLayoutEffects(parentFiber),\n          (parentFiber = parentFiber.sibling);\n    }\n    function reappearLayoutEffects(\n      finishedRoot,\n      current,\n      finishedWork,\n      includeWorkInProgressEffects\n    ) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          commitHookLayoutEffects(finishedWork, Layout);\n          break;\n        case 1:\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          current = finishedWork.stateNode;\n          \"function\" === typeof current.componentDidMount &&\n            runWithFiberInDEV(\n              finishedWork,\n              callComponentDidMountInDEV,\n              finishedWork,\n              current\n            );\n          current = finishedWork.updateQueue;\n          if (null !== current) {\n            finishedRoot = finishedWork.stateNode;\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitHiddenCallbacks,\n                current,\n                finishedRoot\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n          includeWorkInProgressEffects &&\n            flags & 64 &&\n            commitClassCallbacks(finishedWork);\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        case 26:\n        case 27:\n        case 5:\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          includeWorkInProgressEffects &&\n            null === current &&\n            flags & 4 &&\n            commitHostMount(finishedWork);\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        case 12:\n          if (includeWorkInProgressEffects && flags & 4) {\n            flags = pushNestedEffectDurations();\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects\n            );\n            includeWorkInProgressEffects = finishedWork.stateNode;\n            includeWorkInProgressEffects.effectDuration +=\n              bubbleNestedEffectDurations(flags);\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitProfiler,\n                finishedWork,\n                current,\n                commitStartTime,\n                includeWorkInProgressEffects.effectDuration\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          } else\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects\n            );\n          break;\n        case 13:\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          includeWorkInProgressEffects &&\n            flags & 4 &&\n            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        case 22:\n          null === finishedWork.memoizedState &&\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects\n            );\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        default:\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n      }\n    }\n    function recursivelyTraverseReappearLayoutEffects(\n      finishedRoot,\n      parentFiber,\n      includeWorkInProgressEffects\n    ) {\n      includeWorkInProgressEffects =\n        includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);\n      for (parentFiber = parentFiber.child; null !== parentFiber; )\n        reappearLayoutEffects(\n          finishedRoot,\n          parentFiber.alternate,\n          parentFiber,\n          includeWorkInProgressEffects\n        ),\n          (parentFiber = parentFiber.sibling);\n    }\n    function commitOffscreenPassiveMountEffects(current, finishedWork) {\n      var previousCache = null;\n      null !== current &&\n        null !== current.memoizedState &&\n        null !== current.memoizedState.cachePool &&\n        (previousCache = current.memoizedState.cachePool.pool);\n      current = null;\n      null !== finishedWork.memoizedState &&\n        null !== finishedWork.memoizedState.cachePool &&\n        (current = finishedWork.memoizedState.cachePool.pool);\n      current !== previousCache &&\n        (null != current && retainCache(current),\n        null != previousCache && releaseCache(previousCache));\n    }\n    function commitCachePassiveMountEffect(current, finishedWork) {\n      current = null;\n      null !== finishedWork.alternate &&\n        (current = finishedWork.alternate.memoizedState.cache);\n      finishedWork = finishedWork.memoizedState.cache;\n      finishedWork !== current &&\n        (retainCache(finishedWork), null != current && releaseCache(current));\n    }\n    function recursivelyTraversePassiveMountEffects(\n      root,\n      parentFiber,\n      committedLanes,\n      committedTransitions\n    ) {\n      if (parentFiber.subtreeFlags & 10256)\n        for (parentFiber = parentFiber.child; null !== parentFiber; )\n          commitPassiveMountOnFiber(\n            root,\n            parentFiber,\n            committedLanes,\n            committedTransitions\n          ),\n            (parentFiber = parentFiber.sibling);\n    }\n    function commitPassiveMountOnFiber(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions\n    ) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions\n          );\n          flags & 2048 &&\n            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n          break;\n        case 3:\n          var prevEffectDuration = pushNestedEffectDurations();\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions\n          );\n          flags & 2048 &&\n            ((committedLanes = null),\n            null !== finishedWork.alternate &&\n              (committedLanes = finishedWork.alternate.memoizedState.cache),\n            (finishedWork = finishedWork.memoizedState.cache),\n            finishedWork !== committedLanes &&\n              (retainCache(finishedWork),\n              null != committedLanes && releaseCache(committedLanes)));\n          finishedRoot.passiveEffectDuration +=\n            popNestedEffectDurations(prevEffectDuration);\n          break;\n        case 12:\n          if (flags & 2048) {\n            prevEffectDuration = pushNestedEffectDurations();\n            recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions\n            );\n            finishedRoot = finishedWork.stateNode;\n            finishedRoot.passiveEffectDuration +=\n              bubbleNestedEffectDurations(prevEffectDuration);\n            try {\n              runWithFiberInDEV(\n                finishedWork,\n                commitProfilerPostCommitImpl,\n                finishedWork,\n                finishedWork.alternate,\n                commitStartTime,\n                finishedRoot.passiveEffectDuration\n              );\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          } else\n            recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions\n            );\n          break;\n        case 23:\n          break;\n        case 22:\n          prevEffectDuration = finishedWork.stateNode;\n          null !== finishedWork.memoizedState\n            ? prevEffectDuration._visibility & 4\n              ? recursivelyTraversePassiveMountEffects(\n                  finishedRoot,\n                  finishedWork,\n                  committedLanes,\n                  committedTransitions\n                )\n              : recursivelyTraverseAtomicPassiveEffects(\n                  finishedRoot,\n                  finishedWork\n                )\n            : prevEffectDuration._visibility & 4\n              ? recursivelyTraversePassiveMountEffects(\n                  finishedRoot,\n                  finishedWork,\n                  committedLanes,\n                  committedTransitions\n                )\n              : ((prevEffectDuration._visibility |= 4),\n                recursivelyTraverseReconnectPassiveEffects(\n                  finishedRoot,\n                  finishedWork,\n                  committedLanes,\n                  committedTransitions,\n                  0 !== (finishedWork.subtreeFlags & 10256)\n                ));\n          flags & 2048 &&\n            commitOffscreenPassiveMountEffects(\n              finishedWork.alternate,\n              finishedWork\n            );\n          break;\n        case 24:\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions\n          );\n          flags & 2048 &&\n            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);\n          break;\n        default:\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions\n          );\n      }\n    }\n    function recursivelyTraverseReconnectPassiveEffects(\n      finishedRoot,\n      parentFiber,\n      committedLanes,\n      committedTransitions,\n      includeWorkInProgressEffects\n    ) {\n      includeWorkInProgressEffects =\n        includeWorkInProgressEffects &&\n        0 !== (parentFiber.subtreeFlags & 10256);\n      for (parentFiber = parentFiber.child; null !== parentFiber; )\n        reconnectPassiveEffects(\n          finishedRoot,\n          parentFiber,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects\n        ),\n          (parentFiber = parentFiber.sibling);\n    }\n    function reconnectPassiveEffects(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions,\n      includeWorkInProgressEffects\n    ) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects\n          );\n          commitHookPassiveMountEffects(finishedWork, Passive);\n          break;\n        case 23:\n          break;\n        case 22:\n          var _instance2 = finishedWork.stateNode;\n          null !== finishedWork.memoizedState\n            ? _instance2._visibility & 4\n              ? recursivelyTraverseReconnectPassiveEffects(\n                  finishedRoot,\n                  finishedWork,\n                  committedLanes,\n                  committedTransitions,\n                  includeWorkInProgressEffects\n                )\n              : recursivelyTraverseAtomicPassiveEffects(\n                  finishedRoot,\n                  finishedWork\n                )\n            : ((_instance2._visibility |= 4),\n              recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n                includeWorkInProgressEffects\n              ));\n          includeWorkInProgressEffects &&\n            flags & 2048 &&\n            commitOffscreenPassiveMountEffects(\n              finishedWork.alternate,\n              finishedWork\n            );\n          break;\n        case 24:\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects\n          );\n          includeWorkInProgressEffects &&\n            flags & 2048 &&\n            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);\n          break;\n        default:\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects\n          );\n      }\n    }\n    function recursivelyTraverseAtomicPassiveEffects(\n      finishedRoot$jscomp$0,\n      parentFiber\n    ) {\n      if (parentFiber.subtreeFlags & 10256)\n        for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n          var finishedRoot = finishedRoot$jscomp$0,\n            finishedWork = parentFiber,\n            flags = finishedWork.flags;\n          switch (finishedWork.tag) {\n            case 22:\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n              flags & 2048 &&\n                commitOffscreenPassiveMountEffects(\n                  finishedWork.alternate,\n                  finishedWork\n                );\n              break;\n            case 24:\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n              flags & 2048 &&\n                commitCachePassiveMountEffect(\n                  finishedWork.alternate,\n                  finishedWork\n                );\n              break;\n            default:\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n          }\n          parentFiber = parentFiber.sibling;\n        }\n    }\n    function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n      if (parentFiber.subtreeFlags & suspenseyCommitFlag)\n        for (parentFiber = parentFiber.child; null !== parentFiber; )\n          accumulateSuspenseyCommitOnFiber(parentFiber),\n            (parentFiber = parentFiber.sibling);\n    }\n    function accumulateSuspenseyCommitOnFiber(fiber) {\n      switch (fiber.tag) {\n        case 26:\n          recursivelyAccumulateSuspenseyCommit(fiber);\n          fiber.flags & suspenseyCommitFlag &&\n            (null !== fiber.memoizedState\n              ? suspendResource(\n                  currentHoistableRoot,\n                  fiber.memoizedState,\n                  fiber.memoizedProps\n                )\n              : suspendInstance(fiber.type, fiber.memoizedProps));\n          break;\n        case 5:\n          recursivelyAccumulateSuspenseyCommit(fiber);\n          fiber.flags & suspenseyCommitFlag &&\n            suspendInstance(fiber.type, fiber.memoizedProps);\n          break;\n        case 3:\n        case 4:\n          if (supportsResources) {\n            var previousHoistableRoot = currentHoistableRoot;\n            currentHoistableRoot = getHoistableRoot(\n              fiber.stateNode.containerInfo\n            );\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            currentHoistableRoot = previousHoistableRoot;\n          } else recursivelyAccumulateSuspenseyCommit(fiber);\n          break;\n        case 22:\n          null === fiber.memoizedState &&\n            ((previousHoistableRoot = fiber.alternate),\n            null !== previousHoistableRoot &&\n            null !== previousHoistableRoot.memoizedState\n              ? ((previousHoistableRoot = suspenseyCommitFlag),\n                (suspenseyCommitFlag = 16777216),\n                recursivelyAccumulateSuspenseyCommit(fiber),\n                (suspenseyCommitFlag = previousHoistableRoot))\n              : recursivelyAccumulateSuspenseyCommit(fiber));\n          break;\n        default:\n          recursivelyAccumulateSuspenseyCommit(fiber);\n      }\n    }\n    function detachAlternateSiblings(parentFiber) {\n      var previousFiber = parentFiber.alternate;\n      if (\n        null !== previousFiber &&\n        ((parentFiber = previousFiber.child), null !== parentFiber)\n      ) {\n        previousFiber.child = null;\n        do\n          (previousFiber = parentFiber.sibling),\n            (parentFiber.sibling = null),\n            (parentFiber = previousFiber);\n        while (null !== parentFiber);\n      }\n    }\n    function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if (0 !== (parentFiber.flags & 16)) {\n        if (null !== deletions)\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        detachAlternateSiblings(parentFiber);\n      }\n      if (parentFiber.subtreeFlags & 10256)\n        for (parentFiber = parentFiber.child; null !== parentFiber; )\n          commitPassiveUnmountOnFiber(parentFiber),\n            (parentFiber = parentFiber.sibling);\n    }\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n          finishedWork.flags & 2048 &&\n            commitHookPassiveUnmountEffects(\n              finishedWork,\n              finishedWork.return,\n              Passive | HasEffect\n            );\n          break;\n        case 3:\n          var prevEffectDuration = pushNestedEffectDurations();\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n          finishedWork.stateNode.passiveEffectDuration +=\n            popNestedEffectDurations(prevEffectDuration);\n          break;\n        case 12:\n          prevEffectDuration = pushNestedEffectDurations();\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n          finishedWork.stateNode.passiveEffectDuration +=\n            bubbleNestedEffectDurations(prevEffectDuration);\n          break;\n        case 22:\n          prevEffectDuration = finishedWork.stateNode;\n          null !== finishedWork.memoizedState &&\n          prevEffectDuration._visibility & 4 &&\n          (null === finishedWork.return || 13 !== finishedWork.return.tag)\n            ? ((prevEffectDuration._visibility &= -5),\n              recursivelyTraverseDisconnectPassiveEffects(finishedWork))\n            : recursivelyTraversePassiveUnmountEffects(finishedWork);\n          break;\n        default:\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n      }\n    }\n    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if (0 !== (parentFiber.flags & 16)) {\n        if (null !== deletions)\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        detachAlternateSiblings(parentFiber);\n      }\n      for (parentFiber = parentFiber.child; null !== parentFiber; )\n        disconnectPassiveEffect(parentFiber),\n          (parentFiber = parentFiber.sibling);\n    }\n    function disconnectPassiveEffect(finishedWork) {\n      switch (finishedWork.tag) {\n        case 0:\n        case 11:\n        case 15:\n          commitHookPassiveUnmountEffects(\n            finishedWork,\n            finishedWork.return,\n            Passive\n          );\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          break;\n        case 22:\n          var instance = finishedWork.stateNode;\n          instance._visibility & 4 &&\n            ((instance._visibility &= -5),\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork));\n          break;\n        default:\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n      deletedSubtreeRoot,\n      nearestMountedAncestor\n    ) {\n      for (; null !== nextEffect; ) {\n        var fiber = nextEffect,\n          current = fiber;\n        switch (current.tag) {\n          case 0:\n          case 11:\n          case 15:\n            commitHookPassiveUnmountEffects(\n              current,\n              nearestMountedAncestor,\n              Passive\n            );\n            break;\n          case 23:\n          case 22:\n            null !== current.memoizedState &&\n              null !== current.memoizedState.cachePool &&\n              ((current = current.memoizedState.cachePool.pool),\n              null != current && retainCache(current));\n            break;\n          case 24:\n            releaseCache(current.memoizedState.cache);\n        }\n        current = fiber.child;\n        if (null !== current) (current.return = fiber), (nextEffect = current);\n        else\n          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {\n            current = nextEffect;\n            var sibling = current.sibling,\n              returnFiber = current.return;\n            detachFiberAfterEffects(current);\n            if (current === fiber) {\n              nextEffect = null;\n              break a;\n            }\n            if (null !== sibling) {\n              sibling.return = returnFiber;\n              nextEffect = sibling;\n              break a;\n            }\n            nextEffect = returnFiber;\n          }\n      }\n    }\n    function findFiberRootForHostRoot(hostRoot) {\n      var maybeFiber = getInstanceFromNode(hostRoot);\n      if (null != maybeFiber) {\n        if (\"string\" !== typeof maybeFiber.memoizedProps[\"data-testname\"])\n          throw Error(\n            \"Invalid host root specified. Should be either a React container or a node with a testname attribute.\"\n          );\n        return maybeFiber;\n      }\n      hostRoot = findFiberRoot(hostRoot);\n      if (null === hostRoot)\n        throw Error(\n          \"Could not find React container within specified host subtree.\"\n        );\n      return hostRoot.stateNode.current;\n    }\n    function matchSelector(fiber$jscomp$0, selector) {\n      var tag = fiber$jscomp$0.tag;\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          if (fiber$jscomp$0.type === selector.value) return !0;\n          break;\n        case HAS_PSEUDO_CLASS_TYPE:\n          a: {\n            selector = selector.value;\n            fiber$jscomp$0 = [fiber$jscomp$0, 0];\n            for (tag = 0; tag < fiber$jscomp$0.length; ) {\n              var fiber = fiber$jscomp$0[tag++],\n                tag$jscomp$0 = fiber.tag,\n                selectorIndex = fiber$jscomp$0[tag++],\n                selector$jscomp$0 = selector[selectorIndex];\n              if (\n                (5 !== tag$jscomp$0 &&\n                  26 !== tag$jscomp$0 &&\n                  27 !== tag$jscomp$0) ||\n                !isHiddenSubtree(fiber)\n              ) {\n                for (\n                  ;\n                  null != selector$jscomp$0 &&\n                  matchSelector(fiber, selector$jscomp$0);\n\n                )\n                  selectorIndex++,\n                    (selector$jscomp$0 = selector[selectorIndex]);\n                if (selectorIndex === selector.length) {\n                  selector = !0;\n                  break a;\n                } else\n                  for (fiber = fiber.child; null !== fiber; )\n                    fiber$jscomp$0.push(fiber, selectorIndex),\n                      (fiber = fiber.sibling);\n              }\n            }\n            selector = !1;\n          }\n          return selector;\n        case ROLE_TYPE:\n          if (\n            (5 === tag || 26 === tag || 27 === tag) &&\n            matchAccessibilityRole(fiber$jscomp$0.stateNode, selector.value)\n          )\n            return !0;\n          break;\n        case TEXT_TYPE:\n          if (5 === tag || 6 === tag || 26 === tag || 27 === tag)\n            if (\n              ((fiber$jscomp$0 = getTextContent(fiber$jscomp$0)),\n              null !== fiber$jscomp$0 &&\n                0 <= fiber$jscomp$0.indexOf(selector.value))\n            )\n              return !0;\n          break;\n        case TEST_NAME_TYPE:\n          if (5 === tag || 26 === tag || 27 === tag)\n            if (\n              ((fiber$jscomp$0 = fiber$jscomp$0.memoizedProps[\"data-testname\"]),\n              \"string\" === typeof fiber$jscomp$0 &&\n                fiber$jscomp$0.toLowerCase() === selector.value.toLowerCase())\n            )\n              return !0;\n          break;\n        default:\n          throw Error(\"Invalid selector type specified.\");\n      }\n      return !1;\n    }\n    function selectorToString(selector) {\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          return (\n            \"<\" + (getComponentNameFromType(selector.value) || \"Unknown\") + \">\"\n          );\n        case HAS_PSEUDO_CLASS_TYPE:\n          return \":has(\" + (selectorToString(selector) || \"\") + \")\";\n        case ROLE_TYPE:\n          return '[role=\"' + selector.value + '\"]';\n        case TEXT_TYPE:\n          return '\"' + selector.value + '\"';\n        case TEST_NAME_TYPE:\n          return '[data-testname=\"' + selector.value + '\"]';\n        default:\n          throw Error(\"Invalid selector type specified.\");\n      }\n    }\n    function findPaths(root, selectors) {\n      var matchingFibers = [];\n      root = [root, 0];\n      for (var index = 0; index < root.length; ) {\n        var fiber = root[index++],\n          tag = fiber.tag,\n          selectorIndex = root[index++],\n          selector = selectors[selectorIndex];\n        if (\n          (5 !== tag && 26 !== tag && 27 !== tag) ||\n          !isHiddenSubtree(fiber)\n        ) {\n          for (; null != selector && matchSelector(fiber, selector); )\n            selectorIndex++, (selector = selectors[selectorIndex]);\n          if (selectorIndex === selectors.length) matchingFibers.push(fiber);\n          else\n            for (fiber = fiber.child; null !== fiber; )\n              root.push(fiber, selectorIndex), (fiber = fiber.sibling);\n        }\n      }\n      return matchingFibers;\n    }\n    function findAllNodes(hostRoot, selectors) {\n      if (!supportsTestSelectors)\n        throw Error(\"Test selector API is not supported by this renderer.\");\n      hostRoot = findFiberRootForHostRoot(hostRoot);\n      hostRoot = findPaths(hostRoot, selectors);\n      selectors = [];\n      hostRoot = Array.from(hostRoot);\n      for (var index = 0; index < hostRoot.length; ) {\n        var node = hostRoot[index++],\n          tag = node.tag;\n        if (5 === tag || 26 === tag || 27 === tag)\n          isHiddenSubtree(node) || selectors.push(node.stateNode);\n        else\n          for (node = node.child; null !== node; )\n            hostRoot.push(node), (node = node.sibling);\n      }\n      return selectors;\n    }\n    function onCommitRoot() {\n      supportsTestSelectors &&\n        commitHooks.forEach(function (commitHook) {\n          return commitHook();\n        });\n    }\n    function isConcurrentActEnvironment() {\n      var isReactActEnvironmentGlobal =\n        \"undefined\" !== typeof IS_REACT_ACT_ENVIRONMENT\n          ? IS_REACT_ACT_ENVIRONMENT\n          : void 0;\n      isReactActEnvironmentGlobal ||\n        null === ReactSharedInternals.actQueue ||\n        console.error(\n          \"The current testing environment is not configured to support act(...)\"\n        );\n      return isReactActEnvironmentGlobal;\n    }\n    function requestUpdateLane(fiber) {\n      if (\n        (executionContext & RenderContext) !== NoContext &&\n        0 !== workInProgressRootRenderLanes\n      )\n        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;\n      var transition = ReactSharedInternals.T;\n      return null !== transition\n        ? (transition._updatedFibers || (transition._updatedFibers = new Set()),\n          transition._updatedFibers.add(fiber),\n          (fiber = currentEntangledLane),\n          0 !== fiber ? fiber : requestTransitionLane())\n        : resolveUpdatePriority();\n    }\n    function requestDeferredLane() {\n      0 === workInProgressDeferredLane &&\n        (workInProgressDeferredLane =\n          0 === (workInProgressRootRenderLanes & 536870912) || isHydrating\n            ? claimNextTransitionLane()\n            : 536870912);\n      var suspenseHandler = suspenseHandlerStackCursor.current;\n      null !== suspenseHandler && (suspenseHandler.flags |= 32);\n      return workInProgressDeferredLane;\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane) {\n      isRunningInsertionEffect &&\n        console.error(\"useInsertionEffect must not schedule updates.\");\n      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0);\n      if (\n        (root === workInProgressRoot &&\n          workInProgressSuspendedReason === SuspendedOnData) ||\n        null !== root.cancelPendingCommit\n      )\n        prepareFreshStack(root, 0),\n          markRootSuspended(\n            root,\n            workInProgressRootRenderLanes,\n            workInProgressDeferredLane,\n            !1\n          );\n      markRootUpdated$1(root, lane);\n      if (\n        0 !== (executionContext & RenderContext) &&\n        root === workInProgressRoot\n      ) {\n        if (isRendering)\n          switch (fiber.tag) {\n            case 0:\n            case 11:\n            case 15:\n              root =\n                (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n                \"Unknown\";\n              didWarnAboutUpdateInRenderForAnotherComponent.has(root) ||\n                (didWarnAboutUpdateInRenderForAnotherComponent.add(root),\n                (fiber = getComponentNameFromFiber(fiber) || \"Unknown\"),\n                console.error(\n                  \"Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render\",\n                  fiber,\n                  root,\n                  root\n                ));\n              break;\n            case 1:\n              didWarnAboutUpdateInRender ||\n                (console.error(\n                  \"Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.\"\n                ),\n                (didWarnAboutUpdateInRender = !0));\n          }\n      } else\n        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane),\n          warnIfUpdatesNotWrappedWithActDEV(fiber),\n          root === workInProgressRoot &&\n            ((executionContext & RenderContext) === NoContext &&\n              (workInProgressRootInterleavedUpdatedLanes |= lane),\n            workInProgressRootExitStatus === RootSuspendedWithDelay &&\n              markRootSuspended(\n                root,\n                workInProgressRootRenderLanes,\n                workInProgressDeferredLane,\n                !1\n              )),\n          ensureRootIsScheduled(root);\n    }\n    function performWorkOnRoot(root, lanes, forceSync) {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)\n        throw Error(\"Should not already be working.\");\n      var shouldTimeSlice =\n          (!forceSync &&\n            0 === (lanes & 60) &&\n            0 === (lanes & root.expiredLanes)) ||\n          checkIfRootIsPrerendering(root, lanes),\n        exitStatus = shouldTimeSlice\n          ? renderRootConcurrent(root, lanes)\n          : renderRootSync(root, lanes, !0),\n        renderWasConcurrent = shouldTimeSlice;\n      do {\n        if (exitStatus === RootInProgress) {\n          workInProgressRootIsPrerendering &&\n            !shouldTimeSlice &&\n            markRootSuspended(root, lanes, 0, !1);\n          break;\n        } else if (exitStatus === RootDidNotComplete)\n          markRootSuspended(\n            root,\n            lanes,\n            0,\n            !workInProgressRootDidSkipSuspendedSiblings\n          );\n        else {\n          forceSync = root.current.alternate;\n          if (\n            renderWasConcurrent &&\n            !isRenderConsistentWithExternalStores(forceSync)\n          ) {\n            exitStatus = renderRootSync(root, lanes, !1);\n            renderWasConcurrent = !1;\n            continue;\n          }\n          if (exitStatus === RootErrored) {\n            renderWasConcurrent = lanes;\n            if (root.errorRecoveryDisabledLanes & renderWasConcurrent)\n              var errorRetryLanes = 0;\n            else\n              (errorRetryLanes = root.pendingLanes & -536870913),\n                (errorRetryLanes =\n                  0 !== errorRetryLanes\n                    ? errorRetryLanes\n                    : errorRetryLanes & 536870912\n                      ? 536870912\n                      : 0);\n            if (0 !== errorRetryLanes) {\n              lanes = errorRetryLanes;\n              a: {\n                exitStatus = root;\n                var errorRetryLanes$jscomp$0 = errorRetryLanes;\n                errorRetryLanes = workInProgressRootConcurrentErrors;\n                var wasRootDehydrated =\n                  supportsHydration &&\n                  exitStatus.current.memoizedState.isDehydrated;\n                wasRootDehydrated &&\n                  (prepareFreshStack(\n                    exitStatus,\n                    errorRetryLanes$jscomp$0\n                  ).flags |= 256);\n                errorRetryLanes$jscomp$0 = renderRootSync(\n                  exitStatus,\n                  errorRetryLanes$jscomp$0,\n                  !1\n                );\n                if (errorRetryLanes$jscomp$0 !== RootErrored) {\n                  if (\n                    workInProgressRootDidAttachPingListener &&\n                    !wasRootDehydrated\n                  ) {\n                    exitStatus.errorRecoveryDisabledLanes |=\n                      renderWasConcurrent;\n                    workInProgressRootInterleavedUpdatedLanes |=\n                      renderWasConcurrent;\n                    exitStatus = RootSuspendedWithDelay;\n                    break a;\n                  }\n                  exitStatus = workInProgressRootRecoverableErrors;\n                  workInProgressRootRecoverableErrors = errorRetryLanes;\n                  null !== exitStatus && queueRecoverableErrors(exitStatus);\n                }\n                exitStatus = errorRetryLanes$jscomp$0;\n              }\n              renderWasConcurrent = !1;\n              if (exitStatus !== RootErrored) continue;\n            }\n          }\n          if (exitStatus === RootFatalErrored) {\n            prepareFreshStack(root, 0);\n            markRootSuspended(root, lanes, 0, !0);\n            break;\n          }\n          a: {\n            shouldTimeSlice = root;\n            switch (exitStatus) {\n              case RootInProgress:\n              case RootFatalErrored:\n                throw Error(\"Root did not complete. This is a bug in React.\");\n              case RootSuspendedWithDelay:\n                if ((lanes & 4194176) === lanes) {\n                  markRootSuspended(\n                    shouldTimeSlice,\n                    lanes,\n                    workInProgressDeferredLane,\n                    !workInProgressRootDidSkipSuspendedSiblings\n                  );\n                  break a;\n                }\n                break;\n              case RootErrored:\n                workInProgressRootRecoverableErrors = null;\n                break;\n              case RootSuspended:\n              case RootCompleted:\n                break;\n              default:\n                throw Error(\"Unknown root exit status.\");\n            }\n            shouldTimeSlice.finishedWork = forceSync;\n            shouldTimeSlice.finishedLanes = lanes;\n            if (null !== ReactSharedInternals.actQueue)\n              commitRoot(\n                shouldTimeSlice,\n                workInProgressRootRecoverableErrors,\n                workInProgressTransitions,\n                workInProgressRootDidIncludeRecursiveRenderUpdate,\n                workInProgressDeferredLane,\n                workInProgressRootInterleavedUpdatedLanes,\n                workInProgressSuspendedRetryLanes,\n                IMMEDIATE_COMMIT,\n                -0,\n                0\n              );\n            else {\n              if (\n                (lanes & 62914560) === lanes &&\n                ((exitStatus =\n                  globalMostRecentFallbackTime +\n                  FALLBACK_THROTTLE_MS -\n                  now$1()),\n                10 < exitStatus)\n              ) {\n                markRootSuspended(\n                  shouldTimeSlice,\n                  lanes,\n                  workInProgressDeferredLane,\n                  !workInProgressRootDidSkipSuspendedSiblings\n                );\n                if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;\n                shouldTimeSlice.timeoutHandle = scheduleTimeout(\n                  commitRootWhenReady.bind(\n                    null,\n                    shouldTimeSlice,\n                    forceSync,\n                    workInProgressRootRecoverableErrors,\n                    workInProgressTransitions,\n                    workInProgressRootDidIncludeRecursiveRenderUpdate,\n                    lanes,\n                    workInProgressDeferredLane,\n                    workInProgressRootInterleavedUpdatedLanes,\n                    workInProgressSuspendedRetryLanes,\n                    workInProgressRootDidSkipSuspendedSiblings,\n                    THROTTLED_COMMIT,\n                    -0,\n                    0\n                  ),\n                  exitStatus\n                );\n                break a;\n              }\n              commitRootWhenReady(\n                shouldTimeSlice,\n                forceSync,\n                workInProgressRootRecoverableErrors,\n                workInProgressTransitions,\n                workInProgressRootDidIncludeRecursiveRenderUpdate,\n                lanes,\n                workInProgressDeferredLane,\n                workInProgressRootInterleavedUpdatedLanes,\n                workInProgressSuspendedRetryLanes,\n                workInProgressRootDidSkipSuspendedSiblings,\n                IMMEDIATE_COMMIT,\n                -0,\n                0\n              );\n            }\n          }\n        }\n        break;\n      } while (1);\n      ensureRootIsScheduled(root);\n    }\n    function queueRecoverableErrors(errors) {\n      null === workInProgressRootRecoverableErrors\n        ? (workInProgressRootRecoverableErrors = errors)\n        : workInProgressRootRecoverableErrors.push.apply(\n            workInProgressRootRecoverableErrors,\n            errors\n          );\n    }\n    function commitRootWhenReady(\n      root,\n      finishedWork,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      lanes,\n      spawnedLane,\n      updatedLanes,\n      suspendedRetryLanes,\n      didSkipSuspendedSiblings,\n      suspendedCommitReason,\n      completedRenderStartTime,\n      completedRenderEndTime\n    ) {\n      var subtreeFlags = finishedWork.subtreeFlags;\n      if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))\n        if (\n          (startSuspendingCommit(),\n          accumulateSuspenseyCommitOnFiber(finishedWork),\n          (finishedWork = waitForCommitToBeReady()),\n          null !== finishedWork)\n        ) {\n          root.cancelPendingCommit = finishedWork(\n            commitRoot.bind(\n              null,\n              root,\n              recoverableErrors,\n              transitions,\n              didIncludeRenderPhaseUpdate,\n              spawnedLane,\n              updatedLanes,\n              suspendedRetryLanes,\n              SUSPENDED_COMMIT,\n              completedRenderStartTime,\n              completedRenderEndTime\n            )\n          );\n          markRootSuspended(\n            root,\n            lanes,\n            spawnedLane,\n            !didSkipSuspendedSiblings\n          );\n          return;\n        }\n      commitRoot(\n        root,\n        recoverableErrors,\n        transitions,\n        didIncludeRenderPhaseUpdate,\n        spawnedLane,\n        updatedLanes,\n        suspendedRetryLanes,\n        suspendedCommitReason,\n        completedRenderStartTime,\n        completedRenderEndTime\n      );\n    }\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      for (var node = finishedWork; ; ) {\n        var tag = node.tag;\n        if (\n          (0 === tag || 11 === tag || 15 === tag) &&\n          node.flags & 16384 &&\n          ((tag = node.updateQueue),\n          null !== tag && ((tag = tag.stores), null !== tag))\n        )\n          for (var i = 0; i < tag.length; i++) {\n            var check = tag[i],\n              getSnapshot = check.getSnapshot;\n            check = check.value;\n            try {\n              if (!objectIs(getSnapshot(), check)) return !1;\n            } catch (error) {\n              return !1;\n            }\n          }\n        tag = node.child;\n        if (node.subtreeFlags & 16384 && null !== tag)\n          (tag.return = node), (node = tag);\n        else {\n          if (node === finishedWork) break;\n          for (; null === node.sibling; ) {\n            if (null === node.return || node.return === finishedWork) return !0;\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return !0;\n    }\n    function markRootSuspended(\n      root,\n      suspendedLanes,\n      spawnedLane,\n      didAttemptEntireTree\n    ) {\n      suspendedLanes &= ~workInProgressRootPingedLanes;\n      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes;\n      didAttemptEntireTree && (root.warmLanes |= suspendedLanes);\n      didAttemptEntireTree = root.expirationTimes;\n      for (var lanes = suspendedLanes; 0 < lanes; ) {\n        var index = 31 - clz32(lanes),\n          lane = 1 << index;\n        didAttemptEntireTree[index] = -1;\n        lanes &= ~lane;\n      }\n      0 !== spawnedLane &&\n        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n    }\n    function flushSyncWork() {\n      return (executionContext & (RenderContext | CommitContext)) === NoContext\n        ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)\n        : !0;\n    }\n    function resetWorkInProgressStack() {\n      if (null !== workInProgress) {\n        if (workInProgressSuspendedReason === NotSuspended)\n          var interruptedWork = workInProgress.return;\n        else\n          (interruptedWork = workInProgress),\n            resetContextDependencies(),\n            resetHooksOnUnwind(interruptedWork),\n            (thenableState$1 = null),\n            (thenableIndexCounter$1 = 0),\n            (interruptedWork = workInProgress);\n        for (; null !== interruptedWork; )\n          unwindInterruptedWork(interruptedWork.alternate, interruptedWork),\n            (interruptedWork = interruptedWork.return);\n        workInProgress = null;\n      }\n    }\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = 0;\n      var timeoutHandle = root.timeoutHandle;\n      timeoutHandle !== noTimeout &&\n        ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));\n      timeoutHandle = root.cancelPendingCommit;\n      null !== timeoutHandle &&\n        ((root.cancelPendingCommit = null), timeoutHandle());\n      resetWorkInProgressStack();\n      workInProgressRoot = root;\n      workInProgress = timeoutHandle = createWorkInProgress(root.current, null);\n      workInProgressRootRenderLanes = lanes;\n      workInProgressSuspendedReason = NotSuspended;\n      workInProgressThrownValue = null;\n      workInProgressRootDidSkipSuspendedSiblings = !1;\n      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);\n      workInProgressRootDidAttachPingListener = !1;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressSuspendedRetryLanes =\n        workInProgressDeferredLane =\n        workInProgressRootPingedLanes =\n        workInProgressRootInterleavedUpdatedLanes =\n        workInProgressRootSkippedLanes =\n          0;\n      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =\n        null;\n      workInProgressRootDidIncludeRecursiveRenderUpdate = !1;\n      0 !== (lanes & 8) && (lanes |= lanes & 32);\n      var allEntangledLanes = root.entangledLanes;\n      if (0 !== allEntangledLanes)\n        for (\n          root = root.entanglements, allEntangledLanes &= lanes;\n          0 < allEntangledLanes;\n\n        ) {\n          var index = 31 - clz32(allEntangledLanes),\n            lane = 1 << index;\n          lanes |= root[index];\n          allEntangledLanes &= ~lane;\n        }\n      entangledRenderLanes = lanes;\n      finishQueueingConcurrentUpdates();\n      ReactStrictModeWarnings.discardPendingWarnings();\n      return timeoutHandle;\n    }\n    function handleThrow(root, thrownValue) {\n      currentlyRenderingFiber$1 = null;\n      ReactSharedInternals.H = ContextOnlyDispatcher;\n      ReactSharedInternals.getCurrentStack = null;\n      isRendering = !1;\n      current = null;\n      thrownValue === SuspenseException\n        ? ((thrownValue = getSuspendedThenable()),\n          (workInProgressSuspendedReason = SuspendedOnImmediate))\n        : thrownValue === SuspenseyCommitException\n          ? ((thrownValue = getSuspendedThenable()),\n            (workInProgressSuspendedReason = SuspendedOnInstance))\n          : (workInProgressSuspendedReason =\n              thrownValue === SelectiveHydrationException\n                ? SuspendedOnHydration\n                : null !== thrownValue &&\n                    \"object\" === typeof thrownValue &&\n                    \"function\" === typeof thrownValue.then\n                  ? SuspendedOnDeprecatedThrowPromise\n                  : SuspendedOnError);\n      workInProgressThrownValue = thrownValue;\n      var erroredWork = workInProgress;\n      if (null === erroredWork)\n        (workInProgressRootExitStatus = RootFatalErrored),\n          logUncaughtError(\n            root,\n            createCapturedValueAtFiber(thrownValue, root.current)\n          );\n      else\n        switch (\n          (erroredWork.mode & 2 &&\n            stopProfilerTimerIfRunningAndRecordDuration(erroredWork),\n          markComponentRenderStopped(),\n          workInProgressSuspendedReason)\n        ) {\n          case SuspendedOnError:\n            null !== injectedProfilingHooks &&\n              \"function\" ===\n                typeof injectedProfilingHooks.markComponentErrored &&\n              injectedProfilingHooks.markComponentErrored(\n                erroredWork,\n                thrownValue,\n                workInProgressRootRenderLanes\n              );\n            break;\n          case SuspendedOnData:\n          case SuspendedOnImmediate:\n          case SuspendedOnDeprecatedThrowPromise:\n          case SuspendedAndReadyToContinue:\n            null !== injectedProfilingHooks &&\n              \"function\" ===\n                typeof injectedProfilingHooks.markComponentSuspended &&\n              injectedProfilingHooks.markComponentSuspended(\n                erroredWork,\n                thrownValue,\n                workInProgressRootRenderLanes\n              );\n        }\n    }\n    function shouldRemainOnPreviousScreen() {\n      var handler = suspenseHandlerStackCursor.current;\n      return null === handler\n        ? !0\n        : (workInProgressRootRenderLanes & 4194176) ===\n            workInProgressRootRenderLanes\n          ? null === shellBoundary\n            ? !0\n            : !1\n          : (workInProgressRootRenderLanes & 62914560) ===\n                workInProgressRootRenderLanes ||\n              0 !== (workInProgressRootRenderLanes & 536870912)\n            ? handler === shellBoundary\n            : !1;\n    }\n    function pushDispatcher() {\n      var prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = ContextOnlyDispatcher;\n      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;\n    }\n    function pushAsyncDispatcher() {\n      var prevAsyncDispatcher = ReactSharedInternals.A;\n      ReactSharedInternals.A = DefaultAsyncDispatcher;\n      return prevAsyncDispatcher;\n    }\n    function renderDidSuspendDelayIfPossible() {\n      workInProgressRootExitStatus = RootSuspendedWithDelay;\n      workInProgressRootDidSkipSuspendedSiblings ||\n        ((workInProgressRootRenderLanes & 4194176) !==\n          workInProgressRootRenderLanes &&\n          null !== suspenseHandlerStackCursor.current) ||\n        (workInProgressRootIsPrerendering = !0);\n      (0 === (workInProgressRootSkippedLanes & 134217727) &&\n        0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||\n        null === workInProgressRoot ||\n        markRootSuspended(\n          workInProgressRoot,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane,\n          !1\n        );\n    }\n    function renderRootSync(root, lanes, shouldYieldForPrerendering) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(),\n        prevAsyncDispatcher = pushAsyncDispatcher();\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          0 < memoizedUpdaters.size &&\n            (restorePendingUpdaters(root, workInProgressRootRenderLanes),\n            memoizedUpdaters.clear());\n          movePendingFibersToMemoized(root, lanes);\n        }\n        workInProgressTransitions = null;\n        prepareFreshStack(root, lanes);\n      }\n      markRenderStarted(lanes);\n      lanes = !1;\n      memoizedUpdaters = workInProgressRootExitStatus;\n      a: do\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            null !== workInProgress\n          ) {\n            var unitOfWork = workInProgress,\n              thrownValue = workInProgressThrownValue;\n            switch (workInProgressSuspendedReason) {\n              case SuspendedOnHydration:\n                resetWorkInProgressStack();\n                memoizedUpdaters = RootDidNotComplete;\n                break a;\n              case SuspendedOnImmediate:\n              case SuspendedOnData:\n              case SuspendedOnDeprecatedThrowPromise:\n                null === suspenseHandlerStackCursor.current && (lanes = !0);\n                var reason = workInProgressSuspendedReason;\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n                if (\n                  shouldYieldForPrerendering &&\n                  workInProgressRootIsPrerendering\n                ) {\n                  memoizedUpdaters = RootInProgress;\n                  break a;\n                }\n                break;\n              default:\n                (reason = workInProgressSuspendedReason),\n                  (workInProgressSuspendedReason = NotSuspended),\n                  (workInProgressThrownValue = null),\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n            }\n          }\n          workLoopSync();\n          memoizedUpdaters = workInProgressRootExitStatus;\n          break;\n        } catch (thrownValue$4) {\n          handleThrow(root, thrownValue$4);\n        }\n      while (1);\n      lanes && root.shellSuspendCounter++;\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      ReactSharedInternals.H = prevDispatcher;\n      ReactSharedInternals.A = prevAsyncDispatcher;\n      markRenderStopped();\n      null === workInProgress &&\n        ((workInProgressRoot = null),\n        (workInProgressRootRenderLanes = 0),\n        finishQueueingConcurrentUpdates());\n      return memoizedUpdaters;\n    }\n    function workLoopSync() {\n      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);\n    }\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(),\n        prevAsyncDispatcher = pushAsyncDispatcher();\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          0 < memoizedUpdaters.size &&\n            (restorePendingUpdaters(root, workInProgressRootRenderLanes),\n            memoizedUpdaters.clear());\n          movePendingFibersToMemoized(root, lanes);\n        }\n        workInProgressTransitions = null;\n        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n        prepareFreshStack(root, lanes);\n      } else\n        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(\n          root,\n          lanes\n        );\n      markRenderStarted(lanes);\n      a: do\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            null !== workInProgress\n          )\n            b: switch (\n              ((lanes = workInProgress),\n              (memoizedUpdaters = workInProgressThrownValue),\n              workInProgressSuspendedReason)\n            ) {\n              case SuspendedOnError:\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(\n                  root,\n                  lanes,\n                  memoizedUpdaters,\n                  SuspendedOnError\n                );\n                break;\n              case SuspendedOnData:\n                if (isThenableResolved(memoizedUpdaters)) {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  replaySuspendedUnitOfWork(lanes);\n                  break;\n                }\n                lanes = function () {\n                  workInProgressSuspendedReason === SuspendedOnData &&\n                    workInProgressRoot === root &&\n                    (workInProgressSuspendedReason =\n                      SuspendedAndReadyToContinue);\n                  ensureRootIsScheduled(root);\n                };\n                memoizedUpdaters.then(lanes, lanes);\n                break a;\n              case SuspendedOnImmediate:\n                workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                break a;\n              case SuspendedOnInstance:\n                workInProgressSuspendedReason =\n                  SuspendedOnInstanceAndReadyToContinue;\n                break a;\n              case SuspendedAndReadyToContinue:\n                isThenableResolved(memoizedUpdaters)\n                  ? ((workInProgressSuspendedReason = NotSuspended),\n                    (workInProgressThrownValue = null),\n                    replaySuspendedUnitOfWork(lanes))\n                  : ((workInProgressSuspendedReason = NotSuspended),\n                    (workInProgressThrownValue = null),\n                    throwAndUnwindWorkLoop(\n                      root,\n                      lanes,\n                      memoizedUpdaters,\n                      SuspendedAndReadyToContinue\n                    ));\n                break;\n              case SuspendedOnInstanceAndReadyToContinue:\n                var resource = null;\n                switch (workInProgress.tag) {\n                  case 26:\n                    resource = workInProgress.memoizedState;\n                  case 5:\n                  case 27:\n                    var hostFiber = workInProgress,\n                      type = hostFiber.type,\n                      props = hostFiber.pendingProps;\n                    if (\n                      resource\n                        ? preloadResource(resource)\n                        : preloadInstance(type, props)\n                    ) {\n                      workInProgressSuspendedReason = NotSuspended;\n                      workInProgressThrownValue = null;\n                      var sibling = hostFiber.sibling;\n                      if (null !== sibling) workInProgress = sibling;\n                      else {\n                        var returnFiber = hostFiber.return;\n                        null !== returnFiber\n                          ? ((workInProgress = returnFiber),\n                            completeUnitOfWork(returnFiber))\n                          : (workInProgress = null);\n                      }\n                      break b;\n                    }\n                    break;\n                  default:\n                    console.error(\n                      \"Unexpected type of fiber triggered a suspensey commit. This is a bug in React.\"\n                    );\n                }\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(\n                  root,\n                  lanes,\n                  memoizedUpdaters,\n                  SuspendedOnInstanceAndReadyToContinue\n                );\n                break;\n              case SuspendedOnDeprecatedThrowPromise:\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(\n                  root,\n                  lanes,\n                  memoizedUpdaters,\n                  SuspendedOnDeprecatedThrowPromise\n                );\n                break;\n              case SuspendedOnHydration:\n                resetWorkInProgressStack();\n                workInProgressRootExitStatus = RootDidNotComplete;\n                break a;\n              default:\n                throw Error(\n                  \"Unexpected SuspendedReason. This is a bug in React.\"\n                );\n            }\n          null !== ReactSharedInternals.actQueue\n            ? workLoopSync()\n            : workLoopConcurrent();\n          break;\n        } catch (thrownValue$5) {\n          handleThrow(root, thrownValue$5);\n        }\n      while (1);\n      resetContextDependencies();\n      ReactSharedInternals.H = prevDispatcher;\n      ReactSharedInternals.A = prevAsyncDispatcher;\n      executionContext = prevExecutionContext;\n      if (null !== workInProgress)\n        return (\n          null !== injectedProfilingHooks &&\n            \"function\" === typeof injectedProfilingHooks.markRenderYielded &&\n            injectedProfilingHooks.markRenderYielded(),\n          RootInProgress\n        );\n      markRenderStopped();\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = 0;\n      finishQueueingConcurrentUpdates();\n      return workInProgressRootExitStatus;\n    }\n    function workLoopConcurrent() {\n      for (; null !== workInProgress && !shouldYield(); )\n        performUnitOfWork(workInProgress);\n    }\n    function performUnitOfWork(unitOfWork) {\n      var current = unitOfWork.alternate;\n      (unitOfWork.mode & 2) !== NoMode\n        ? (startProfilerTimer(unitOfWork),\n          (current = runWithFiberInDEV(\n            unitOfWork,\n            beginWork,\n            current,\n            unitOfWork,\n            entangledRenderLanes\n          )),\n          stopProfilerTimerIfRunningAndRecordDuration(unitOfWork))\n        : (current = runWithFiberInDEV(\n            unitOfWork,\n            beginWork,\n            current,\n            unitOfWork,\n            entangledRenderLanes\n          ));\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      null === current\n        ? completeUnitOfWork(unitOfWork)\n        : (workInProgress = current);\n    }\n    function replaySuspendedUnitOfWork(unitOfWork) {\n      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);\n    }\n    function replayBeginWork(unitOfWork) {\n      var current = unitOfWork.alternate,\n        isProfilingMode = (unitOfWork.mode & 2) !== NoMode;\n      isProfilingMode && startProfilerTimer(unitOfWork);\n      switch (unitOfWork.tag) {\n        case 15:\n        case 0:\n          current = replayFunctionComponent(\n            current,\n            unitOfWork,\n            unitOfWork.pendingProps,\n            unitOfWork.type,\n            void 0,\n            workInProgressRootRenderLanes\n          );\n          break;\n        case 11:\n          current = replayFunctionComponent(\n            current,\n            unitOfWork,\n            unitOfWork.pendingProps,\n            unitOfWork.type.render,\n            unitOfWork.ref,\n            workInProgressRootRenderLanes\n          );\n          break;\n        case 5:\n          resetHooksOnUnwind(unitOfWork);\n        default:\n          unwindInterruptedWork(current, unitOfWork),\n            (unitOfWork = workInProgress =\n              resetWorkInProgress(unitOfWork, entangledRenderLanes)),\n            (current = beginWork(current, unitOfWork, entangledRenderLanes));\n      }\n      isProfilingMode &&\n        stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);\n      return current;\n    }\n    function throwAndUnwindWorkLoop(\n      root,\n      unitOfWork,\n      thrownValue,\n      suspendedReason\n    ) {\n      resetContextDependencies();\n      resetHooksOnUnwind(unitOfWork);\n      thenableState$1 = null;\n      thenableIndexCounter$1 = 0;\n      var returnFiber = unitOfWork.return;\n      try {\n        if (\n          throwException(\n            root,\n            returnFiber,\n            unitOfWork,\n            thrownValue,\n            workInProgressRootRenderLanes\n          )\n        ) {\n          workInProgressRootExitStatus = RootFatalErrored;\n          logUncaughtError(\n            root,\n            createCapturedValueAtFiber(thrownValue, root.current)\n          );\n          workInProgress = null;\n          return;\n        }\n      } catch (error) {\n        if (null !== returnFiber) throw ((workInProgress = returnFiber), error);\n        workInProgressRootExitStatus = RootFatalErrored;\n        logUncaughtError(\n          root,\n          createCapturedValueAtFiber(thrownValue, root.current)\n        );\n        workInProgress = null;\n        return;\n      }\n      if (unitOfWork.flags & 32768) {\n        if (isHydrating || suspendedReason === SuspendedOnError) root = !0;\n        else if (\n          workInProgressRootIsPrerendering ||\n          0 !== (workInProgressRootRenderLanes & 536870912)\n        )\n          root = !1;\n        else if (\n          ((workInProgressRootDidSkipSuspendedSiblings = root = !0),\n          suspendedReason === SuspendedOnData ||\n            suspendedReason === SuspendedOnImmediate ||\n            suspendedReason === SuspendedOnDeprecatedThrowPromise)\n        )\n          (suspendedReason = suspenseHandlerStackCursor.current),\n            null !== suspendedReason &&\n              13 === suspendedReason.tag &&\n              (suspendedReason.flags |= 16384);\n        unwindUnitOfWork(unitOfWork, root);\n      } else completeUnitOfWork(unitOfWork);\n    }\n    function completeUnitOfWork(unitOfWork) {\n      var completedWork = unitOfWork;\n      do {\n        if (0 !== (completedWork.flags & 32768)) {\n          unwindUnitOfWork(\n            completedWork,\n            workInProgressRootDidSkipSuspendedSiblings\n          );\n          return;\n        }\n        var current = completedWork.alternate;\n        unitOfWork = completedWork.return;\n        startProfilerTimer(completedWork);\n        current = runWithFiberInDEV(\n          completedWork,\n          completeWork,\n          current,\n          completedWork,\n          entangledRenderLanes\n        );\n        (completedWork.mode & 2) !== NoMode &&\n          stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);\n        if (null !== current) {\n          workInProgress = current;\n          return;\n        }\n        completedWork = completedWork.sibling;\n        if (null !== completedWork) {\n          workInProgress = completedWork;\n          return;\n        }\n        workInProgress = completedWork = unitOfWork;\n      } while (null !== completedWork);\n      workInProgressRootExitStatus === RootInProgress &&\n        (workInProgressRootExitStatus = RootCompleted);\n    }\n    function unwindUnitOfWork(unitOfWork, skipSiblings) {\n      do {\n        var next = unwindWork(unitOfWork.alternate, unitOfWork);\n        if (null !== next) {\n          next.flags &= 32767;\n          workInProgress = next;\n          return;\n        }\n        if ((unitOfWork.mode & 2) !== NoMode) {\n          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);\n          next = unitOfWork.actualDuration;\n          for (var child = unitOfWork.child; null !== child; )\n            (next += child.actualDuration), (child = child.sibling);\n          unitOfWork.actualDuration = next;\n        }\n        next = unitOfWork.return;\n        null !== next &&\n          ((next.flags |= 32768),\n          (next.subtreeFlags = 0),\n          (next.deletions = null));\n        if (\n          !skipSiblings &&\n          ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)\n        ) {\n          workInProgress = unitOfWork;\n          return;\n        }\n        workInProgress = unitOfWork = next;\n      } while (null !== unitOfWork);\n      workInProgressRootExitStatus = RootDidNotComplete;\n      workInProgress = null;\n    }\n    function commitRoot(\n      root,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      spawnedLane,\n      updatedLanes,\n      suspendedRetryLanes,\n      suspendedCommitReason,\n      completedRenderStartTime,\n      completedRenderEndTime\n    ) {\n      var prevTransition = ReactSharedInternals.T,\n        previousUpdateLanePriority = getCurrentUpdatePriority();\n      try {\n        setCurrentUpdatePriority(2),\n          (ReactSharedInternals.T = null),\n          commitRootImpl(\n            root,\n            recoverableErrors,\n            transitions,\n            didIncludeRenderPhaseUpdate,\n            previousUpdateLanePriority,\n            spawnedLane,\n            updatedLanes,\n            suspendedRetryLanes,\n            suspendedCommitReason,\n            completedRenderStartTime,\n            completedRenderEndTime\n          );\n      } finally {\n        (ReactSharedInternals.T = prevTransition),\n          setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n    }\n    function commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      renderPriorityLevel,\n      spawnedLane,\n      updatedLanes,\n      suspendedRetryLanes\n    ) {\n      do flushPassiveEffects();\n      while (null !== rootWithPendingPassiveEffects);\n      ReactStrictModeWarnings.flushLegacyContextWarning();\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)\n        throw Error(\"Should not already be working.\");\n      var finishedWork = root.finishedWork;\n      didIncludeRenderPhaseUpdate = root.finishedLanes;\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markCommitStarted &&\n        injectedProfilingHooks.markCommitStarted(didIncludeRenderPhaseUpdate);\n      if (null === finishedWork) return markCommitStopped(), null;\n      0 === didIncludeRenderPhaseUpdate &&\n        console.error(\n          \"root.finishedLanes should not be empty during a commit. This is a bug in React.\"\n        );\n      root.finishedWork = null;\n      root.finishedLanes = 0;\n      if (finishedWork === root.current)\n        throw Error(\n          \"Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      root.callbackNode = null;\n      root.callbackPriority = 0;\n      root.cancelPendingCommit = null;\n      var remainingLanes = finishedWork.lanes | finishedWork.childLanes;\n      remainingLanes |= concurrentlyUpdatedLanes;\n      markRootFinished(\n        root,\n        didIncludeRenderPhaseUpdate,\n        remainingLanes,\n        spawnedLane,\n        updatedLanes,\n        suspendedRetryLanes\n      );\n      root === workInProgressRoot &&\n        ((workInProgress = workInProgressRoot = null),\n        (workInProgressRootRenderLanes = 0));\n      (0 === (finishedWork.subtreeFlags & 10256) &&\n        0 === (finishedWork.flags & 10256)) ||\n        rootDoesHavePassiveEffects ||\n        ((rootDoesHavePassiveEffects = !0),\n        (pendingPassiveEffectsRemainingLanes = remainingLanes),\n        (pendingPassiveTransitions = transitions),\n        scheduleCallback(NormalPriority$1, function () {\n          flushPassiveEffects(!0);\n          return null;\n        }));\n      commitStartTime = now();\n      transitions = 0 !== (finishedWork.flags & 15990);\n      0 !== (finishedWork.subtreeFlags & 15990) || transitions\n        ? ((transitions = ReactSharedInternals.T),\n          (ReactSharedInternals.T = null),\n          (spawnedLane = getCurrentUpdatePriority()),\n          setCurrentUpdatePriority(2),\n          (updatedLanes = executionContext),\n          (executionContext |= CommitContext),\n          commitBeforeMutationEffects(root, finishedWork),\n          commitMutationEffects(\n            root,\n            finishedWork,\n            didIncludeRenderPhaseUpdate\n          ),\n          resetAfterCommit(root.containerInfo),\n          (root.current = finishedWork),\n          null !== injectedProfilingHooks &&\n            \"function\" ===\n              typeof injectedProfilingHooks.markLayoutEffectsStarted &&\n            injectedProfilingHooks.markLayoutEffectsStarted(\n              didIncludeRenderPhaseUpdate\n            ),\n          commitLayoutEffects(finishedWork, root, didIncludeRenderPhaseUpdate),\n          null !== injectedProfilingHooks &&\n            \"function\" ===\n              typeof injectedProfilingHooks.markLayoutEffectsStopped &&\n            injectedProfilingHooks.markLayoutEffectsStopped(),\n          requestPaint(),\n          (executionContext = updatedLanes),\n          setCurrentUpdatePriority(spawnedLane),\n          (ReactSharedInternals.T = transitions))\n        : (root.current = finishedWork);\n      (transitions = rootDoesHavePassiveEffects)\n        ? ((rootDoesHavePassiveEffects = !1),\n          (rootWithPendingPassiveEffects = root),\n          (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))\n        : (releaseRootPooledCache(root, remainingLanes),\n          (nestedPassiveUpdateCount = 0),\n          (rootWithPassiveNestedUpdates = null));\n      remainingLanes = root.pendingLanes;\n      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);\n      transitions || commitDoubleInvokeEffectsInDEV(root);\n      onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);\n      isDevToolsPresent && root.memoizedUpdaters.clear();\n      onCommitRoot();\n      ensureRootIsScheduled(root);\n      if (null !== recoverableErrors)\n        for (\n          renderPriorityLevel = root.onRecoverableError, finishedWork = 0;\n          finishedWork < recoverableErrors.length;\n          finishedWork++\n        )\n          (remainingLanes = recoverableErrors[finishedWork]),\n            (transitions = makeErrorInfo(remainingLanes.stack)),\n            runWithFiberInDEV(\n              remainingLanes.source,\n              renderPriorityLevel,\n              remainingLanes.value,\n              transitions\n            );\n      0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();\n      remainingLanes = root.pendingLanes;\n      0 !== (didIncludeRenderPhaseUpdate & 4194218) &&\n      0 !== (remainingLanes & 42)\n        ? ((nestedUpdateScheduled = !0),\n          root === rootWithNestedUpdates\n            ? nestedUpdateCount++\n            : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root)))\n        : (nestedUpdateCount = 0);\n      flushSyncWorkAcrossRoots_impl(0, !1);\n      markCommitStopped();\n      return null;\n    }\n    function makeErrorInfo(componentStack) {\n      componentStack = { componentStack: componentStack };\n      Object.defineProperty(componentStack, \"digest\", {\n        get: function () {\n          console.error(\n            'You are accessing \"digest\" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'\n          );\n        }\n      });\n      return componentStack;\n    }\n    function releaseRootPooledCache(root, remainingLanes) {\n      0 === (root.pooledCacheLanes &= remainingLanes) &&\n        ((remainingLanes = root.pooledCache),\n        null != remainingLanes &&\n          ((root.pooledCache = null), releaseCache(remainingLanes)));\n    }\n    function flushPassiveEffects() {\n      if (null !== rootWithPendingPassiveEffects) {\n        var root = rootWithPendingPassiveEffects,\n          remainingLanes = pendingPassiveEffectsRemainingLanes;\n        pendingPassiveEffectsRemainingLanes = 0;\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),\n          priority = 32 > renderPriority ? 32 : renderPriority;\n        renderPriority = ReactSharedInternals.T;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          setCurrentUpdatePriority(priority);\n          ReactSharedInternals.T = null;\n          if (null === rootWithPendingPassiveEffects)\n            var JSCompiler_inline_result = !1;\n          else {\n            priority = pendingPassiveTransitions;\n            pendingPassiveTransitions = null;\n            var root$jscomp$0 = rootWithPendingPassiveEffects,\n              lanes = pendingPassiveEffectsLanes;\n            rootWithPendingPassiveEffects = null;\n            pendingPassiveEffectsLanes = 0;\n            if (\n              (executionContext & (RenderContext | CommitContext)) !==\n              NoContext\n            )\n              throw Error(\n                \"Cannot flush passive effects while already rendering.\"\n              );\n            isFlushingPassiveEffects = !0;\n            didScheduleUpdateDuringPassiveEffects = !1;\n            null !== injectedProfilingHooks &&\n              \"function\" ===\n                typeof injectedProfilingHooks.markPassiveEffectsStarted &&\n              injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n            var prevExecutionContext = executionContext;\n            executionContext |= CommitContext;\n            commitPassiveUnmountOnFiber(root$jscomp$0.current);\n            commitPassiveMountOnFiber(\n              root$jscomp$0,\n              root$jscomp$0.current,\n              lanes,\n              priority\n            );\n            null !== injectedProfilingHooks &&\n              \"function\" ===\n                typeof injectedProfilingHooks.markPassiveEffectsStopped &&\n              injectedProfilingHooks.markPassiveEffectsStopped();\n            commitDoubleInvokeEffectsInDEV(root$jscomp$0);\n            executionContext = prevExecutionContext;\n            flushSyncWorkAcrossRoots_impl(0, !1);\n            didScheduleUpdateDuringPassiveEffects\n              ? root$jscomp$0 === rootWithPassiveNestedUpdates\n                ? nestedPassiveUpdateCount++\n                : ((nestedPassiveUpdateCount = 0),\n                  (rootWithPassiveNestedUpdates = root$jscomp$0))\n              : (nestedPassiveUpdateCount = 0);\n            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects =\n              !1;\n            if (\n              injectedHook &&\n              \"function\" === typeof injectedHook.onPostCommitFiberRoot\n            )\n              try {\n                injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);\n              } catch (err) {\n                hasLoggedError ||\n                  ((hasLoggedError = !0),\n                  console.error(\n                    \"React instrumentation encountered an error: %s\",\n                    err\n                  ));\n              }\n            var stateNode = root$jscomp$0.current.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n            JSCompiler_inline_result = !0;\n          }\n          return JSCompiler_inline_result;\n        } finally {\n          setCurrentUpdatePriority(previousPriority),\n            (ReactSharedInternals.T = renderPriority),\n            releaseRootPooledCache(root, remainingLanes);\n        }\n      }\n      return !1;\n    }\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);\n      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);\n      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);\n      null !== rootFiber &&\n        (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));\n    }\n    function captureCommitPhaseError(\n      sourceFiber,\n      nearestMountedAncestor,\n      error\n    ) {\n      isRunningInsertionEffect = !1;\n      if (3 === sourceFiber.tag)\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n      else {\n        for (; null !== nearestMountedAncestor; ) {\n          if (3 === nearestMountedAncestor.tag) {\n            captureCommitPhaseErrorOnRoot(\n              nearestMountedAncestor,\n              sourceFiber,\n              error\n            );\n            return;\n          }\n          if (1 === nearestMountedAncestor.tag) {\n            var instance = nearestMountedAncestor.stateNode;\n            if (\n              \"function\" ===\n                typeof nearestMountedAncestor.type.getDerivedStateFromError ||\n              (\"function\" === typeof instance.componentDidCatch &&\n                (null === legacyErrorBoundariesThatAlreadyFailed ||\n                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))\n            ) {\n              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);\n              error = createClassErrorUpdate(2);\n              instance = enqueueUpdate(nearestMountedAncestor, error, 2);\n              null !== instance &&\n                (initializeClassErrorUpdate(\n                  error,\n                  instance,\n                  nearestMountedAncestor,\n                  sourceFiber\n                ),\n                markRootUpdated$1(instance, 2),\n                ensureRootIsScheduled(instance));\n              return;\n            }\n          }\n          nearestMountedAncestor = nearestMountedAncestor.return;\n        }\n        console.error(\n          \"Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\\n\\nError message:\\n\\n%s\",\n          error\n        );\n      }\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      var pingCache = root.pingCache;\n      if (null === pingCache) {\n        pingCache = root.pingCache = new PossiblyWeakMap();\n        var threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else\n        (threadIDs = pingCache.get(wakeable)),\n          void 0 === threadIDs &&\n            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));\n      threadIDs.has(lanes) ||\n        ((workInProgressRootDidAttachPingListener = !0),\n        threadIDs.add(lanes),\n        (pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes)),\n        isDevToolsPresent && restorePendingUpdaters(root, lanes),\n        wakeable.then(pingCache, pingCache));\n    }\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n      null !== pingCache && pingCache.delete(wakeable);\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n      root.warmLanes &= ~pingedLanes;\n      isConcurrentActEnvironment() &&\n        null === ReactSharedInternals.actQueue &&\n        console.error(\n          \"A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\\n\\nWhen testing, code that resolves suspended data should be wrapped into act(...):\\n\\nact(() => {\\n  /* finish loading suspended data */\\n});\\n/* assert on the output */\\n\\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\"\n        );\n      workInProgressRoot === root &&\n        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&\n        (workInProgressRootExitStatus === RootSuspendedWithDelay ||\n        (workInProgressRootExitStatus === RootSuspended &&\n          (workInProgressRootRenderLanes & 62914560) ===\n            workInProgressRootRenderLanes &&\n          now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n          ? (executionContext & RenderContext) === NoContext &&\n            prepareFreshStack(root, 0)\n          : (workInProgressRootPingedLanes |= pingedLanes),\n        workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&\n          (workInProgressSuspendedRetryLanes = 0));\n      ensureRootIsScheduled(root);\n    }\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      0 === retryLane && (retryLane = claimNextRetryLane());\n      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n      null !== boundaryFiber &&\n        (markRootUpdated$1(boundaryFiber, retryLane),\n        ensureRootIsScheduled(boundaryFiber));\n    }\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState,\n        retryLane = 0;\n      null !== suspenseState && (retryLane = suspenseState.retryLane);\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = 0;\n      switch (boundaryFiber.tag) {\n        case 13:\n          var retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n          null !== suspenseState && (retryLane = suspenseState.retryLane);\n          break;\n        case 19:\n          retryCache = boundaryFiber.stateNode;\n          break;\n        case 22:\n          retryCache = boundaryFiber.stateNode._retryCache;\n          break;\n        default:\n          throw Error(\n            \"Pinged unknown suspense boundary type. This is probably a bug in React.\"\n          );\n      }\n      null !== retryCache && retryCache.delete(wakeable);\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n      root$jscomp$0,\n      parentFiber,\n      isInStrictMode\n    ) {\n      if (0 !== (parentFiber.subtreeFlags & 33562624))\n        for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n          var root = root$jscomp$0,\n            fiber = parentFiber,\n            isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;\n          isStrictModeFiber = isInStrictMode || isStrictModeFiber;\n          22 !== fiber.tag\n            ? fiber.flags & 33554432\n              ? isStrictModeFiber &&\n                runWithFiberInDEV(\n                  fiber,\n                  doubleInvokeEffectsOnFiber,\n                  root,\n                  fiber,\n                  (fiber.mode & 64) === NoMode\n                )\n              : recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n                  root,\n                  fiber,\n                  isStrictModeFiber\n                )\n            : null === fiber.memoizedState &&\n              (isStrictModeFiber && fiber.flags & 8192\n                ? runWithFiberInDEV(\n                    fiber,\n                    doubleInvokeEffectsOnFiber,\n                    root,\n                    fiber\n                  )\n                : fiber.subtreeFlags & 33554432 &&\n                  runWithFiberInDEV(\n                    fiber,\n                    recursivelyTraverseAndDoubleInvokeEffectsInDEV,\n                    root,\n                    fiber,\n                    isStrictModeFiber\n                  ));\n          parentFiber = parentFiber.sibling;\n        }\n    }\n    function doubleInvokeEffectsOnFiber(root, fiber) {\n      var shouldDoubleInvokePassiveEffects =\n        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0;\n      setIsStrictModeForDevtools(!0);\n      try {\n        disappearLayoutEffects(fiber),\n          shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber),\n          reappearLayoutEffects(root, fiber.alternate, fiber, !1),\n          shouldDoubleInvokePassiveEffects &&\n            reconnectPassiveEffects(root, fiber, 0, null, !1);\n      } finally {\n        setIsStrictModeForDevtools(!1);\n      }\n    }\n    function commitDoubleInvokeEffectsInDEV(root) {\n      var doubleInvokeEffects = !0;\n      root.current.mode & 24 || (doubleInvokeEffects = !1);\n      recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n        root,\n        root.current,\n        doubleInvokeEffects\n      );\n    }\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      if ((executionContext & RenderContext) === NoContext) {\n        var tag = fiber.tag;\n        if (\n          3 === tag ||\n          1 === tag ||\n          0 === tag ||\n          11 === tag ||\n          14 === tag ||\n          15 === tag\n        ) {\n          tag = getComponentNameFromFiber(fiber) || \"ReactComponent\";\n          if (null !== didWarnStateUpdateForNotYetMountedComponent) {\n            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;\n            didWarnStateUpdateForNotYetMountedComponent.add(tag);\n          } else didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);\n          runWithFiberInDEV(fiber, function () {\n            console.error(\n              \"Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.\"\n            );\n          });\n        }\n      }\n    }\n    function restorePendingUpdaters(root, lanes) {\n      isDevToolsPresent &&\n        root.memoizedUpdaters.forEach(function (schedulingFiber) {\n          addFiberToLanesMap(root, schedulingFiber, lanes);\n        });\n    }\n    function scheduleCallback(priorityLevel, callback) {\n      var actQueue = ReactSharedInternals.actQueue;\n      return null !== actQueue\n        ? (actQueue.push(callback), fakeActCallbackNode)\n        : scheduleCallback$3(priorityLevel, callback);\n    }\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      isConcurrentActEnvironment() &&\n        null === ReactSharedInternals.actQueue &&\n        runWithFiberInDEV(fiber, function () {\n          console.error(\n            \"An update to %s inside a test was not wrapped in act(...).\\n\\nWhen testing, code that causes React state updates should be wrapped into act(...):\\n\\nact(() => {\\n  /* fire events that update state */\\n});\\n/* assert on the output */\\n\\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\",\n            getComponentNameFromFiber(fiber)\n          );\n        });\n    }\n    function resolveFunctionForHotReloading(type) {\n      if (null === resolveFamily) return type;\n      var family = resolveFamily(type);\n      return void 0 === family ? type : family.current;\n    }\n    function resolveForwardRefForHotReloading(type) {\n      if (null === resolveFamily) return type;\n      var family = resolveFamily(type);\n      return void 0 === family\n        ? null !== type &&\n          void 0 !== type &&\n          \"function\" === typeof type.render &&\n          ((family = resolveFunctionForHotReloading(type.render)),\n          type.render !== family)\n          ? ((family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }),\n            void 0 !== type.displayName &&\n              (family.displayName = type.displayName),\n            family)\n          : type\n        : family.current;\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      if (null === resolveFamily) return !1;\n      var prevType = fiber.elementType;\n      element = element.type;\n      var needsCompareFamilies = !1,\n        $$typeofNextType =\n          \"object\" === typeof element && null !== element\n            ? element.$$typeof\n            : null;\n      switch (fiber.tag) {\n        case 1:\n          \"function\" === typeof element && (needsCompareFamilies = !0);\n          break;\n        case 0:\n          \"function\" === typeof element\n            ? (needsCompareFamilies = !0)\n            : $$typeofNextType === REACT_LAZY_TYPE &&\n              (needsCompareFamilies = !0);\n          break;\n        case 11:\n          $$typeofNextType === REACT_FORWARD_REF_TYPE\n            ? (needsCompareFamilies = !0)\n            : $$typeofNextType === REACT_LAZY_TYPE &&\n              (needsCompareFamilies = !0);\n          break;\n        case 14:\n        case 15:\n          $$typeofNextType === REACT_MEMO_TYPE\n            ? (needsCompareFamilies = !0)\n            : $$typeofNextType === REACT_LAZY_TYPE &&\n              (needsCompareFamilies = !0);\n          break;\n        default:\n          return !1;\n      }\n      return needsCompareFamilies &&\n        ((fiber = resolveFamily(prevType)),\n        void 0 !== fiber && fiber === resolveFamily(element))\n        ? !0\n        : !1;\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      null !== resolveFamily &&\n        \"function\" === typeof WeakSet &&\n        (null === failedBoundaries && (failedBoundaries = new WeakSet()),\n        failedBoundaries.add(fiber));\n    }\n    function scheduleFibersWithFamiliesRecursively(\n      fiber,\n      updatedFamilies,\n      staleFamilies\n    ) {\n      var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type,\n        candidateType = null;\n      switch (tag) {\n        case 0:\n        case 15:\n        case 1:\n          candidateType = type;\n          break;\n        case 11:\n          candidateType = type.render;\n      }\n      if (null === resolveFamily)\n        throw Error(\"Expected resolveFamily to be set during hot reload.\");\n      var needsRender = !1;\n      type = !1;\n      null !== candidateType &&\n        ((candidateType = resolveFamily(candidateType)),\n        void 0 !== candidateType &&\n          (staleFamilies.has(candidateType)\n            ? (type = !0)\n            : updatedFamilies.has(candidateType) &&\n              (1 === tag ? (type = !0) : (needsRender = !0))));\n      null !== failedBoundaries &&\n        (failedBoundaries.has(fiber) ||\n          (null !== alternate && failedBoundaries.has(alternate))) &&\n        (type = !0);\n      type && (fiber._debugNeedsRemount = !0);\n      if (type || needsRender)\n        (alternate = enqueueConcurrentRenderForLane(fiber, 2)),\n          null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);\n      null === child ||\n        type ||\n        scheduleFibersWithFamiliesRecursively(\n          child,\n          updatedFamilies,\n          staleFamilies\n        );\n      null !== sibling &&\n        scheduleFibersWithFamiliesRecursively(\n          sibling,\n          updatedFamilies,\n          staleFamilies\n        );\n    }\n    function FiberNode(tag, pendingProps, key, mode) {\n      this.tag = tag;\n      this.key = key;\n      this.sibling =\n        this.child =\n        this.return =\n        this.stateNode =\n        this.type =\n        this.elementType =\n          null;\n      this.index = 0;\n      this.refCleanup = this.ref = null;\n      this.pendingProps = pendingProps;\n      this.dependencies =\n        this.memoizedState =\n        this.updateQueue =\n        this.memoizedProps =\n          null;\n      this.mode = mode;\n      this.subtreeFlags = this.flags = 0;\n      this.deletions = null;\n      this.childLanes = this.lanes = 0;\n      this.alternate = null;\n      this.actualDuration = -0;\n      this.actualStartTime = -1.1;\n      this.treeBaseDuration = this.selfBaseDuration = -0;\n      this._debugOwner = this._debugInfo = null;\n      this._debugNeedsRemount = !1;\n      this._debugHookTypes = null;\n      hasBadMapPolyfill ||\n        \"function\" !== typeof Object.preventExtensions ||\n        Object.preventExtensions(this);\n    }\n    function shouldConstruct(Component) {\n      Component = Component.prototype;\n      return !(!Component || !Component.isReactComponent);\n    }\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n      null === workInProgress\n        ? ((workInProgress = createFiber(\n            current.tag,\n            pendingProps,\n            current.key,\n            current.mode\n          )),\n          (workInProgress.elementType = current.elementType),\n          (workInProgress.type = current.type),\n          (workInProgress.stateNode = current.stateNode),\n          (workInProgress._debugOwner = current._debugOwner),\n          (workInProgress._debugHookTypes = current._debugHookTypes),\n          (workInProgress.alternate = current),\n          (current.alternate = workInProgress))\n        : ((workInProgress.pendingProps = pendingProps),\n          (workInProgress.type = current.type),\n          (workInProgress.flags = 0),\n          (workInProgress.subtreeFlags = 0),\n          (workInProgress.deletions = null),\n          (workInProgress.actualDuration = -0),\n          (workInProgress.actualStartTime = -1.1));\n      workInProgress.flags = current.flags & 31457280;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue;\n      pendingProps = current.dependencies;\n      workInProgress.dependencies =\n        null === pendingProps\n          ? null\n          : {\n              lanes: pendingProps.lanes,\n              firstContext: pendingProps.firstContext,\n              _debugThenableState: pendingProps._debugThenableState\n            };\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      workInProgress.refCleanup = current.refCleanup;\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n      workInProgress._debugInfo = current._debugInfo;\n      workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n      switch (workInProgress.tag) {\n        case 0:\n        case 15:\n          workInProgress.type = resolveFunctionForHotReloading(current.type);\n          break;\n        case 1:\n          workInProgress.type = resolveFunctionForHotReloading(current.type);\n          break;\n        case 11:\n          workInProgress.type = resolveForwardRefForHotReloading(current.type);\n      }\n      return workInProgress;\n    }\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      workInProgress.flags &= 31457282;\n      var current = workInProgress.alternate;\n      null === current\n        ? ((workInProgress.childLanes = 0),\n          (workInProgress.lanes = renderLanes),\n          (workInProgress.child = null),\n          (workInProgress.subtreeFlags = 0),\n          (workInProgress.memoizedProps = null),\n          (workInProgress.memoizedState = null),\n          (workInProgress.updateQueue = null),\n          (workInProgress.dependencies = null),\n          (workInProgress.stateNode = null),\n          (workInProgress.selfBaseDuration = 0),\n          (workInProgress.treeBaseDuration = 0))\n        : ((workInProgress.childLanes = current.childLanes),\n          (workInProgress.lanes = current.lanes),\n          (workInProgress.child = current.child),\n          (workInProgress.subtreeFlags = 0),\n          (workInProgress.deletions = null),\n          (workInProgress.memoizedProps = current.memoizedProps),\n          (workInProgress.memoizedState = current.memoizedState),\n          (workInProgress.updateQueue = current.updateQueue),\n          (workInProgress.type = current.type),\n          (renderLanes = current.dependencies),\n          (workInProgress.dependencies =\n            null === renderLanes\n              ? null\n              : {\n                  lanes: renderLanes.lanes,\n                  firstContext: renderLanes.firstContext,\n                  _debugThenableState: renderLanes._debugThenableState\n                }),\n          (workInProgress.selfBaseDuration = current.selfBaseDuration),\n          (workInProgress.treeBaseDuration = current.treeBaseDuration));\n      return workInProgress;\n    }\n    function createFiberFromTypeAndProps(\n      type,\n      key,\n      pendingProps,\n      owner,\n      mode,\n      lanes\n    ) {\n      var fiberTag = 0,\n        resolvedType = type;\n      if (\"function\" === typeof type)\n        shouldConstruct(type) && (fiberTag = 1),\n          (resolvedType = resolveFunctionForHotReloading(resolvedType));\n      else if (\"string\" === typeof type)\n        supportsResources && supportsSingletons\n          ? ((fiberTag = getHostContext()),\n            (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)\n              ? 26\n              : isHostSingletonType(type)\n                ? 27\n                : 5))\n          : supportsResources\n            ? ((fiberTag = getHostContext()),\n              (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)\n                ? 26\n                : 5))\n            : (fiberTag = supportsSingletons\n                ? isHostSingletonType(type)\n                  ? 27\n                  : 5\n                : 5);\n      else\n        a: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(\n              pendingProps.children,\n              mode,\n              lanes,\n              key\n            );\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = 8;\n            mode |= 24;\n            break;\n          case REACT_PROFILER_TYPE:\n            return (\n              (type = pendingProps),\n              (owner = mode),\n              \"string\" !== typeof type.id &&\n                console.error(\n                  'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n                  typeof type.id\n                ),\n              (key = createFiber(12, type, key, owner | 2)),\n              (key.elementType = REACT_PROFILER_TYPE),\n              (key.lanes = lanes),\n              (key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }),\n              key\n            );\n          case REACT_SUSPENSE_TYPE:\n            return (\n              (key = createFiber(13, pendingProps, key, mode)),\n              (key.elementType = REACT_SUSPENSE_TYPE),\n              (key.lanes = lanes),\n              key\n            );\n          case REACT_SUSPENSE_LIST_TYPE:\n            return (\n              (key = createFiber(19, pendingProps, key, mode)),\n              (key.elementType = REACT_SUSPENSE_LIST_TYPE),\n              (key.lanes = lanes),\n              key\n            );\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n          default:\n            if (\"object\" === typeof type && null !== type)\n              switch (type.$$typeof) {\n                case REACT_PROVIDER_TYPE:\n                case REACT_CONTEXT_TYPE:\n                  fiberTag = 10;\n                  break a;\n                case REACT_CONSUMER_TYPE:\n                  fiberTag = 9;\n                  break a;\n                case REACT_FORWARD_REF_TYPE:\n                  fiberTag = 11;\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                  break a;\n                case REACT_MEMO_TYPE:\n                  fiberTag = 14;\n                  break a;\n                case REACT_LAZY_TYPE:\n                  fiberTag = 16;\n                  resolvedType = null;\n                  break a;\n              }\n            resolvedType = \"\";\n            if (\n              void 0 === type ||\n              (\"object\" === typeof type &&\n                null !== type &&\n                0 === Object.keys(type).length)\n            )\n              resolvedType +=\n                \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n            null === type\n              ? (pendingProps = \"null\")\n              : isArrayImpl(type)\n                ? (pendingProps = \"array\")\n                : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n                  ? ((pendingProps =\n                      \"<\" +\n                      (getComponentNameFromType(type.type) || \"Unknown\") +\n                      \" />\"),\n                    (resolvedType =\n                      \" Did you accidentally export a JSX literal instead of a component?\"))\n                  : (pendingProps = typeof type);\n            fiberTag = owner\n              ? \"number\" === typeof owner.tag\n                ? getComponentNameFromFiber(owner)\n                : \"string\" === typeof owner.name\n                  ? owner.name\n                  : null\n              : null;\n            fiberTag &&\n              (resolvedType +=\n                \"\\n\\nCheck the render method of `\" + fiberTag + \"`.\");\n            fiberTag = 29;\n            pendingProps = Error(\n              \"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: \" +\n                (pendingProps + \".\" + resolvedType)\n            );\n            resolvedType = null;\n        }\n      key = createFiber(fiberTag, pendingProps, key, mode);\n      key.elementType = type;\n      key.type = resolvedType;\n      key.lanes = lanes;\n      key._debugOwner = owner;\n      return key;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      mode = createFiberFromTypeAndProps(\n        element.type,\n        element.key,\n        element.props,\n        element._owner,\n        mode,\n        lanes\n      );\n      mode._debugOwner = element._owner;\n      return mode;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      elements = createFiber(7, elements, key, mode);\n      elements.lanes = lanes;\n      return elements;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      pendingProps = createFiber(22, pendingProps, key, mode);\n      pendingProps.elementType = REACT_OFFSCREEN_TYPE;\n      pendingProps.lanes = lanes;\n      var primaryChildInstance = {\n        _visibility: 1,\n        _pendingVisibility: 1,\n        _pendingMarkers: null,\n        _retryCache: null,\n        _transitions: null,\n        _current: null,\n        detach: function () {\n          var instance = primaryChildInstance,\n            fiber = instance._current;\n          if (null === fiber)\n            throw Error(\n              \"Calling Offscreen.detach before instance handle has been set.\"\n            );\n          if (0 === (instance._pendingVisibility & 2)) {\n            var root = enqueueConcurrentRenderForLane(fiber, 2);\n            null !== root &&\n              ((instance._pendingVisibility |= 2),\n              scheduleUpdateOnFiber(root, fiber, 2));\n          }\n        },\n        attach: function () {\n          var instance = primaryChildInstance,\n            fiber = instance._current;\n          if (null === fiber)\n            throw Error(\n              \"Calling Offscreen.detach before instance handle has been set.\"\n            );\n          if (0 !== (instance._pendingVisibility & 2)) {\n            var root = enqueueConcurrentRenderForLane(fiber, 2);\n            null !== root &&\n              ((instance._pendingVisibility &= -3),\n              scheduleUpdateOnFiber(root, fiber, 2));\n          }\n        }\n      };\n      pendingProps.stateNode = primaryChildInstance;\n      return pendingProps;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      content = createFiber(6, content, null, mode);\n      content.lanes = lanes;\n      return content;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      mode = createFiber(\n        4,\n        null !== portal.children ? portal.children : [],\n        portal.key,\n        mode\n      );\n      mode.lanes = lanes;\n      mode.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        implementation: portal.implementation\n      };\n      return mode;\n    }\n    function FiberRootNode(\n      containerInfo,\n      tag,\n      hydrate,\n      identifierPrefix,\n      onUncaughtError,\n      onCaughtError,\n      onRecoverableError,\n      formState\n    ) {\n      this.tag = 1;\n      this.containerInfo = containerInfo;\n      this.finishedWork =\n        this.pingCache =\n        this.current =\n        this.pendingChildren =\n          null;\n      this.timeoutHandle = noTimeout;\n      this.callbackNode =\n        this.next =\n        this.pendingContext =\n        this.context =\n        this.cancelPendingCommit =\n          null;\n      this.callbackPriority = 0;\n      this.expirationTimes = createLaneMap(-1);\n      this.entangledLanes =\n        this.shellSuspendCounter =\n        this.errorRecoveryDisabledLanes =\n        this.finishedLanes =\n        this.expiredLanes =\n        this.warmLanes =\n        this.pingedLanes =\n        this.suspendedLanes =\n        this.pendingLanes =\n          0;\n      this.entanglements = createLaneMap(0);\n      this.hiddenUpdates = createLaneMap(null);\n      this.identifierPrefix = identifierPrefix;\n      this.onUncaughtError = onUncaughtError;\n      this.onCaughtError = onCaughtError;\n      this.onRecoverableError = onRecoverableError;\n      this.pooledCache = null;\n      this.pooledCacheLanes = 0;\n      this.formState = formState;\n      this.incompleteTransitions = new Map();\n      this.passiveEffectDuration = this.effectDuration = -0;\n      this.memoizedUpdaters = new Set();\n      containerInfo = this.pendingUpdatersLaneMap = [];\n      for (tag = 0; 31 > tag; tag++) containerInfo.push(new Set());\n      this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n    }\n    function createFiberRoot(\n      containerInfo,\n      tag,\n      hydrate,\n      initialChildren,\n      hydrationCallbacks,\n      isStrictMode,\n      identifierPrefix,\n      onUncaughtError,\n      onCaughtError,\n      onRecoverableError,\n      transitionCallbacks,\n      formState\n    ) {\n      containerInfo = new FiberRootNode(\n        containerInfo,\n        tag,\n        hydrate,\n        identifierPrefix,\n        onUncaughtError,\n        onCaughtError,\n        onRecoverableError,\n        formState\n      );\n      tag = 1;\n      !0 === isStrictMode && (tag |= 24);\n      isDevToolsPresent && (tag |= 2);\n      isStrictMode = createFiber(3, null, null, tag);\n      containerInfo.current = isStrictMode;\n      isStrictMode.stateNode = containerInfo;\n      tag = createCache();\n      retainCache(tag);\n      containerInfo.pooledCache = tag;\n      retainCache(tag);\n      isStrictMode.memoizedState = {\n        element: initialChildren,\n        isDehydrated: hydrate,\n        cache: tag\n      };\n      initializeUpdateQueue(isStrictMode);\n      return containerInfo;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) return emptyContextObject;\n      parentComponent = emptyContextObject;\n      return parentComponent;\n    }\n    function updateContainerSync(\n      element,\n      container,\n      parentComponent,\n      callback\n    ) {\n      0 === container.tag && flushPassiveEffects();\n      updateContainerImpl(\n        container.current,\n        2,\n        element,\n        container,\n        parentComponent,\n        callback\n      );\n      return 2;\n    }\n    function updateContainerImpl(\n      rootFiber,\n      lane,\n      element,\n      container,\n      parentComponent,\n      callback\n    ) {\n      if (\n        injectedHook &&\n        \"function\" === typeof injectedHook.onScheduleFiberRoot\n      )\n        try {\n          injectedHook.onScheduleFiberRoot(rendererID, container, element);\n        } catch (err) {\n          hasLoggedError ||\n            ((hasLoggedError = !0),\n            console.error(\n              \"React instrumentation encountered an error: %s\",\n              err\n            ));\n        }\n      null !== injectedProfilingHooks &&\n        \"function\" === typeof injectedProfilingHooks.markRenderScheduled &&\n        injectedProfilingHooks.markRenderScheduled(lane);\n      parentComponent = getContextForSubtree(parentComponent);\n      null === container.context\n        ? (container.context = parentComponent)\n        : (container.pendingContext = parentComponent);\n      isRendering &&\n        null !== current &&\n        !didWarnAboutNestedUpdates &&\n        ((didWarnAboutNestedUpdates = !0),\n        console.error(\n          \"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\\n\\nCheck the render method of %s.\",\n          getComponentNameFromFiber(current) || \"Unknown\"\n        ));\n      container = createUpdate(lane);\n      container.payload = { element: element };\n      callback = void 0 === callback ? null : callback;\n      null !== callback &&\n        (\"function\" !== typeof callback &&\n          console.error(\n            \"Expected the last optional `callback` argument to be a function. Instead received: %s.\",\n            callback\n          ),\n        (container.callback = callback));\n      element = enqueueUpdate(rootFiber, container, lane);\n      null !== element &&\n        (scheduleUpdateOnFiber(element, rootFiber, lane),\n        entangleTransitions(element, rootFiber, lane));\n    }\n    function markRetryLaneImpl(fiber, retryLane) {\n      fiber = fiber.memoizedState;\n      if (null !== fiber && null !== fiber.dehydrated) {\n        var a = fiber.retryLane;\n        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;\n      }\n    }\n    function markRetryLaneIfNotHydrated(fiber, retryLane) {\n      markRetryLaneImpl(fiber, retryLane);\n      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);\n    }\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n    function getLaneLabelMap() {\n      for (var map = new Map(), lane = 1, index = 0; 31 > index; index++) {\n        var label = getLabelForLane(lane);\n        map.set(lane, label);\n        lane *= 2;\n      }\n      return map;\n    }\n    var exports = {};\n    (\"use strict\");\n    var React = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\"),\n      Scheduler = __webpack_require__(/*! scheduler */ \"(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/index.js\"),\n      assign = Object.assign,\n      REACT_LEGACY_ELEMENT_TYPE = Symbol.for(\"react.element\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n      REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\"),\n      REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n    Symbol.for(\"react.scope\");\n    Symbol.for(\"react.debug_trace_mode\");\n    var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n    Symbol.for(\"react.legacy_hidden\");\n    Symbol.for(\"react.tracing_marker\");\n    var REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var current = null,\n      isRendering = !1,\n      isArrayImpl = Array.isArray,\n      rendererVersion = $$$config.rendererVersion,\n      rendererPackageName = $$$config.rendererPackageName,\n      extraDevToolsConfig = $$$config.extraDevToolsConfig,\n      getPublicInstance = $$$config.getPublicInstance,\n      getRootHostContext = $$$config.getRootHostContext,\n      getChildHostContext = $$$config.getChildHostContext,\n      prepareForCommit = $$$config.prepareForCommit,\n      resetAfterCommit = $$$config.resetAfterCommit,\n      createInstance = $$$config.createInstance,\n      appendInitialChild = $$$config.appendInitialChild,\n      finalizeInitialChildren = $$$config.finalizeInitialChildren,\n      shouldSetTextContent = $$$config.shouldSetTextContent,\n      createTextInstance = $$$config.createTextInstance,\n      scheduleTimeout = $$$config.scheduleTimeout,\n      cancelTimeout = $$$config.cancelTimeout,\n      noTimeout = $$$config.noTimeout,\n      isPrimaryRenderer = $$$config.isPrimaryRenderer;\n    $$$config.warnsIfNotActing;\n    var supportsMutation = $$$config.supportsMutation,\n      supportsPersistence = $$$config.supportsPersistence,\n      supportsHydration = $$$config.supportsHydration,\n      getInstanceFromNode = $$$config.getInstanceFromNode;\n    $$$config.beforeActiveInstanceBlur;\n    $$$config.afterActiveInstanceBlur;\n    var preparePortalMount = $$$config.preparePortalMount;\n    $$$config.prepareScopeUpdate;\n    $$$config.getInstanceFromScope;\n    var setCurrentUpdatePriority = $$$config.setCurrentUpdatePriority,\n      getCurrentUpdatePriority = $$$config.getCurrentUpdatePriority,\n      resolveUpdatePriority = $$$config.resolveUpdatePriority;\n    $$$config.resolveEventType;\n    $$$config.resolveEventTimeStamp;\n    var shouldAttemptEagerTransition = $$$config.shouldAttemptEagerTransition,\n      detachDeletedInstance = $$$config.detachDeletedInstance;\n    $$$config.requestPostPaintCallback;\n    var maySuspendCommit = $$$config.maySuspendCommit,\n      preloadInstance = $$$config.preloadInstance,\n      startSuspendingCommit = $$$config.startSuspendingCommit,\n      suspendInstance = $$$config.suspendInstance,\n      waitForCommitToBeReady = $$$config.waitForCommitToBeReady,\n      NotPendingTransition = $$$config.NotPendingTransition,\n      HostTransitionContext = $$$config.HostTransitionContext,\n      resetFormInstance = $$$config.resetFormInstance,\n      bindToConsole = $$$config.bindToConsole,\n      supportsMicrotasks = $$$config.supportsMicrotasks,\n      scheduleMicrotask = $$$config.scheduleMicrotask,\n      supportsTestSelectors = $$$config.supportsTestSelectors,\n      findFiberRoot = $$$config.findFiberRoot,\n      getBoundingRect = $$$config.getBoundingRect,\n      getTextContent = $$$config.getTextContent,\n      isHiddenSubtree = $$$config.isHiddenSubtree,\n      matchAccessibilityRole = $$$config.matchAccessibilityRole,\n      setFocusIfFocusable = $$$config.setFocusIfFocusable,\n      setupIntersectionObserver = $$$config.setupIntersectionObserver,\n      appendChild = $$$config.appendChild,\n      appendChildToContainer = $$$config.appendChildToContainer,\n      commitTextUpdate = $$$config.commitTextUpdate,\n      commitMount = $$$config.commitMount,\n      commitUpdate = $$$config.commitUpdate,\n      insertBefore = $$$config.insertBefore,\n      insertInContainerBefore = $$$config.insertInContainerBefore,\n      removeChild = $$$config.removeChild,\n      removeChildFromContainer = $$$config.removeChildFromContainer,\n      resetTextContent = $$$config.resetTextContent,\n      hideInstance = $$$config.hideInstance,\n      hideTextInstance = $$$config.hideTextInstance,\n      unhideInstance = $$$config.unhideInstance,\n      unhideTextInstance = $$$config.unhideTextInstance,\n      clearContainer = $$$config.clearContainer,\n      cloneInstance = $$$config.cloneInstance,\n      createContainerChildSet = $$$config.createContainerChildSet,\n      appendChildToContainerChildSet = $$$config.appendChildToContainerChildSet,\n      finalizeContainerChildren = $$$config.finalizeContainerChildren,\n      replaceContainerChildren = $$$config.replaceContainerChildren,\n      cloneHiddenInstance = $$$config.cloneHiddenInstance,\n      cloneHiddenTextInstance = $$$config.cloneHiddenTextInstance,\n      isSuspenseInstancePending = $$$config.isSuspenseInstancePending,\n      isSuspenseInstanceFallback = $$$config.isSuspenseInstanceFallback,\n      getSuspenseInstanceFallbackErrorDetails =\n        $$$config.getSuspenseInstanceFallbackErrorDetails,\n      registerSuspenseInstanceRetry = $$$config.registerSuspenseInstanceRetry,\n      canHydrateFormStateMarker = $$$config.canHydrateFormStateMarker,\n      isFormStateMarkerMatching = $$$config.isFormStateMarkerMatching,\n      getNextHydratableSibling = $$$config.getNextHydratableSibling,\n      getFirstHydratableChild = $$$config.getFirstHydratableChild,\n      getFirstHydratableChildWithinContainer =\n        $$$config.getFirstHydratableChildWithinContainer,\n      getFirstHydratableChildWithinSuspenseInstance =\n        $$$config.getFirstHydratableChildWithinSuspenseInstance,\n      canHydrateInstance = $$$config.canHydrateInstance,\n      canHydrateTextInstance = $$$config.canHydrateTextInstance,\n      canHydrateSuspenseInstance = $$$config.canHydrateSuspenseInstance,\n      hydrateInstance = $$$config.hydrateInstance,\n      hydrateTextInstance = $$$config.hydrateTextInstance,\n      hydrateSuspenseInstance = $$$config.hydrateSuspenseInstance,\n      getNextHydratableInstanceAfterSuspenseInstance =\n        $$$config.getNextHydratableInstanceAfterSuspenseInstance,\n      commitHydratedContainer = $$$config.commitHydratedContainer,\n      commitHydratedSuspenseInstance = $$$config.commitHydratedSuspenseInstance,\n      clearSuspenseBoundary = $$$config.clearSuspenseBoundary,\n      clearSuspenseBoundaryFromContainer =\n        $$$config.clearSuspenseBoundaryFromContainer,\n      shouldDeleteUnhydratedTailInstances =\n        $$$config.shouldDeleteUnhydratedTailInstances,\n      diffHydratedPropsForDevWarnings =\n        $$$config.diffHydratedPropsForDevWarnings,\n      diffHydratedTextForDevWarnings = $$$config.diffHydratedTextForDevWarnings,\n      describeHydratableInstanceForDevWarnings =\n        $$$config.describeHydratableInstanceForDevWarnings,\n      validateHydratableInstance = $$$config.validateHydratableInstance,\n      validateHydratableTextInstance = $$$config.validateHydratableTextInstance,\n      supportsResources = $$$config.supportsResources,\n      isHostHoistableType = $$$config.isHostHoistableType,\n      getHoistableRoot = $$$config.getHoistableRoot,\n      getResource = $$$config.getResource,\n      acquireResource = $$$config.acquireResource,\n      releaseResource = $$$config.releaseResource,\n      hydrateHoistable = $$$config.hydrateHoistable,\n      mountHoistable = $$$config.mountHoistable,\n      unmountHoistable = $$$config.unmountHoistable,\n      createHoistableInstance = $$$config.createHoistableInstance,\n      prepareToCommitHoistables = $$$config.prepareToCommitHoistables,\n      mayResourceSuspendCommit = $$$config.mayResourceSuspendCommit,\n      preloadResource = $$$config.preloadResource,\n      suspendResource = $$$config.suspendResource,\n      supportsSingletons = $$$config.supportsSingletons,\n      resolveSingletonInstance = $$$config.resolveSingletonInstance,\n      clearSingleton = $$$config.clearSingleton,\n      acquireSingletonInstance = $$$config.acquireSingletonInstance,\n      releaseSingletonInstance = $$$config.releaseSingletonInstance,\n      isHostSingletonType = $$$config.isHostSingletonType,\n      valueStack = [];\n    var fiberStack = [];\n    var index$jscomp$0 = -1,\n      emptyContextObject = {};\n    Object.freeze(emptyContextObject);\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,\n      log$1 = Math.log,\n      LN2 = Math.LN2,\n      nextTransitionLane = 128,\n      nextRetryLane = 4194304,\n      scheduleCallback$3 = Scheduler.unstable_scheduleCallback,\n      cancelCallback$1 = Scheduler.unstable_cancelCallback,\n      shouldYield = Scheduler.unstable_shouldYield,\n      requestPaint = Scheduler.unstable_requestPaint,\n      now$1 = Scheduler.unstable_now,\n      ImmediatePriority = Scheduler.unstable_ImmediatePriority,\n      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,\n      NormalPriority$1 = Scheduler.unstable_NormalPriority,\n      IdlePriority = Scheduler.unstable_IdlePriority,\n      log = Scheduler.log,\n      unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,\n      rendererID = null,\n      injectedHook = null,\n      injectedProfilingHooks = null,\n      hasLoggedError = !1,\n      isDevToolsPresent = \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\n      CapturedStacks = new WeakMap(),\n      forkStack = [],\n      forkStackIndex = 0,\n      treeForkProvider = null,\n      treeForkCount = 0,\n      idStack = [],\n      idStackIndex = 0,\n      treeContextProvider = null,\n      treeContextId = 1,\n      treeContextOverflow = \"\",\n      contextStackCursor = createCursor(null),\n      contextFiberStackCursor = createCursor(null),\n      rootInstanceStackCursor = createCursor(null),\n      hostTransitionProviderCursor = createCursor(null),\n      needsEscaping = /[\"'&<>\\n\\t]|^\\s|\\s$/,\n      hydrationParentFiber = null,\n      nextHydratableInstance = null,\n      isHydrating = !1,\n      didSuspendOrErrorDEV = !1,\n      hydrationDiffRootDEV = null,\n      hydrationErrors = null,\n      rootOrSingletonContext = !1,\n      HydrationMismatchException = Error(\n        \"Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React.\"\n      ),\n      NoMode = 0,\n      concurrentQueues = [],\n      concurrentQueuesIndex = 0,\n      concurrentlyUpdatedLanes = 0,\n      now = Scheduler.unstable_now,\n      commitStartTime = -0,\n      profilerStartTime = -1.1,\n      profilerEffectDuration = -0,\n      currentUpdateIsNested = !1,\n      nestedUpdateScheduled = !1,\n      firstScheduledRoot = null,\n      lastScheduledRoot = null,\n      didScheduleMicrotask = !1,\n      didScheduleMicrotask_act = !1,\n      mightHavePendingSyncWork = !1,\n      isFlushingWork = !1,\n      currentEventTransitionLane = 0,\n      fakeActCallbackNode$1 = {},\n      currentEntangledListeners = null,\n      currentEntangledPendingCount = 0,\n      currentEntangledLane = 0,\n      currentEntangledActionThenable = null,\n      UpdateState = 0,\n      ReplaceState = 1,\n      ForceUpdate = 2,\n      CaptureUpdate = 3,\n      hasForceUpdate = !1;\n    var didWarnUpdateInsideUpdate = !1;\n    var currentlyProcessingQueue = null;\n    var didReadFromEntangledAsyncAction = !1,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      ReactStrictModeWarnings = {\n        recordUnsafeLifecycleWarnings: function () {},\n        flushPendingUnsafeLifecycleWarnings: function () {},\n        recordLegacyContextWarning: function () {},\n        flushLegacyContextWarning: function () {},\n        discardPendingWarnings: function () {}\n      },\n      pendingComponentWillMountWarnings = [],\n      pendingUNSAFE_ComponentWillMountWarnings = [],\n      pendingComponentWillReceivePropsWarnings = [],\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [],\n      pendingComponentWillUpdateWarnings = [],\n      pendingUNSAFE_ComponentWillUpdateWarnings = [],\n      didWarnAboutUnsafeLifecycles = new Set();\n    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (\n      fiber,\n      instance\n    ) {\n      didWarnAboutUnsafeLifecycles.has(fiber.type) ||\n        (\"function\" === typeof instance.componentWillMount &&\n          !0 !== instance.componentWillMount.__suppressDeprecationWarning &&\n          pendingComponentWillMountWarnings.push(fiber),\n        fiber.mode & 8 &&\n          \"function\" === typeof instance.UNSAFE_componentWillMount &&\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber),\n        \"function\" === typeof instance.componentWillReceiveProps &&\n          !0 !==\n            instance.componentWillReceiveProps.__suppressDeprecationWarning &&\n          pendingComponentWillReceivePropsWarnings.push(fiber),\n        fiber.mode & 8 &&\n          \"function\" === typeof instance.UNSAFE_componentWillReceiveProps &&\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber),\n        \"function\" === typeof instance.componentWillUpdate &&\n          !0 !== instance.componentWillUpdate.__suppressDeprecationWarning &&\n          pendingComponentWillUpdateWarnings.push(fiber),\n        fiber.mode & 8 &&\n          \"function\" === typeof instance.UNSAFE_componentWillUpdate &&\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));\n    };\n    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n      var componentWillMountUniqueNames = new Set();\n      0 < pendingComponentWillMountWarnings.length &&\n        (pendingComponentWillMountWarnings.forEach(function (fiber) {\n          componentWillMountUniqueNames.add(\n            getComponentNameFromFiber(fiber) || \"Component\"\n          );\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\n        }),\n        (pendingComponentWillMountWarnings = []));\n      var UNSAFE_componentWillMountUniqueNames = new Set();\n      0 < pendingUNSAFE_ComponentWillMountWarnings.length &&\n        (pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n          UNSAFE_componentWillMountUniqueNames.add(\n            getComponentNameFromFiber(fiber) || \"Component\"\n          );\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\n        }),\n        (pendingUNSAFE_ComponentWillMountWarnings = []));\n      var componentWillReceivePropsUniqueNames = new Set();\n      0 < pendingComponentWillReceivePropsWarnings.length &&\n        (pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n          componentWillReceivePropsUniqueNames.add(\n            getComponentNameFromFiber(fiber) || \"Component\"\n          );\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\n        }),\n        (pendingComponentWillReceivePropsWarnings = []));\n      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length &&\n        (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(\n          function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(\n              getComponentNameFromFiber(fiber) || \"Component\"\n            );\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          }\n        ),\n        (pendingUNSAFE_ComponentWillReceivePropsWarnings = []));\n      var componentWillUpdateUniqueNames = new Set();\n      0 < pendingComponentWillUpdateWarnings.length &&\n        (pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n          componentWillUpdateUniqueNames.add(\n            getComponentNameFromFiber(fiber) || \"Component\"\n          );\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\n        }),\n        (pendingComponentWillUpdateWarnings = []));\n      var UNSAFE_componentWillUpdateUniqueNames = new Set();\n      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length &&\n        (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n          UNSAFE_componentWillUpdateUniqueNames.add(\n            getComponentNameFromFiber(fiber) || \"Component\"\n          );\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\n        }),\n        (pendingUNSAFE_ComponentWillUpdateWarnings = []));\n      if (0 < UNSAFE_componentWillMountUniqueNames.size) {\n        var sortedNames = setToSortedString(\n          UNSAFE_componentWillMountUniqueNames\n        );\n        console.error(\n          \"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\\nPlease update the following components: %s\",\n          sortedNames\n        );\n      }\n      0 < UNSAFE_componentWillReceivePropsUniqueNames.size &&\n        ((sortedNames = setToSortedString(\n          UNSAFE_componentWillReceivePropsUniqueNames\n        )),\n        console.error(\n          \"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n\\nPlease update the following components: %s\",\n          sortedNames\n        ));\n      0 < UNSAFE_componentWillUpdateUniqueNames.size &&\n        ((sortedNames = setToSortedString(\n          UNSAFE_componentWillUpdateUniqueNames\n        )),\n        console.error(\n          \"Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n\\nPlease update the following components: %s\",\n          sortedNames\n        ));\n      0 < componentWillMountUniqueNames.size &&\n        ((sortedNames = setToSortedString(componentWillMountUniqueNames)),\n        console.warn(\n          \"componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",\n          sortedNames\n        ));\n      0 < componentWillReceivePropsUniqueNames.size &&\n        ((sortedNames = setToSortedString(\n          componentWillReceivePropsUniqueNames\n        )),\n        console.warn(\n          \"componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",\n          sortedNames\n        ));\n      0 < componentWillUpdateUniqueNames.size &&\n        ((sortedNames = setToSortedString(componentWillUpdateUniqueNames)),\n        console.warn(\n          \"componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",\n          sortedNames\n        ));\n    };\n    var pendingLegacyContextWarning = new Map(),\n      didWarnAboutLegacyContext = new Set();\n    ReactStrictModeWarnings.recordLegacyContextWarning = function (\n      fiber,\n      instance\n    ) {\n      var strictRoot = null;\n      for (var node = fiber; null !== node; )\n        node.mode & 8 && (strictRoot = node), (node = node.return);\n      null === strictRoot\n        ? console.error(\n            \"Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.\"\n          )\n        : !didWarnAboutLegacyContext.has(fiber.type) &&\n          ((node = pendingLegacyContextWarning.get(strictRoot)),\n          null != fiber.type.contextTypes ||\n            null != fiber.type.childContextTypes ||\n            (null !== instance &&\n              \"function\" === typeof instance.getChildContext)) &&\n          (void 0 === node &&\n            ((node = []), pendingLegacyContextWarning.set(strictRoot, node)),\n          node.push(fiber));\n    };\n    ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n      pendingLegacyContextWarning.forEach(function (fiberArray) {\n        if (0 !== fiberArray.length) {\n          var firstFiber = fiberArray[0],\n            uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n          runWithFiberInDEV(firstFiber, function () {\n            console.error(\n              \"Legacy context API has been detected within a strict-mode tree.\\n\\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\\n\\nPlease update the following components: %s\\n\\nLearn more about this warning here: https://react.dev/link/legacy-context\",\n              sortedNames\n            );\n          });\n        }\n      });\n    };\n    ReactStrictModeWarnings.discardPendingWarnings = function () {\n      pendingComponentWillMountWarnings = [];\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n      pendingComponentWillReceivePropsWarnings = [];\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      pendingComponentWillUpdateWarnings = [];\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n      pendingLegacyContextWarning = new Map();\n    };\n    var SuspenseException = Error(\n        \"Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\\n\\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`\"\n      ),\n      SuspenseyCommitException = Error(\n        \"Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React.\"\n      ),\n      noopSuspenseyCommitThenable = {\n        then: function () {\n          console.error(\n            'Internal React error: A listener was unexpectedly attached to a \"noop\" thenable. This is a bug in React. Please file an issue.'\n          );\n        }\n      },\n      suspendedThenable = null,\n      needsToResetSuspendedThenableDEV = !1,\n      callComponent = {\n        \"react-stack-bottom-frame\": function (Component, props, secondArg) {\n          var wasRendering = isRendering;\n          isRendering = !0;\n          try {\n            return Component(props, secondArg);\n          } finally {\n            isRendering = wasRendering;\n          }\n        }\n      },\n      callComponentInDEV =\n        callComponent[\"react-stack-bottom-frame\"].bind(callComponent),\n      callRender = {\n        \"react-stack-bottom-frame\": function (instance) {\n          var wasRendering = isRendering;\n          isRendering = !0;\n          try {\n            return instance.render();\n          } finally {\n            isRendering = wasRendering;\n          }\n        }\n      },\n      callRenderInDEV = callRender[\"react-stack-bottom-frame\"].bind(callRender),\n      callComponentDidMount = {\n        \"react-stack-bottom-frame\": function (finishedWork, instance) {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      },\n      callComponentDidMountInDEV = callComponentDidMount[\n        \"react-stack-bottom-frame\"\n      ].bind(callComponentDidMount),\n      callComponentDidUpdate = {\n        \"react-stack-bottom-frame\": function (\n          finishedWork,\n          instance,\n          prevProps,\n          prevState,\n          snapshot\n        ) {\n          try {\n            instance.componentDidUpdate(prevProps, prevState, snapshot);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      },\n      callComponentDidUpdateInDEV = callComponentDidUpdate[\n        \"react-stack-bottom-frame\"\n      ].bind(callComponentDidUpdate),\n      callComponentDidCatch = {\n        \"react-stack-bottom-frame\": function (instance, errorInfo) {\n          var stack = errorInfo.stack;\n          instance.componentDidCatch(errorInfo.value, {\n            componentStack: null !== stack ? stack : \"\"\n          });\n        }\n      },\n      callComponentDidCatchInDEV = callComponentDidCatch[\n        \"react-stack-bottom-frame\"\n      ].bind(callComponentDidCatch),\n      callComponentWillUnmount = {\n        \"react-stack-bottom-frame\": function (\n          current,\n          nearestMountedAncestor,\n          instance\n        ) {\n          try {\n            instance.componentWillUnmount();\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n        }\n      },\n      callComponentWillUnmountInDEV = callComponentWillUnmount[\n        \"react-stack-bottom-frame\"\n      ].bind(callComponentWillUnmount),\n      callCreate = {\n        \"react-stack-bottom-frame\": function (effect) {\n          var create = effect.create;\n          effect = effect.inst;\n          create = create();\n          return (effect.destroy = create);\n        }\n      },\n      callCreateInDEV = callCreate[\"react-stack-bottom-frame\"].bind(callCreate),\n      callDestroy = {\n        \"react-stack-bottom-frame\": function (\n          current,\n          nearestMountedAncestor,\n          destroy\n        ) {\n          try {\n            destroy();\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n        }\n      },\n      callDestroyInDEV =\n        callDestroy[\"react-stack-bottom-frame\"].bind(callDestroy),\n      callLazyInit = {\n        \"react-stack-bottom-frame\": function (lazy) {\n          var init = lazy._init;\n          return init(lazy._payload);\n        }\n      },\n      callLazyInitInDEV =\n        callLazyInit[\"react-stack-bottom-frame\"].bind(callLazyInit),\n      thenableState$1 = null,\n      thenableIndexCounter$1 = 0,\n      currentDebugInfo = null,\n      didWarnAboutMaps;\n    var didWarnAboutGenerators = (didWarnAboutMaps = !1);\n    var ownerHasKeyUseWarning = {};\n    var ownerHasFunctionTypeWarning = {};\n    var ownerHasSymbolTypeWarning = {};\n    warnForMissingKey = function (returnFiber, workInProgress, child) {\n      if (\n        null !== child &&\n        \"object\" === typeof child &&\n        child._store &&\n        ((!child._store.validated && null == child.key) ||\n          2 === child._store.validated)\n      ) {\n        if (\"object\" !== typeof child._store)\n          throw Error(\n            \"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        child._store.validated = 1;\n        var componentName = getComponentNameFromFiber(returnFiber),\n          componentKey = componentName || \"null\";\n        if (!ownerHasKeyUseWarning[componentKey]) {\n          ownerHasKeyUseWarning[componentKey] = !0;\n          child = child._owner;\n          returnFiber = returnFiber._debugOwner;\n          var currentComponentErrorInfo = \"\";\n          returnFiber &&\n            \"number\" === typeof returnFiber.tag &&\n            (componentKey = getComponentNameFromFiber(returnFiber)) &&\n            (currentComponentErrorInfo =\n              \"\\n\\nCheck the render method of `\" + componentKey + \"`.\");\n          currentComponentErrorInfo ||\n            (componentName &&\n              (currentComponentErrorInfo =\n                \"\\n\\nCheck the top-level render call using <\" +\n                componentName +\n                \">.\"));\n          var childOwnerAppendix = \"\";\n          null != child &&\n            returnFiber !== child &&\n            ((componentName = null),\n            \"number\" === typeof child.tag\n              ? (componentName = getComponentNameFromFiber(child))\n              : \"string\" === typeof child.name && (componentName = child.name),\n            componentName &&\n              (childOwnerAppendix =\n                \" It was passed a child from \" + componentName + \".\"));\n          runWithFiberInDEV(workInProgress, function () {\n            console.error(\n              'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n              currentComponentErrorInfo,\n              childOwnerAppendix\n            );\n          });\n        }\n      }\n    };\n    var reconcileChildFibers = createChildReconciler(!0),\n      mountChildFibers = createChildReconciler(!1),\n      currentTreeHiddenStackCursor = createCursor(null),\n      prevEntangledRenderLanesCursor = createCursor(0),\n      suspenseHandlerStackCursor = createCursor(null),\n      shellBoundary = null,\n      SubtreeSuspenseContextMask = 1,\n      ForceSuspenseFallback = 2,\n      suspenseStackCursor = createCursor(0),\n      NoFlags = 0,\n      HasEffect = 1,\n      Insertion = 2,\n      Layout = 4,\n      Passive = 8,\n      didWarnUncachedGetSnapshot;\n    var didWarnAboutMismatchedHooksForComponent = new Set();\n    var didWarnAboutUseWrappedInTryCatch = new Set();\n    var didWarnAboutAsyncClientComponent = new Set();\n    var didWarnAboutUseFormState = new Set();\n    var renderLanes = 0,\n      currentlyRenderingFiber$1 = null,\n      currentHook = null,\n      workInProgressHook = null,\n      didScheduleRenderPhaseUpdate = !1,\n      didScheduleRenderPhaseUpdateDuringThisPass = !1,\n      shouldDoubleInvokeUserFnsInHooksDEV = !1,\n      localIdCounter = 0,\n      thenableIndexCounter = 0,\n      thenableState = null,\n      globalClientIdCounter = 0,\n      RE_RENDER_LIMIT = 25,\n      currentHookNameInDev = null,\n      hookTypesDev = null,\n      hookTypesUpdateIndexDev = -1,\n      ignorePreviousDependencies = !1;\n    var createFunctionComponentUpdateQueue = function () {\n      return { lastEffect: null, events: null, stores: null, memoCache: null };\n    };\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      use: use,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError\n    };\n    ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;\n    ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;\n    ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;\n    ContextOnlyDispatcher.useFormState = throwInvalidHookError;\n    ContextOnlyDispatcher.useActionState = throwInvalidHookError;\n    ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;\n    var HooksDispatcherOnMountInDEV = null,\n      HooksDispatcherOnMountWithHookTypesInDEV = null,\n      HooksDispatcherOnUpdateInDEV = null,\n      HooksDispatcherOnRerenderInDEV = null,\n      InvalidNestedHooksDispatcherOnMountInDEV = null,\n      InvalidNestedHooksDispatcherOnUpdateInDEV = null,\n      InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    HooksDispatcherOnMountInDEV = {\n      readContext: function (context) {\n        return readContext(context);\n      },\n      use: use,\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        return mountCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        mountHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        return mountEffect(create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        return mountImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        mountEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        return mountLayoutEffect(create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        mountHookTypesDev();\n        checkDepsAreArrayDev(deps);\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        mountHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function (initialValue) {\n        currentHookNameInDev = \"useRef\";\n        mountHookTypesDev();\n        return mountRef(initialValue);\n      },\n      useState: function (initialState) {\n        currentHookNameInDev = \"useState\";\n        mountHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountState(initialState);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        mountHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        mountHookTypesDev();\n        return mountDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        mountHookTypesDev();\n        return mountTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        mountHookTypesDev();\n        return mountSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        mountHookTypesDev();\n        return mountId();\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        mountHookTypesDev();\n        return mountRefresh();\n      }\n    };\n    HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;\n    HooksDispatcherOnMountInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    HooksDispatcherOnMountInDEV.useFormState = function (action, initialState) {\n      currentHookNameInDev = \"useFormState\";\n      mountHookTypesDev();\n      warnOnUseFormStateInDev();\n      return mountActionState(action, initialState);\n    };\n    HooksDispatcherOnMountInDEV.useActionState = function (\n      action,\n      initialState\n    ) {\n      currentHookNameInDev = \"useActionState\";\n      mountHookTypesDev();\n      return mountActionState(action, initialState);\n    };\n    HooksDispatcherOnMountInDEV.useOptimistic = function (passthrough) {\n      currentHookNameInDev = \"useOptimistic\";\n      mountHookTypesDev();\n      return mountOptimistic(passthrough);\n    };\n    HooksDispatcherOnMountWithHookTypesInDEV = {\n      readContext: function (context) {\n        return readContext(context);\n      },\n      use: use,\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        updateHookTypesDev();\n        return mountCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        updateHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        updateHookTypesDev();\n        return mountEffect(create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        updateHookTypesDev();\n        return mountImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        updateHookTypesDev();\n        mountEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        updateHookTypesDev();\n        return mountLayoutEffect(create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function (initialValue) {\n        currentHookNameInDev = \"useRef\";\n        updateHookTypesDev();\n        return mountRef(initialValue);\n      },\n      useState: function (initialState) {\n        currentHookNameInDev = \"useState\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountState(initialState);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        updateHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        updateHookTypesDev();\n        return mountDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        updateHookTypesDev();\n        return mountTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        updateHookTypesDev();\n        return mountSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        updateHookTypesDev();\n        return mountId();\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        updateHookTypesDev();\n        return mountRefresh();\n      }\n    };\n    HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;\n    HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function (\n      action,\n      initialState\n    ) {\n      currentHookNameInDev = \"useFormState\";\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return mountActionState(action, initialState);\n    };\n    HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function (\n      action,\n      initialState\n    ) {\n      currentHookNameInDev = \"useActionState\";\n      updateHookTypesDev();\n      return mountActionState(action, initialState);\n    };\n    HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function (\n      passthrough\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      updateHookTypesDev();\n      return mountOptimistic(passthrough);\n    };\n    HooksDispatcherOnUpdateInDEV = {\n      readContext: function (context) {\n        return readContext(context);\n      },\n      use: use,\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        updateHookTypesDev();\n        return updateCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        updateHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        updateHookTypesDev();\n        updateEffectImpl(2048, Passive, create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        updateHookTypesDev();\n        return updateImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        updateHookTypesDev();\n        return updateEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        updateHookTypesDev();\n        return updateEffectImpl(4, Layout, create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function () {\n        currentHookNameInDev = \"useRef\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useState: function () {\n        currentHookNameInDev = \"useState\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateReducer(basicStateReducer);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        updateHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        updateHookTypesDev();\n        return updateDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        updateHookTypesDev();\n        return updateTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        updateHookTypesDev();\n        return updateSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      }\n    };\n    HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;\n    HooksDispatcherOnUpdateInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    HooksDispatcherOnUpdateInDEV.useFormState = function (action) {\n      currentHookNameInDev = \"useFormState\";\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return updateActionState(action);\n    };\n    HooksDispatcherOnUpdateInDEV.useActionState = function (action) {\n      currentHookNameInDev = \"useActionState\";\n      updateHookTypesDev();\n      return updateActionState(action);\n    };\n    HooksDispatcherOnUpdateInDEV.useOptimistic = function (\n      passthrough,\n      reducer\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      updateHookTypesDev();\n      return updateOptimistic(passthrough, reducer);\n    };\n    HooksDispatcherOnRerenderInDEV = {\n      readContext: function (context) {\n        return readContext(context);\n      },\n      use: use,\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        updateHookTypesDev();\n        return updateCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        updateHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        updateHookTypesDev();\n        updateEffectImpl(2048, Passive, create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        updateHookTypesDev();\n        return updateImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        updateHookTypesDev();\n        return updateEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        updateHookTypesDev();\n        return updateEffectImpl(4, Layout, create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n        try {\n          return updateMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n        try {\n          return rerenderReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function () {\n        currentHookNameInDev = \"useRef\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useState: function () {\n        currentHookNameInDev = \"useState\";\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n        try {\n          return rerenderReducer(basicStateReducer);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        updateHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        updateHookTypesDev();\n        return rerenderDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        updateHookTypesDev();\n        return rerenderTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        updateHookTypesDev();\n        return updateSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      }\n    };\n    HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;\n    HooksDispatcherOnRerenderInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    HooksDispatcherOnRerenderInDEV.useFormState = function (action) {\n      currentHookNameInDev = \"useFormState\";\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return rerenderActionState(action);\n    };\n    HooksDispatcherOnRerenderInDEV.useActionState = function (action) {\n      currentHookNameInDev = \"useActionState\";\n      updateHookTypesDev();\n      return rerenderActionState(action);\n    };\n    HooksDispatcherOnRerenderInDEV.useOptimistic = function (\n      passthrough,\n      reducer\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      updateHookTypesDev();\n      return rerenderOptimistic(passthrough, reducer);\n    };\n    InvalidNestedHooksDispatcherOnMountInDEV = {\n      readContext: function (context) {\n        warnInvalidContextAccess();\n        return readContext(context);\n      },\n      use: function (usable) {\n        warnInvalidHookAccess();\n        return use(usable);\n      },\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountEffect(create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        mountEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountLayoutEffect(create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function (initialValue) {\n        currentHookNameInDev = \"useRef\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountRef(initialValue);\n      },\n      useState: function (initialState) {\n        currentHookNameInDev = \"useState\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n        try {\n          return mountState(initialState);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountId();\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        mountHookTypesDev();\n        return mountRefresh();\n      },\n      useMemoCache: function (size) {\n        warnInvalidHookAccess();\n        return useMemoCache(size);\n      }\n    };\n    InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function (\n      action,\n      initialState\n    ) {\n      currentHookNameInDev = \"useFormState\";\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountActionState(action, initialState);\n    };\n    InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function (\n      action,\n      initialState\n    ) {\n      currentHookNameInDev = \"useActionState\";\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountActionState(action, initialState);\n    };\n    InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function (\n      passthrough\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOptimistic(passthrough);\n    };\n    InvalidNestedHooksDispatcherOnUpdateInDEV = {\n      readContext: function (context) {\n        warnInvalidContextAccess();\n        return readContext(context);\n      },\n      use: function (usable) {\n        warnInvalidHookAccess();\n        return use(usable);\n      },\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        updateEffectImpl(2048, Passive, create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEffectImpl(4, Layout, create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function () {\n        currentHookNameInDev = \"useRef\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useState: function () {\n        currentHookNameInDev = \"useState\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateReducer(basicStateReducer);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useMemoCache: function (size) {\n        warnInvalidHookAccess();\n        return useMemoCache(size);\n      }\n    };\n    InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function (action) {\n      currentHookNameInDev = \"useFormState\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateActionState(action);\n    };\n    InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function (\n      action\n    ) {\n      currentHookNameInDev = \"useActionState\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateActionState(action);\n    };\n    InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function (\n      passthrough,\n      reducer\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOptimistic(passthrough, reducer);\n    };\n    InvalidNestedHooksDispatcherOnRerenderInDEV = {\n      readContext: function (context) {\n        warnInvalidContextAccess();\n        return readContext(context);\n      },\n      use: function (usable) {\n        warnInvalidHookAccess();\n        return use(usable);\n      },\n      useCallback: function (callback, deps) {\n        currentHookNameInDev = \"useCallback\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateCallback(callback, deps);\n      },\n      useContext: function (context) {\n        currentHookNameInDev = \"useContext\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return readContext(context);\n      },\n      useEffect: function (create, deps) {\n        currentHookNameInDev = \"useEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        updateEffectImpl(2048, Passive, create, deps);\n      },\n      useImperativeHandle: function (ref, create, deps) {\n        currentHookNameInDev = \"useImperativeHandle\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateImperativeHandle(ref, create, deps);\n      },\n      useInsertionEffect: function (create, deps) {\n        currentHookNameInDev = \"useInsertionEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEffectImpl(4, Insertion, create, deps);\n      },\n      useLayoutEffect: function (create, deps) {\n        currentHookNameInDev = \"useLayoutEffect\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEffectImpl(4, Layout, create, deps);\n      },\n      useMemo: function (create, deps) {\n        currentHookNameInDev = \"useMemo\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return updateMemo(create, deps);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useReducer: function (reducer, initialArg, init) {\n        currentHookNameInDev = \"useReducer\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return rerenderReducer(reducer, initialArg, init);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useRef: function () {\n        currentHookNameInDev = \"useRef\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useState: function () {\n        currentHookNameInDev = \"useState\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        var prevDispatcher = ReactSharedInternals.H;\n        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        try {\n          return rerenderReducer(basicStateReducer);\n        } finally {\n          ReactSharedInternals.H = prevDispatcher;\n        }\n      },\n      useDebugValue: function () {\n        currentHookNameInDev = \"useDebugValue\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n      },\n      useDeferredValue: function (value, initialValue) {\n        currentHookNameInDev = \"useDeferredValue\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return rerenderDeferredValue(value, initialValue);\n      },\n      useTransition: function () {\n        currentHookNameInDev = \"useTransition\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return rerenderTransition();\n      },\n      useSyncExternalStore: function (\n        subscribe,\n        getSnapshot,\n        getServerSnapshot\n      ) {\n        currentHookNameInDev = \"useSyncExternalStore\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateSyncExternalStore(\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        );\n      },\n      useId: function () {\n        currentHookNameInDev = \"useId\";\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useCacheRefresh: function () {\n        currentHookNameInDev = \"useCacheRefresh\";\n        updateHookTypesDev();\n        return updateWorkInProgressHook().memoizedState;\n      },\n      useMemoCache: function (size) {\n        warnInvalidHookAccess();\n        return useMemoCache(size);\n      }\n    };\n    InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus =\n      useHostTransitionStatus;\n    InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function (\n      action\n    ) {\n      currentHookNameInDev = \"useFormState\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderActionState(action);\n    };\n    InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function (\n      action\n    ) {\n      currentHookNameInDev = \"useActionState\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderActionState(action);\n    };\n    InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function (\n      passthrough,\n      reducer\n    ) {\n      currentHookNameInDev = \"useOptimistic\";\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOptimistic(passthrough, reducer);\n    };\n    var fakeInternalInstance = {};\n    var didWarnAboutStateAssignmentForComponent = new Set();\n    var didWarnAboutUninitializedState = new Set();\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n    var didWarnAboutDirectlyAssigningPropsToState = new Set();\n    var didWarnAboutUndefinedDerivedState = new Set();\n    var didWarnAboutContextTypes$1 = new Set();\n    var didWarnAboutChildContextTypes = new Set();\n    var didWarnAboutInvalidateContextType = new Set();\n    var didWarnOnInvalidCallback = new Set();\n    Object.freeze(fakeInternalInstance);\n    var classComponentUpdater = {\n        isMounted: function (component) {\n          var owner = current;\n          if (null !== owner && isRendering && 1 === owner.tag) {\n            var instance = owner.stateNode;\n            instance._warnedAboutRefsInRender ||\n              console.error(\n                \"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.\",\n                getComponentNameFromFiber(owner) || \"A component\"\n              );\n            instance._warnedAboutRefsInRender = !0;\n          }\n          return (component = component._reactInternals)\n            ? getNearestMountedFiber(component) === component\n            : !1;\n        },\n        enqueueSetState: function (inst, payload, callback) {\n          inst = inst._reactInternals;\n          var lane = requestUpdateLane(inst),\n            update = createUpdate(lane);\n          update.payload = payload;\n          void 0 !== callback &&\n            null !== callback &&\n            (warnOnInvalidCallback(callback), (update.callback = callback));\n          payload = enqueueUpdate(inst, update, lane);\n          null !== payload &&\n            (scheduleUpdateOnFiber(payload, inst, lane),\n            entangleTransitions(payload, inst, lane));\n          markStateUpdateScheduled(inst, lane);\n        },\n        enqueueReplaceState: function (inst, payload, callback) {\n          inst = inst._reactInternals;\n          var lane = requestUpdateLane(inst),\n            update = createUpdate(lane);\n          update.tag = ReplaceState;\n          update.payload = payload;\n          void 0 !== callback &&\n            null !== callback &&\n            (warnOnInvalidCallback(callback), (update.callback = callback));\n          payload = enqueueUpdate(inst, update, lane);\n          null !== payload &&\n            (scheduleUpdateOnFiber(payload, inst, lane),\n            entangleTransitions(payload, inst, lane));\n          markStateUpdateScheduled(inst, lane);\n        },\n        enqueueForceUpdate: function (inst, callback) {\n          inst = inst._reactInternals;\n          var lane = requestUpdateLane(inst),\n            update = createUpdate(lane);\n          update.tag = ForceUpdate;\n          void 0 !== callback &&\n            null !== callback &&\n            (warnOnInvalidCallback(callback), (update.callback = callback));\n          callback = enqueueUpdate(inst, update, lane);\n          null !== callback &&\n            (scheduleUpdateOnFiber(callback, inst, lane),\n            entangleTransitions(callback, inst, lane));\n          null !== injectedProfilingHooks &&\n            \"function\" ===\n              typeof injectedProfilingHooks.markForceUpdateScheduled &&\n            injectedProfilingHooks.markForceUpdateScheduled(inst, lane);\n        }\n      },\n      reportGlobalError =\n        \"function\" === typeof reportError\n          ? reportError\n          : function (error) {\n              if (\n                \"object\" === typeof window &&\n                \"function\" === typeof window.ErrorEvent\n              ) {\n                var event = new window.ErrorEvent(\"error\", {\n                  bubbles: !0,\n                  cancelable: !0,\n                  message:\n                    \"object\" === typeof error &&\n                    null !== error &&\n                    \"string\" === typeof error.message\n                      ? String(error.message)\n                      : String(error),\n                  error: error\n                });\n                if (!window.dispatchEvent(event)) return;\n              } else if (\n                \"object\" === typeof process &&\n                \"function\" === typeof process.emit\n              ) {\n                process.emit(\"uncaughtException\", error);\n                return;\n              }\n              console.error(error);\n            },\n      componentName = null,\n      errorBoundaryName = null,\n      SelectiveHydrationException = Error(\n        \"This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue.\"\n      ),\n      didReceiveUpdate = !1;\n    var didWarnAboutBadClass = {};\n    var didWarnAboutContextTypeOnFunctionComponent = {};\n    var didWarnAboutContextTypes = {};\n    var didWarnAboutGetDerivedStateOnFunctionComponent = {};\n    var didWarnAboutReassigningProps = !1;\n    var didWarnAboutRevealOrder = {};\n    var didWarnAboutTailOptions = {};\n    var SUSPENDED_MARKER = {\n        dehydrated: null,\n        treeContext: null,\n        retryLane: 0\n      },\n      hasWarnedAboutUsingNoValuePropOnContextProvider = !1,\n      valueCursor = createCursor(null);\n    var rendererCursorDEV = createCursor(null);\n    var renderer2CursorDEV = createCursor(null);\n    var rendererSigil = {};\n    var currentlyRenderingFiber = null,\n      lastContextDependency = null,\n      isDisallowedContextReadInDEV = !1,\n      AbortControllerLocal =\n        \"undefined\" !== typeof AbortController\n          ? AbortController\n          : function () {\n              var listeners = [],\n                signal = (this.signal = {\n                  aborted: !1,\n                  addEventListener: function (type, listener) {\n                    listeners.push(listener);\n                  }\n                });\n              this.abort = function () {\n                signal.aborted = !0;\n                listeners.forEach(function (listener) {\n                  return listener();\n                });\n              };\n            },\n      scheduleCallback$1 = Scheduler.unstable_scheduleCallback,\n      NormalPriority = Scheduler.unstable_NormalPriority,\n      CacheContext = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        Consumer: null,\n        Provider: null,\n        _currentValue: null,\n        _currentValue2: null,\n        _threadCount: 0,\n        _currentRenderer: null,\n        _currentRenderer2: null\n      },\n      prevOnStartTransitionFinish = ReactSharedInternals.S;\n    ReactSharedInternals.S = function (transition, returnValue) {\n      \"object\" === typeof returnValue &&\n        null !== returnValue &&\n        \"function\" === typeof returnValue.then &&\n        entangleAsyncAction(transition, returnValue);\n      null !== prevOnStartTransitionFinish &&\n        prevOnStartTransitionFinish(transition, returnValue);\n    };\n    var resumedCache = createCursor(null),\n      didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    var offscreenSubtreeIsHidden = !1,\n      offscreenSubtreeWasHidden = !1,\n      needsFormReset = !1,\n      PossiblyWeakSet = \"function\" === typeof WeakSet ? WeakSet : Set,\n      nextEffect = null,\n      inProgressLanes = null,\n      inProgressRoot = null,\n      shouldFireAfterActiveInstanceBlur = !1,\n      hostParent = null,\n      hostParentIsContainer = !1,\n      currentHoistableRoot = null,\n      suspenseyCommitFlag = 8192,\n      DefaultAsyncDispatcher = {\n        getCacheForType: function (resourceType) {\n          var cache = readContext(CacheContext),\n            cacheForType = cache.data.get(resourceType);\n          void 0 === cacheForType &&\n            ((cacheForType = resourceType()),\n            cache.data.set(resourceType, cacheForType));\n          return cacheForType;\n        },\n        getOwner: function () {\n          return current;\n        }\n      },\n      COMPONENT_TYPE = 0,\n      HAS_PSEUDO_CLASS_TYPE = 1,\n      ROLE_TYPE = 2,\n      TEST_NAME_TYPE = 3,\n      TEXT_TYPE = 4;\n    if (\"function\" === typeof Symbol && Symbol.for) {\n      var symbolFor = Symbol.for;\n      COMPONENT_TYPE = symbolFor(\"selector.component\");\n      HAS_PSEUDO_CLASS_TYPE = symbolFor(\"selector.has_pseudo_class\");\n      ROLE_TYPE = symbolFor(\"selector.role\");\n      TEST_NAME_TYPE = symbolFor(\"selector.test_id\");\n      TEXT_TYPE = symbolFor(\"selector.text\");\n    }\n    var commitHooks = [],\n      PossiblyWeakMap = \"function\" === typeof WeakMap ? WeakMap : Map,\n      NoContext = 0,\n      RenderContext = 2,\n      CommitContext = 4,\n      RootInProgress = 0,\n      RootFatalErrored = 1,\n      RootErrored = 2,\n      RootSuspended = 3,\n      RootSuspendedWithDelay = 4,\n      RootCompleted = 5,\n      RootDidNotComplete = 6,\n      executionContext = NoContext,\n      workInProgressRoot = null,\n      workInProgress = null,\n      workInProgressRootRenderLanes = 0,\n      NotSuspended = 0,\n      SuspendedOnError = 1,\n      SuspendedOnData = 2,\n      SuspendedOnImmediate = 3,\n      SuspendedOnInstance = 4,\n      SuspendedOnInstanceAndReadyToContinue = 5,\n      SuspendedOnDeprecatedThrowPromise = 6,\n      SuspendedAndReadyToContinue = 7,\n      SuspendedOnHydration = 8,\n      workInProgressSuspendedReason = NotSuspended,\n      workInProgressThrownValue = null,\n      workInProgressRootDidSkipSuspendedSiblings = !1,\n      workInProgressRootIsPrerendering = !1,\n      workInProgressRootDidAttachPingListener = !1,\n      entangledRenderLanes = 0,\n      workInProgressRootExitStatus = RootInProgress,\n      workInProgressRootSkippedLanes = 0,\n      workInProgressRootInterleavedUpdatedLanes = 0,\n      workInProgressRootPingedLanes = 0,\n      workInProgressDeferredLane = 0,\n      workInProgressSuspendedRetryLanes = 0,\n      workInProgressRootConcurrentErrors = null,\n      workInProgressRootRecoverableErrors = null,\n      workInProgressRootDidIncludeRecursiveRenderUpdate = !1,\n      globalMostRecentFallbackTime = 0,\n      FALLBACK_THROTTLE_MS = 300,\n      workInProgressRootRenderTargetTime = Infinity,\n      RENDER_TIMEOUT_MS = 500,\n      workInProgressTransitions = null,\n      legacyErrorBoundariesThatAlreadyFailed = null,\n      rootDoesHavePassiveEffects = !1,\n      rootWithPendingPassiveEffects = null,\n      pendingPassiveEffectsLanes = 0,\n      pendingPassiveEffectsRemainingLanes = 0,\n      pendingPassiveTransitions = null,\n      NESTED_UPDATE_LIMIT = 50,\n      nestedUpdateCount = 0,\n      rootWithNestedUpdates = null,\n      isFlushingPassiveEffects = !1,\n      didScheduleUpdateDuringPassiveEffects = !1,\n      NESTED_PASSIVE_UPDATE_LIMIT = 50,\n      nestedPassiveUpdateCount = 0,\n      rootWithPassiveNestedUpdates = null,\n      isRunningInsertionEffect = !1,\n      IMMEDIATE_COMMIT = 0,\n      SUSPENDED_COMMIT = 1,\n      THROTTLED_COMMIT = 2,\n      didWarnStateUpdateForNotYetMountedComponent = null,\n      didWarnAboutUpdateInRender = !1;\n    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    var fakeActCallbackNode = {},\n      resolveFamily = null,\n      failedBoundaries = null;\n    var hasBadMapPolyfill = !1;\n    try {\n      var nonExtensibleObject = Object.preventExtensions({});\n      new Map([[nonExtensibleObject, null]]);\n      new Set([nonExtensibleObject]);\n    } catch (e) {\n      hasBadMapPolyfill = !0;\n    }\n    var didWarnAboutNestedUpdates = !1;\n    var didWarnAboutFindNodeInStrictMode = {};\n    var overrideHookState = null,\n      overrideHookStateDeletePath = null,\n      overrideHookStateRenamePath = null,\n      overrideProps = null,\n      overridePropsDeletePath = null,\n      overridePropsRenamePath = null,\n      scheduleUpdate = null,\n      setErrorHandler = null,\n      setSuspenseHandler = null;\n    overrideHookState = function (fiber, id, path, value) {\n      id = findHook(fiber, id);\n      null !== id &&\n        ((path = copyWithSetImpl(id.memoizedState, path, 0, value)),\n        (id.memoizedState = path),\n        (id.baseState = path),\n        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),\n        (path = enqueueConcurrentRenderForLane(fiber, 2)),\n        null !== path && scheduleUpdateOnFiber(path, fiber, 2));\n    };\n    overrideHookStateDeletePath = function (fiber, id, path) {\n      id = findHook(fiber, id);\n      null !== id &&\n        ((path = copyWithDeleteImpl(id.memoizedState, path, 0)),\n        (id.memoizedState = path),\n        (id.baseState = path),\n        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),\n        (path = enqueueConcurrentRenderForLane(fiber, 2)),\n        null !== path && scheduleUpdateOnFiber(path, fiber, 2));\n    };\n    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n      id = findHook(fiber, id);\n      null !== id &&\n        ((oldPath = copyWithRename(id.memoizedState, oldPath, newPath)),\n        (id.memoizedState = oldPath),\n        (id.baseState = oldPath),\n        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),\n        (oldPath = enqueueConcurrentRenderForLane(fiber, 2)),\n        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));\n    };\n    overrideProps = function (fiber, path, value) {\n      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);\n      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);\n      path = enqueueConcurrentRenderForLane(fiber, 2);\n      null !== path && scheduleUpdateOnFiber(path, fiber, 2);\n    };\n    overridePropsDeletePath = function (fiber, path) {\n      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);\n      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);\n      path = enqueueConcurrentRenderForLane(fiber, 2);\n      null !== path && scheduleUpdateOnFiber(path, fiber, 2);\n    };\n    overridePropsRenamePath = function (fiber, oldPath, newPath) {\n      fiber.pendingProps = copyWithRename(\n        fiber.memoizedProps,\n        oldPath,\n        newPath\n      );\n      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);\n      oldPath = enqueueConcurrentRenderForLane(fiber, 2);\n      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);\n    };\n    scheduleUpdate = function (fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, 2);\n      null !== root && scheduleUpdateOnFiber(root, fiber, 2);\n    };\n    setErrorHandler = function (newShouldErrorImpl) {\n      shouldErrorImpl = newShouldErrorImpl;\n    };\n    setSuspenseHandler = function (newShouldSuspendImpl) {\n      shouldSuspendImpl = newShouldSuspendImpl;\n    };\n    exports.attemptContinuousHydration = function (fiber) {\n      if (13 === fiber.tag) {\n        var root = enqueueConcurrentRenderForLane(fiber, 67108864);\n        null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);\n        markRetryLaneIfNotHydrated(fiber, 67108864);\n      }\n    };\n    exports.attemptHydrationAtCurrentPriority = function (fiber) {\n      if (13 === fiber.tag) {\n        var lane = requestUpdateLane(fiber),\n          root = enqueueConcurrentRenderForLane(fiber, lane);\n        null !== root && scheduleUpdateOnFiber(root, fiber, lane);\n        markRetryLaneIfNotHydrated(fiber, lane);\n      }\n    };\n    exports.attemptSynchronousHydration = function (fiber) {\n      switch (fiber.tag) {\n        case 3:\n          fiber = fiber.stateNode;\n          if (fiber.current.memoizedState.isDehydrated) {\n            var lanes = getHighestPriorityLanes(fiber.pendingLanes);\n            if (0 !== lanes) {\n              fiber.pendingLanes |= 2;\n              for (fiber.entangledLanes |= 2; lanes; ) {\n                var lane = 1 << (31 - clz32(lanes));\n                fiber.entanglements[1] |= lane;\n                lanes &= ~lane;\n              }\n              ensureRootIsScheduled(fiber);\n              (executionContext & (RenderContext | CommitContext)) ===\n                NoContext &&\n                ((workInProgressRootRenderTargetTime =\n                  now$1() + RENDER_TIMEOUT_MS),\n                flushSyncWorkAcrossRoots_impl(0, !1));\n            }\n          }\n          break;\n        case 13:\n          (lanes = enqueueConcurrentRenderForLane(fiber, 2)),\n            null !== lanes && scheduleUpdateOnFiber(lanes, fiber, 2),\n            flushSyncWork(),\n            markRetryLaneIfNotHydrated(fiber, 2);\n      }\n    };\n    exports.batchedUpdates = function (fn, a) {\n      return fn(a);\n    };\n    exports.createComponentSelector = function (component) {\n      return { $$typeof: COMPONENT_TYPE, value: component };\n    };\n    exports.createContainer = function (\n      containerInfo,\n      tag,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride,\n      identifierPrefix,\n      onUncaughtError,\n      onCaughtError,\n      onRecoverableError,\n      transitionCallbacks\n    ) {\n      return createFiberRoot(\n        containerInfo,\n        tag,\n        !1,\n        null,\n        hydrationCallbacks,\n        isStrictMode,\n        identifierPrefix,\n        onUncaughtError,\n        onCaughtError,\n        onRecoverableError,\n        transitionCallbacks,\n        null\n      );\n    };\n    exports.createHasPseudoClassSelector = function (selectors) {\n      return { $$typeof: HAS_PSEUDO_CLASS_TYPE, value: selectors };\n    };\n    exports.createHydrationContainer = function (\n      initialChildren,\n      callback,\n      containerInfo,\n      tag,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride,\n      identifierPrefix,\n      onUncaughtError,\n      onCaughtError,\n      onRecoverableError,\n      transitionCallbacks,\n      formState\n    ) {\n      initialChildren = createFiberRoot(\n        containerInfo,\n        tag,\n        !0,\n        initialChildren,\n        hydrationCallbacks,\n        isStrictMode,\n        identifierPrefix,\n        onUncaughtError,\n        onCaughtError,\n        onRecoverableError,\n        transitionCallbacks,\n        formState\n      );\n      initialChildren.context = getContextForSubtree(null);\n      containerInfo = initialChildren.current;\n      tag = requestUpdateLane(containerInfo);\n      hydrationCallbacks = createUpdate(tag);\n      hydrationCallbacks.callback =\n        void 0 !== callback && null !== callback ? callback : null;\n      enqueueUpdate(containerInfo, hydrationCallbacks, tag);\n      initialChildren.current.lanes = tag;\n      markRootUpdated$1(initialChildren, tag);\n      ensureRootIsScheduled(initialChildren);\n      return initialChildren;\n    };\n    exports.createPortal = function (children, containerInfo, implementation) {\n      var key =\n        3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n      try {\n        testStringCoercion(key);\n        var JSCompiler_inline_result = !1;\n      } catch (e$6) {\n        JSCompiler_inline_result = !0;\n      }\n      JSCompiler_inline_result &&\n        (console.error(\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            key[Symbol.toStringTag]) ||\n            key.constructor.name ||\n            \"Object\"\n        ),\n        testStringCoercion(key));\n      return {\n        $$typeof: REACT_PORTAL_TYPE,\n        key: null == key ? null : \"\" + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    };\n    exports.createRoleSelector = function (role) {\n      return { $$typeof: ROLE_TYPE, value: role };\n    };\n    exports.createTestNameSelector = function (id) {\n      return { $$typeof: TEST_NAME_TYPE, value: id };\n    };\n    exports.createTextSelector = function (text) {\n      return { $$typeof: TEXT_TYPE, value: text };\n    };\n    exports.defaultOnCaughtError = function (error, errorInfo) {\n      var componentNameMessage = componentName\n          ? \"The above error occurred in the <\" + componentName + \"> component.\"\n          : \"The above error occurred in one of your React components.\",\n        recreateMessage =\n          \"React will try to recreate this component tree from scratch using the error boundary you provided, \" +\n          ((errorBoundaryName || \"Anonymous\") + \".\"),\n        prevGetCurrentStack = ReactSharedInternals.getCurrentStack,\n        componentStack =\n          null != errorInfo.componentStack ? errorInfo.componentStack : \"\";\n      ReactSharedInternals.getCurrentStack = function () {\n        return componentStack;\n      };\n      try {\n        \"object\" === typeof error &&\n        null !== error &&\n        \"string\" === typeof error.environmentName\n          ? bindToConsole(\n              \"error\",\n              [\n                \"%o\\n\\n%s\\n\\n%s\\n\",\n                error,\n                componentNameMessage,\n                recreateMessage\n              ],\n              error.environmentName\n            )()\n          : console.error(\n              \"%o\\n\\n%s\\n\\n%s\\n\",\n              error,\n              componentNameMessage,\n              recreateMessage\n            );\n      } finally {\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    };\n    exports.defaultOnRecoverableError = function (error) {\n      reportGlobalError(error);\n    };\n    exports.defaultOnUncaughtError = function (error, errorInfo) {\n      reportGlobalError(error);\n      error = componentName\n        ? \"An error occurred in the <\" + componentName + \"> component.\"\n        : \"An error occurred in one of your React components.\";\n      var prevGetCurrentStack = ReactSharedInternals.getCurrentStack,\n        componentStack =\n          null != errorInfo.componentStack ? errorInfo.componentStack : \"\";\n      ReactSharedInternals.getCurrentStack = function () {\n        return componentStack;\n      };\n      try {\n        console.warn(\n          \"%s\\n\\n%s\\n\",\n          error,\n          \"Consider adding an error boundary to your tree to customize error handling behavior.\\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries.\"\n        );\n      } finally {\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    };\n    exports.deferredUpdates = function (fn) {\n      var prevTransition = ReactSharedInternals.T,\n        previousPriority = getCurrentUpdatePriority();\n      try {\n        return (\n          setCurrentUpdatePriority(32), (ReactSharedInternals.T = null), fn()\n        );\n      } finally {\n        setCurrentUpdatePriority(previousPriority),\n          (ReactSharedInternals.T = prevTransition);\n      }\n    };\n    exports.discreteUpdates = function (fn, a, b, c, d) {\n      var prevTransition = ReactSharedInternals.T,\n        previousPriority = getCurrentUpdatePriority();\n      try {\n        return (\n          setCurrentUpdatePriority(2),\n          (ReactSharedInternals.T = null),\n          fn(a, b, c, d)\n        );\n      } finally {\n        setCurrentUpdatePriority(previousPriority),\n          (ReactSharedInternals.T = prevTransition),\n          executionContext === NoContext &&\n            (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS);\n      }\n    };\n    exports.findAllNodes = findAllNodes;\n    exports.findBoundingRects = function (hostRoot, selectors) {\n      if (!supportsTestSelectors)\n        throw Error(\"Test selector API is not supported by this renderer.\");\n      selectors = findAllNodes(hostRoot, selectors);\n      hostRoot = [];\n      for (var i = 0; i < selectors.length; i++)\n        hostRoot.push(getBoundingRect(selectors[i]));\n      for (selectors = hostRoot.length - 1; 0 < selectors; selectors--) {\n        i = hostRoot[selectors];\n        for (\n          var targetLeft = i.x,\n            targetRight = targetLeft + i.width,\n            targetTop = i.y,\n            targetBottom = targetTop + i.height,\n            j = selectors - 1;\n          0 <= j;\n          j--\n        )\n          if (selectors !== j) {\n            var otherRect = hostRoot[j],\n              otherLeft = otherRect.x,\n              otherRight = otherLeft + otherRect.width,\n              otherTop = otherRect.y,\n              otherBottom = otherTop + otherRect.height;\n            if (\n              targetLeft >= otherLeft &&\n              targetTop >= otherTop &&\n              targetRight <= otherRight &&\n              targetBottom <= otherBottom\n            ) {\n              hostRoot.splice(selectors, 1);\n              break;\n            } else if (\n              !(\n                targetLeft !== otherLeft ||\n                i.width !== otherRect.width ||\n                otherBottom < targetTop ||\n                otherTop > targetBottom\n              )\n            ) {\n              otherTop > targetTop &&\n                ((otherRect.height += otherTop - targetTop),\n                (otherRect.y = targetTop));\n              otherBottom < targetBottom &&\n                (otherRect.height = targetBottom - otherTop);\n              hostRoot.splice(selectors, 1);\n              break;\n            } else if (\n              !(\n                targetTop !== otherTop ||\n                i.height !== otherRect.height ||\n                otherRight < targetLeft ||\n                otherLeft > targetRight\n              )\n            ) {\n              otherLeft > targetLeft &&\n                ((otherRect.width += otherLeft - targetLeft),\n                (otherRect.x = targetLeft));\n              otherRight < targetRight &&\n                (otherRect.width = targetRight - otherLeft);\n              hostRoot.splice(selectors, 1);\n              break;\n            }\n          }\n      }\n      return hostRoot;\n    };\n    exports.findHostInstance = function (component) {\n      var fiber = component._reactInternals;\n      if (void 0 === fiber) {\n        if (\"function\" === typeof component.render)\n          throw Error(\"Unable to find node on an unmounted component.\");\n        component = Object.keys(component).join(\",\");\n        throw Error(\n          \"Argument appears to not be a ReactComponent. Keys: \" + component\n        );\n      }\n      component = findCurrentHostFiber(fiber);\n      return null === component ? null : getPublicInstance(component.stateNode);\n    };\n    exports.findHostInstanceWithNoPortals = function (fiber) {\n      fiber = findCurrentFiberUsingSlowPath(fiber);\n      fiber =\n        null !== fiber ? findCurrentHostFiberWithNoPortalsImpl(fiber) : null;\n      return null === fiber ? null : getPublicInstance(fiber.stateNode);\n    };\n    exports.findHostInstanceWithWarning = function (component, methodName) {\n      var fiber = component._reactInternals;\n      if (void 0 === fiber) {\n        if (\"function\" === typeof component.render)\n          throw Error(\"Unable to find node on an unmounted component.\");\n        component = Object.keys(component).join(\",\");\n        throw Error(\n          \"Argument appears to not be a ReactComponent. Keys: \" + component\n        );\n      }\n      component = findCurrentHostFiber(fiber);\n      if (null === component) return null;\n      if (component.mode & 8) {\n        var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n        didWarnAboutFindNodeInStrictMode[componentName] ||\n          ((didWarnAboutFindNodeInStrictMode[componentName] = !0),\n          runWithFiberInDEV(component, function () {\n            fiber.mode & 8\n              ? console.error(\n                  \"%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                )\n              : console.error(\n                  \"%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                );\n          }));\n      }\n      return getPublicInstance(component.stateNode);\n    };\n    exports.flushPassiveEffects = flushPassiveEffects;\n    exports.flushSyncFromReconciler = function (fn) {\n      var prevExecutionContext = executionContext;\n      executionContext |= 1;\n      var prevTransition = ReactSharedInternals.T,\n        previousPriority = getCurrentUpdatePriority();\n      try {\n        if ((setCurrentUpdatePriority(2), (ReactSharedInternals.T = null), fn))\n          return fn();\n      } finally {\n        setCurrentUpdatePriority(previousPriority),\n          (ReactSharedInternals.T = prevTransition),\n          (executionContext = prevExecutionContext),\n          (executionContext & (RenderContext | CommitContext)) === NoContext &&\n            flushSyncWorkAcrossRoots_impl(0, !1);\n      }\n    };\n    exports.flushSyncWork = flushSyncWork;\n    exports.focusWithin = function (hostRoot, selectors) {\n      if (!supportsTestSelectors)\n        throw Error(\"Test selector API is not supported by this renderer.\");\n      hostRoot = findFiberRootForHostRoot(hostRoot);\n      selectors = findPaths(hostRoot, selectors);\n      selectors = Array.from(selectors);\n      for (hostRoot = 0; hostRoot < selectors.length; ) {\n        var fiber = selectors[hostRoot++],\n          tag = fiber.tag;\n        if (!isHiddenSubtree(fiber)) {\n          if (\n            (5 === tag || 26 === tag || 27 === tag) &&\n            setFocusIfFocusable(fiber.stateNode)\n          )\n            return !0;\n          for (fiber = fiber.child; null !== fiber; )\n            selectors.push(fiber), (fiber = fiber.sibling);\n        }\n      }\n      return !1;\n    };\n    exports.getFindAllNodesFailureDescription = function (hostRoot, selectors) {\n      if (!supportsTestSelectors)\n        throw Error(\"Test selector API is not supported by this renderer.\");\n      var maxSelectorIndex = 0,\n        matchedNames = [];\n      hostRoot = [findFiberRootForHostRoot(hostRoot), 0];\n      for (var index = 0; index < hostRoot.length; ) {\n        var fiber = hostRoot[index++],\n          tag = fiber.tag,\n          selectorIndex = hostRoot[index++],\n          selector = selectors[selectorIndex];\n        if ((5 !== tag && 26 !== tag && 27 !== tag) || !isHiddenSubtree(fiber))\n          if (\n            (matchSelector(fiber, selector) &&\n              (matchedNames.push(selectorToString(selector)),\n              selectorIndex++,\n              selectorIndex > maxSelectorIndex &&\n                (maxSelectorIndex = selectorIndex)),\n            selectorIndex < selectors.length)\n          )\n            for (fiber = fiber.child; null !== fiber; )\n              hostRoot.push(fiber, selectorIndex), (fiber = fiber.sibling);\n      }\n      if (maxSelectorIndex < selectors.length) {\n        for (\n          hostRoot = [];\n          maxSelectorIndex < selectors.length;\n          maxSelectorIndex++\n        )\n          hostRoot.push(selectorToString(selectors[maxSelectorIndex]));\n        return (\n          \"findAllNodes was able to match part of the selector:\\n  \" +\n          (matchedNames.join(\" > \") +\n            \"\\n\\nNo matching component was found for:\\n  \") +\n          hostRoot.join(\" > \")\n        );\n      }\n      return null;\n    };\n    exports.getPublicRootInstance = function (container) {\n      container = container.current;\n      if (!container.child) return null;\n      switch (container.child.tag) {\n        case 27:\n        case 5:\n          return getPublicInstance(container.child.stateNode);\n        default:\n          return container.child.stateNode;\n      }\n    };\n    exports.injectIntoDevTools = function () {\n      var internals = {\n        bundleType: 1,\n        version: rendererVersion,\n        rendererPackageName: rendererPackageName,\n        currentDispatcherRef: ReactSharedInternals,\n        findFiberByHostInstance: getInstanceFromNode,\n        reconcilerVersion: \"19.0.0\"\n      };\n      null !== extraDevToolsConfig &&\n        (internals.rendererConfig = extraDevToolsConfig);\n      internals.overrideHookState = overrideHookState;\n      internals.overrideHookStateDeletePath = overrideHookStateDeletePath;\n      internals.overrideHookStateRenamePath = overrideHookStateRenamePath;\n      internals.overrideProps = overrideProps;\n      internals.overridePropsDeletePath = overridePropsDeletePath;\n      internals.overridePropsRenamePath = overridePropsRenamePath;\n      internals.scheduleUpdate = scheduleUpdate;\n      internals.setErrorHandler = setErrorHandler;\n      internals.setSuspenseHandler = setSuspenseHandler;\n      internals.scheduleRefresh = scheduleRefresh;\n      internals.scheduleRoot = scheduleRoot;\n      internals.setRefreshHandler = setRefreshHandler;\n      internals.getCurrentFiber = getCurrentFiberForDevTools;\n      internals.getLaneLabelMap = getLaneLabelMap;\n      internals.injectProfilingHooks = injectProfilingHooks;\n      return injectInternals(internals);\n    };\n    exports.isAlreadyRendering = function () {\n      return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n    };\n    exports.observeVisibleRects = function (\n      hostRoot,\n      selectors,\n      callback,\n      options\n    ) {\n      function commitHook() {\n        var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n        instanceRoots.forEach(function (target) {\n          0 > nextInstanceRoots.indexOf(target) && unobserve(target);\n        });\n        nextInstanceRoots.forEach(function (target) {\n          0 > instanceRoots.indexOf(target) && observe(target);\n        });\n      }\n      if (!supportsTestSelectors)\n        throw Error(\"Test selector API is not supported by this renderer.\");\n      var instanceRoots = findAllNodes(hostRoot, selectors);\n      callback = setupIntersectionObserver(instanceRoots, callback, options);\n      var disconnect = callback.disconnect,\n        observe = callback.observe,\n        unobserve = callback.unobserve;\n      commitHooks.push(commitHook);\n      return {\n        disconnect: function () {\n          var index = commitHooks.indexOf(commitHook);\n          0 <= index && commitHooks.splice(index, 1);\n          disconnect();\n        }\n      };\n    };\n    exports.shouldError = function (fiber) {\n      return shouldErrorImpl(fiber);\n    };\n    exports.shouldSuspend = function (fiber) {\n      return shouldSuspendImpl(fiber);\n    };\n    exports.startHostTransition = function (\n      formFiber,\n      pendingState,\n      action,\n      formData\n    ) {\n      if (5 !== formFiber.tag)\n        throw Error(\n          \"Expected the form instance to be a HostComponent. This is a bug in React.\"\n        );\n      var queue = ensureFormComponentIsStateful(formFiber).queue;\n      startTransition(\n        formFiber,\n        queue,\n        pendingState,\n        NotPendingTransition,\n        null === action\n          ? noop\n          : function () {\n              null === ReactSharedInternals.T &&\n                console.error(\n                  \"requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition.\"\n                );\n              var resetStateQueue =\n                ensureFormComponentIsStateful(formFiber).next.queue;\n              dispatchSetStateInternal(\n                formFiber,\n                resetStateQueue,\n                {},\n                requestUpdateLane(formFiber)\n              );\n              return action(formData);\n            }\n      );\n    };\n    exports.updateContainer = function (\n      element,\n      container,\n      parentComponent,\n      callback\n    ) {\n      var current = container.current,\n        lane = requestUpdateLane(current);\n      updateContainerImpl(\n        current,\n        lane,\n        element,\n        container,\n        parentComponent,\n        callback\n      );\n      return lane;\n    };\n    exports.updateContainerSync = updateContainerSync;\n    return exports;\n  }),\n  (module.exports[\"default\"] = module.exports),\n  Object.defineProperty(module.exports, \"__esModule\", { value: !0 }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/react-reconciler/constants.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-reconciler-constants.development.js */ \"(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsZ01BQTJFO0FBQzdFIiwic291cmNlcyI6WyIvVXNlcnMvamVuc2xlcm5zdGFsd2Flcm4vZGV2LzNkLXJvb20vcmVhY3QtM2Qtcm9vbS9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXJlY29uY2lsZXItY29uc3RhbnRzLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/constants.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-reconciler/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ \"(pages-dir-browser)/./node_modules/react-reconciler/cjs/react-reconciler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw0S0FBaUU7QUFDbkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZW5zbGVybnN0YWx3YWVybi9kZXYvM2Qtcm9vbS9yZWFjdC0zZC1yb29tL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function performWorkUntilDeadline() {\n      if (isMessageLoopRunning) {\n        var currentTime = exports.unstable_now();\n        startTime = currentTime;\n        var hasMoreWork = !0;\n        try {\n          a: {\n            isHostCallbackScheduled = !1;\n            isHostTimeoutScheduled &&\n              ((isHostTimeoutScheduled = !1),\n              localClearTimeout(taskTimeoutID),\n              (taskTimeoutID = -1));\n            isPerformingWork = !0;\n            var previousPriorityLevel = currentPriorityLevel;\n            try {\n              b: {\n                advanceTimers(currentTime);\n                for (\n                  currentTask = peek(taskQueue);\n                  null !== currentTask &&\n                  !(\n                    currentTask.expirationTime > currentTime &&\n                    shouldYieldToHost()\n                  );\n\n                ) {\n                  var callback = currentTask.callback;\n                  if (\"function\" === typeof callback) {\n                    currentTask.callback = null;\n                    currentPriorityLevel = currentTask.priorityLevel;\n                    var continuationCallback = callback(\n                      currentTask.expirationTime <= currentTime\n                    );\n                    currentTime = exports.unstable_now();\n                    if (\"function\" === typeof continuationCallback) {\n                      currentTask.callback = continuationCallback;\n                      advanceTimers(currentTime);\n                      hasMoreWork = !0;\n                      break b;\n                    }\n                    currentTask === peek(taskQueue) && pop(taskQueue);\n                    advanceTimers(currentTime);\n                  } else pop(taskQueue);\n                  currentTask = peek(taskQueue);\n                }\n                if (null !== currentTask) hasMoreWork = !0;\n                else {\n                  var firstTimer = peek(timerQueue);\n                  null !== firstTimer &&\n                    requestHostTimeout(\n                      handleTimeout,\n                      firstTimer.startTime - currentTime\n                    );\n                  hasMoreWork = !1;\n                }\n              }\n              break a;\n            } finally {\n              (currentTask = null),\n                (currentPriorityLevel = previousPriorityLevel),\n                (isPerformingWork = !1);\n            }\n            hasMoreWork = void 0;\n          }\n        } finally {\n          hasMoreWork\n            ? schedulePerformWorkUntilDeadline()\n            : (isMessageLoopRunning = !1);\n        }\n      }\n    }\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      a: for (; 0 < index; ) {\n        var parentIndex = (index - 1) >>> 1,\n          parent = heap[parentIndex];\n        if (0 < compare(parent, node))\n          (heap[parentIndex] = node),\n            (heap[index] = parent),\n            (index = parentIndex);\n        else break a;\n      }\n    }\n    function peek(heap) {\n      return 0 === heap.length ? null : heap[0];\n    }\n    function pop(heap) {\n      if (0 === heap.length) return null;\n      var first = heap[0],\n        last = heap.pop();\n      if (last !== first) {\n        heap[0] = last;\n        a: for (\n          var index = 0, length = heap.length, halfLength = length >>> 1;\n          index < halfLength;\n\n        ) {\n          var leftIndex = 2 * (index + 1) - 1,\n            left = heap[leftIndex],\n            rightIndex = leftIndex + 1,\n            right = heap[rightIndex];\n          if (0 > compare(left, last))\n            rightIndex < length && 0 > compare(right, left)\n              ? ((heap[index] = right),\n                (heap[rightIndex] = last),\n                (index = rightIndex))\n              : ((heap[index] = left),\n                (heap[leftIndex] = last),\n                (index = leftIndex));\n          else if (rightIndex < length && 0 > compare(right, last))\n            (heap[index] = right),\n              (heap[rightIndex] = last),\n              (index = rightIndex);\n          else break a;\n        }\n      }\n      return first;\n    }\n    function compare(a, b) {\n      var diff = a.sortIndex - b.sortIndex;\n      return 0 !== diff ? diff : a.id - b.id;\n    }\n    function advanceTimers(currentTime) {\n      for (var timer = peek(timerQueue); null !== timer; ) {\n        if (null === timer.callback) pop(timerQueue);\n        else if (timer.startTime <= currentTime)\n          pop(timerQueue),\n            (timer.sortIndex = timer.expirationTime),\n            push(taskQueue, timer);\n        else break;\n        timer = peek(timerQueue);\n      }\n    }\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = !1;\n      advanceTimers(currentTime);\n      if (!isHostCallbackScheduled)\n        if (null !== peek(taskQueue))\n          (isHostCallbackScheduled = !0), requestHostCallback();\n        else {\n          var firstTimer = peek(timerQueue);\n          null !== firstTimer &&\n            requestHostTimeout(\n              handleTimeout,\n              firstTimer.startTime - currentTime\n            );\n        }\n    }\n    function shouldYieldToHost() {\n      return exports.unstable_now() - startTime < frameInterval ? !1 : !0;\n    }\n    function requestHostCallback() {\n      isMessageLoopRunning ||\n        ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());\n    }\n    function requestHostTimeout(callback, ms) {\n      taskTimeoutID = localSetTimeout(function () {\n        callback(exports.unstable_now());\n      }, ms);\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    exports.unstable_now = void 0;\n    if (\n      \"object\" === typeof performance &&\n      \"function\" === typeof performance.now\n    ) {\n      var localPerformance = performance;\n      exports.unstable_now = function () {\n        return localPerformance.now();\n      };\n    } else {\n      var localDate = Date,\n        initialTime = localDate.now();\n      exports.unstable_now = function () {\n        return localDate.now() - initialTime;\n      };\n    }\n    var taskQueue = [],\n      timerQueue = [],\n      taskIdCounter = 1,\n      currentTask = null,\n      currentPriorityLevel = 3,\n      isPerformingWork = !1,\n      isHostCallbackScheduled = !1,\n      isHostTimeoutScheduled = !1,\n      localSetTimeout = \"function\" === typeof setTimeout ? setTimeout : null,\n      localClearTimeout =\n        \"function\" === typeof clearTimeout ? clearTimeout : null,\n      localSetImmediate =\n        \"undefined\" !== typeof setImmediate ? setImmediate : null,\n      isMessageLoopRunning = !1,\n      taskTimeoutID = -1,\n      frameInterval = 5,\n      startTime = -1;\n    if (\"function\" === typeof localSetImmediate)\n      var schedulePerformWorkUntilDeadline = function () {\n        localSetImmediate(performWorkUntilDeadline);\n      };\n    else if (\"undefined\" !== typeof MessageChannel) {\n      var channel = new MessageChannel(),\n        port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n      schedulePerformWorkUntilDeadline = function () {\n        port.postMessage(null);\n      };\n    } else\n      schedulePerformWorkUntilDeadline = function () {\n        localSetTimeout(performWorkUntilDeadline, 0);\n      };\n    exports.unstable_IdlePriority = 5;\n    exports.unstable_ImmediatePriority = 1;\n    exports.unstable_LowPriority = 4;\n    exports.unstable_NormalPriority = 3;\n    exports.unstable_Profiling = null;\n    exports.unstable_UserBlockingPriority = 2;\n    exports.unstable_cancelCallback = function (task) {\n      task.callback = null;\n    };\n    exports.unstable_continueExecution = function () {\n      isHostCallbackScheduled ||\n        isPerformingWork ||\n        ((isHostCallbackScheduled = !0), requestHostCallback());\n    };\n    exports.unstable_forceFrameRate = function (fps) {\n      0 > fps || 125 < fps\n        ? console.error(\n            \"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"\n          )\n        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);\n    };\n    exports.unstable_getCurrentPriorityLevel = function () {\n      return currentPriorityLevel;\n    };\n    exports.unstable_getFirstCallbackNode = function () {\n      return peek(taskQueue);\n    };\n    exports.unstable_next = function (eventHandler) {\n      switch (currentPriorityLevel) {\n        case 1:\n        case 2:\n        case 3:\n          var priorityLevel = 3;\n          break;\n        default:\n          priorityLevel = currentPriorityLevel;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n    exports.unstable_pauseExecution = function () {};\n    exports.unstable_requestPaint = function () {};\n    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n        default:\n          priorityLevel = 3;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n    exports.unstable_scheduleCallback = function (\n      priorityLevel,\n      callback,\n      options\n    ) {\n      var currentTime = exports.unstable_now();\n      \"object\" === typeof options && null !== options\n        ? ((options = options.delay),\n          (options =\n            \"number\" === typeof options && 0 < options\n              ? currentTime + options\n              : currentTime))\n        : (options = currentTime);\n      switch (priorityLevel) {\n        case 1:\n          var timeout = -1;\n          break;\n        case 2:\n          timeout = 250;\n          break;\n        case 5:\n          timeout = 1073741823;\n          break;\n        case 4:\n          timeout = 1e4;\n          break;\n        default:\n          timeout = 5e3;\n      }\n      timeout = options + timeout;\n      priorityLevel = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: options,\n        expirationTime: timeout,\n        sortIndex: -1\n      };\n      options > currentTime\n        ? ((priorityLevel.sortIndex = options),\n          push(timerQueue, priorityLevel),\n          null === peek(taskQueue) &&\n            priorityLevel === peek(timerQueue) &&\n            (isHostTimeoutScheduled\n              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))\n              : (isHostTimeoutScheduled = !0),\n            requestHostTimeout(handleTimeout, options - currentTime)))\n        : ((priorityLevel.sortIndex = timeout),\n          push(taskQueue, priorityLevel),\n          isHostCallbackScheduled ||\n            isPerformingWork ||\n            ((isHostCallbackScheduled = !0), requestHostCallback()));\n      return priorityLevel;\n    };\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = function (callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-reconciler/node_modules/scheduler/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLHFMQUEwRDtBQUM1RCIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL3JlYWN0LXJlY29uY2lsZXIvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-reconciler/node_modules/scheduler/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-use-measure/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/react-use-measure/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ j)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\nfunction g(n,t){let o;return(...i)=>{window.clearTimeout(o),o=window.setTimeout(()=>n(...i),t)}}function j({debounce:n,scroll:t,polyfill:o,offsetSize:i}={debounce:0,scroll:!1,offsetSize:!1}){const a=o||(typeof window==\"undefined\"?class{}:window.ResizeObserver);if(!a)throw new Error(\"This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills\");const[c,h]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({left:0,top:0,width:0,height:0,bottom:0,right:0,x:0,y:0}),e=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({element:null,scrollContainers:null,resizeObserver:null,lastBounds:c,orientationHandler:null}),d=n?typeof n==\"number\"?n:n.scroll:null,f=n?typeof n==\"number\"?n:n.resize:null,w=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(w.current=!0,()=>void(w.current=!1)));const[z,m,s]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{const r=()=>{if(!e.current.element)return;const{left:y,top:C,width:H,height:O,bottom:S,right:x,x:B,y:R}=e.current.element.getBoundingClientRect(),l={left:y,top:C,width:H,height:O,bottom:S,right:x,x:B,y:R};e.current.element instanceof HTMLElement&&i&&(l.height=e.current.element.offsetHeight,l.width=e.current.element.offsetWidth),Object.freeze(l),w.current&&!D(e.current.lastBounds,l)&&h(e.current.lastBounds=l)};return[r,f?g(r,f):r,d?g(r,d):r]},[h,i,d,f]);function v(){e.current.scrollContainers&&(e.current.scrollContainers.forEach(r=>r.removeEventListener(\"scroll\",s,!0)),e.current.scrollContainers=null),e.current.resizeObserver&&(e.current.resizeObserver.disconnect(),e.current.resizeObserver=null),e.current.orientationHandler&&(\"orientation\"in screen&&\"removeEventListener\"in screen.orientation?screen.orientation.removeEventListener(\"change\",e.current.orientationHandler):\"onorientationchange\"in window&&window.removeEventListener(\"orientationchange\",e.current.orientationHandler))}function b(){e.current.element&&(e.current.resizeObserver=new a(s),e.current.resizeObserver.observe(e.current.element),t&&e.current.scrollContainers&&e.current.scrollContainers.forEach(r=>r.addEventListener(\"scroll\",s,{capture:!0,passive:!0})),e.current.orientationHandler=()=>{s()},\"orientation\"in screen&&\"addEventListener\"in screen.orientation?screen.orientation.addEventListener(\"change\",e.current.orientationHandler):\"onorientationchange\"in window&&window.addEventListener(\"orientationchange\",e.current.orientationHandler))}const L=r=>{!r||r===e.current.element||(v(),e.current.element=r,e.current.scrollContainers=E(r),b())};return X(s,!!t),W(m),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{v(),b()},[t,s,m]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>v,[]),[L,c,z]}function W(n){(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{const t=n;return window.addEventListener(\"resize\",t),()=>void window.removeEventListener(\"resize\",t)},[n])}function X(n,t){(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{if(t){const o=n;return window.addEventListener(\"scroll\",o,{capture:!0,passive:!0}),()=>void window.removeEventListener(\"scroll\",o,!0)}},[n,t])}function E(n){const t=[];if(!n||n===document.body)return t;const{overflow:o,overflowX:i,overflowY:a}=window.getComputedStyle(n);return[o,i,a].some(c=>c===\"auto\"||c===\"scroll\")&&t.push(n),[...t,...E(n.parentElement)]}const k=[\"x\",\"y\",\"top\",\"bottom\",\"left\",\"right\",\"width\",\"height\"],D=(n,t)=>k.every(o=>n[o]===t[o]);\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC11c2UtbWVhc3VyZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlFLGdCQUFnQixNQUFNLGVBQWUsMkRBQTJELFlBQVksNENBQTRDLEVBQUUsbUNBQW1DLEVBQUUsOENBQThDLHdCQUF3Qix3S0FBd0ssV0FBVywrQ0FBQyxFQUFFLHVEQUF1RCxJQUFJLDZDQUFDLEVBQUUsNEZBQTRGLGtGQUFrRiw2Q0FBQyxLQUFLLGdEQUFDLDRDQUE0QyxhQUFhLDhDQUFDLE1BQU0sYUFBYSw2QkFBNkIsTUFBTSx1REFBdUQsOENBQThDLHdEQUF3RCxnTkFBZ04sZ0NBQWdDLFlBQVksYUFBYSx3Z0JBQXdnQixhQUFhLDhNQUE4TSxzQkFBc0IscUNBQXFDLElBQUksdVBBQXVQLFlBQVksMEZBQTBGLHFCQUFxQixnREFBQyxNQUFNLFFBQVEsVUFBVSxnREFBQyxtQkFBbUIsY0FBYyxnREFBQyxNQUFNLFVBQVUsMkZBQTJGLE1BQU0sZ0JBQWdCLGdEQUFDLE1BQU0sTUFBTSxVQUFVLDJDQUEyQyxzQkFBc0Isc0RBQXNELFFBQVEsY0FBYyxXQUFXLGtDQUFrQyxNQUFNLG1DQUFtQyw0QkFBNEIsd0ZBQXdGLGtHQUF1SDtBQUNua0ciLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZW5zbGVybnN0YWx3YWVybi9kZXYvM2Qtcm9vbS9yZWFjdC0zZC1yb29tL25vZGVfbW9kdWxlcy9yZWFjdC11c2UtbWVhc3VyZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHt1c2VTdGF0ZSBhcyBULHVzZVJlZiBhcyBwLHVzZUVmZmVjdCBhcyB1LHVzZU1lbW8gYXMgTX1mcm9tXCJyZWFjdFwiO2Z1bmN0aW9uIGcobix0KXtsZXQgbztyZXR1cm4oLi4uaSk9Pnt3aW5kb3cuY2xlYXJUaW1lb3V0KG8pLG89d2luZG93LnNldFRpbWVvdXQoKCk9Pm4oLi4uaSksdCl9fWZ1bmN0aW9uIGooe2RlYm91bmNlOm4sc2Nyb2xsOnQscG9seWZpbGw6byxvZmZzZXRTaXplOml9PXtkZWJvdW5jZTowLHNjcm9sbDohMSxvZmZzZXRTaXplOiExfSl7Y29uc3QgYT1vfHwodHlwZW9mIHdpbmRvdz09XCJ1bmRlZmluZWRcIj9jbGFzc3t9OndpbmRvdy5SZXNpemVPYnNlcnZlcik7aWYoIWEpdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgUmVzaXplT2JzZXJ2ZXIgb3V0IG9mIHRoZSBib3guIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LXNwcmluZy9yZWFjdC11c2UtbWVhc3VyZS8jcmVzaXplLW9ic2VydmVyLXBvbHlmaWxsc1wiKTtjb25zdFtjLGhdPVQoe2xlZnQ6MCx0b3A6MCx3aWR0aDowLGhlaWdodDowLGJvdHRvbTowLHJpZ2h0OjAseDowLHk6MH0pLGU9cCh7ZWxlbWVudDpudWxsLHNjcm9sbENvbnRhaW5lcnM6bnVsbCxyZXNpemVPYnNlcnZlcjpudWxsLGxhc3RCb3VuZHM6YyxvcmllbnRhdGlvbkhhbmRsZXI6bnVsbH0pLGQ9bj90eXBlb2Ygbj09XCJudW1iZXJcIj9uOm4uc2Nyb2xsOm51bGwsZj1uP3R5cGVvZiBuPT1cIm51bWJlclwiP246bi5yZXNpemU6bnVsbCx3PXAoITEpO3UoKCk9Pih3LmN1cnJlbnQ9ITAsKCk9PnZvaWQody5jdXJyZW50PSExKSkpO2NvbnN0W3osbSxzXT1NKCgpPT57Y29uc3Qgcj0oKT0+e2lmKCFlLmN1cnJlbnQuZWxlbWVudClyZXR1cm47Y29uc3R7bGVmdDp5LHRvcDpDLHdpZHRoOkgsaGVpZ2h0Ok8sYm90dG9tOlMscmlnaHQ6eCx4OkIseTpSfT1lLmN1cnJlbnQuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxsPXtsZWZ0OnksdG9wOkMsd2lkdGg6SCxoZWlnaHQ6Tyxib3R0b206UyxyaWdodDp4LHg6Qix5OlJ9O2UuY3VycmVudC5lbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJmkmJihsLmhlaWdodD1lLmN1cnJlbnQuZWxlbWVudC5vZmZzZXRIZWlnaHQsbC53aWR0aD1lLmN1cnJlbnQuZWxlbWVudC5vZmZzZXRXaWR0aCksT2JqZWN0LmZyZWV6ZShsKSx3LmN1cnJlbnQmJiFEKGUuY3VycmVudC5sYXN0Qm91bmRzLGwpJiZoKGUuY3VycmVudC5sYXN0Qm91bmRzPWwpfTtyZXR1cm5bcixmP2cocixmKTpyLGQ/ZyhyLGQpOnJdfSxbaCxpLGQsZl0pO2Z1bmN0aW9uIHYoKXtlLmN1cnJlbnQuc2Nyb2xsQ29udGFpbmVycyYmKGUuY3VycmVudC5zY3JvbGxDb250YWluZXJzLmZvckVhY2gocj0+ci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIscywhMCkpLGUuY3VycmVudC5zY3JvbGxDb250YWluZXJzPW51bGwpLGUuY3VycmVudC5yZXNpemVPYnNlcnZlciYmKGUuY3VycmVudC5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCksZS5jdXJyZW50LnJlc2l6ZU9ic2VydmVyPW51bGwpLGUuY3VycmVudC5vcmllbnRhdGlvbkhhbmRsZXImJihcIm9yaWVudGF0aW9uXCJpbiBzY3JlZW4mJlwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiaW4gc2NyZWVuLm9yaWVudGF0aW9uP3NjcmVlbi5vcmllbnRhdGlvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZS5jdXJyZW50Lm9yaWVudGF0aW9uSGFuZGxlcik6XCJvbm9yaWVudGF0aW9uY2hhbmdlXCJpbiB3aW5kb3cmJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIixlLmN1cnJlbnQub3JpZW50YXRpb25IYW5kbGVyKSl9ZnVuY3Rpb24gYigpe2UuY3VycmVudC5lbGVtZW50JiYoZS5jdXJyZW50LnJlc2l6ZU9ic2VydmVyPW5ldyBhKHMpLGUuY3VycmVudC5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGUuY3VycmVudC5lbGVtZW50KSx0JiZlLmN1cnJlbnQuc2Nyb2xsQ29udGFpbmVycyYmZS5jdXJyZW50LnNjcm9sbENvbnRhaW5lcnMuZm9yRWFjaChyPT5yLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixzLHtjYXB0dXJlOiEwLHBhc3NpdmU6ITB9KSksZS5jdXJyZW50Lm9yaWVudGF0aW9uSGFuZGxlcj0oKT0+e3MoKX0sXCJvcmllbnRhdGlvblwiaW4gc2NyZWVuJiZcImFkZEV2ZW50TGlzdGVuZXJcImluIHNjcmVlbi5vcmllbnRhdGlvbj9zY3JlZW4ub3JpZW50YXRpb24uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGUuY3VycmVudC5vcmllbnRhdGlvbkhhbmRsZXIpOlwib25vcmllbnRhdGlvbmNoYW5nZVwiaW4gd2luZG93JiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsZS5jdXJyZW50Lm9yaWVudGF0aW9uSGFuZGxlcikpfWNvbnN0IEw9cj0+eyFyfHxyPT09ZS5jdXJyZW50LmVsZW1lbnR8fCh2KCksZS5jdXJyZW50LmVsZW1lbnQ9cixlLmN1cnJlbnQuc2Nyb2xsQ29udGFpbmVycz1FKHIpLGIoKSl9O3JldHVybiBYKHMsISF0KSxXKG0pLHUoKCk9Pnt2KCksYigpfSxbdCxzLG1dKSx1KCgpPT52LFtdKSxbTCxjLHpdfWZ1bmN0aW9uIFcobil7dSgoKT0+e2NvbnN0IHQ9bjtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0KSwoKT0+dm9pZCB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHQpfSxbbl0pfWZ1bmN0aW9uIFgobix0KXt1KCgpPT57aWYodCl7Y29uc3Qgbz1uO3JldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLG8se2NhcHR1cmU6ITAscGFzc2l2ZTohMH0pLCgpPT52b2lkIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbywhMCl9fSxbbix0XSl9ZnVuY3Rpb24gRShuKXtjb25zdCB0PVtdO2lmKCFufHxuPT09ZG9jdW1lbnQuYm9keSlyZXR1cm4gdDtjb25zdHtvdmVyZmxvdzpvLG92ZXJmbG93WDppLG92ZXJmbG93WTphfT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShuKTtyZXR1cm5bbyxpLGFdLnNvbWUoYz0+Yz09PVwiYXV0b1wifHxjPT09XCJzY3JvbGxcIikmJnQucHVzaChuKSxbLi4udCwuLi5FKG4ucGFyZW50RWxlbWVudCldfWNvbnN0IGs9W1wieFwiLFwieVwiLFwidG9wXCIsXCJib3R0b21cIixcImxlZnRcIixcInJpZ2h0XCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLEQ9KG4sdCk9PmsuZXZlcnkobz0+bltvXT09PXRbb10pO2V4cG9ydHtqIGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-use-measure/dist/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/suspend-react/index.js":
/*!*********************************************!*\
  !*** ./node_modules/suspend-react/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   peek: () => (/* binding */ peek),\n/* harmony export */   preload: () => (/* binding */ preload),\n/* harmony export */   suspend: () => (/* binding */ suspend)\n/* harmony export */ });\nconst isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\n\nconst globalCache = [];\n\nfunction shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nfunction query(fn, keys = null, preload = false, config = {}) {\n  // If no keys were given, the function is the key\n  if (keys === null) keys = [fn];\n\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) {\n        if (config.lifespan && config.lifespan > 0) {\n          if (entry.timeout) clearTimeout(entry.timeout);\n          entry.timeout = setTimeout(entry.remove, config.lifespan);\n        }\n\n        return entry.response;\n      } // If the promise is still unresolved, throw\n\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    remove: () => {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    },\n    promise: // Execute the promise\n    (isPromise(fn) ? fn : fn(...keys) // When it resolves, store its value\n    ).then(response => {\n      entry.response = response; // Remove the entry in time if a lifespan was given\n\n      if (config.lifespan && config.lifespan > 0) {\n        entry.timeout = setTimeout(entry.remove, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n    if (entry) entry.remove();\n  }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdXNwZW5kLXJlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixTQUFTOztBQUUzQjtBQUNBOztBQUVBLDREQUE0RDtBQUM1RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDOztBQUVyQyxtRkFBbUY7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSzs7QUFFTCwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7O0FBRXlDIiwic291cmNlcyI6WyIvVXNlcnMvamVuc2xlcm5zdGFsd2Flcm4vZGV2LzNkLXJvb20vcmVhY3QtM2Qtcm9vbS9ub2RlX21vZHVsZXMvc3VzcGVuZC1yZWFjdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1Byb21pc2UgPSBwcm9taXNlID0+IHR5cGVvZiBwcm9taXNlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nO1xuXG5jb25zdCBnbG9iYWxDYWNoZSA9IFtdO1xuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWxBcnJheXMoYXJyQSwgYXJyQiwgZXF1YWwgPSAoYSwgYikgPT4gYSA9PT0gYikge1xuICBpZiAoYXJyQSA9PT0gYXJyQikgcmV0dXJuIHRydWU7XG4gIGlmICghYXJyQSB8fCAhYXJyQikgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBsZW4gPSBhcnJBLmxlbmd0aDtcbiAgaWYgKGFyckIubGVuZ3RoICE9PSBsZW4pIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSBpZiAoIWVxdWFsKGFyckFbaV0sIGFyckJbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5KGZuLCBrZXlzID0gbnVsbCwgcHJlbG9hZCA9IGZhbHNlLCBjb25maWcgPSB7fSkge1xuICAvLyBJZiBubyBrZXlzIHdlcmUgZ2l2ZW4sIHRoZSBmdW5jdGlvbiBpcyB0aGUga2V5XG4gIGlmIChrZXlzID09PSBudWxsKSBrZXlzID0gW2ZuXTtcblxuICBmb3IgKGNvbnN0IGVudHJ5IG9mIGdsb2JhbENhY2hlKSB7XG4gICAgLy8gRmluZCBhIG1hdGNoXG4gICAgaWYgKHNoYWxsb3dFcXVhbEFycmF5cyhrZXlzLCBlbnRyeS5rZXlzLCBlbnRyeS5lcXVhbCkpIHtcbiAgICAgIC8vIElmIHdlJ3JlIHByZS1sb2FkaW5nIGFuZCB0aGUgZWxlbWVudCBpcyBwcmVzZW50LCBqdXN0IHJldHVyblxuICAgICAgaWYgKHByZWxvYWQpIHJldHVybiB1bmRlZmluZWQ7IC8vIElmIGFuIGVycm9yIG9jY3VycmVkLCB0aHJvd1xuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVudHJ5LCAnZXJyb3InKSkgdGhyb3cgZW50cnkuZXJyb3I7IC8vIElmIGEgcmVzcG9uc2Ugd2FzIHN1Y2Nlc3NmdWwsIHJldHVyblxuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVudHJ5LCAncmVzcG9uc2UnKSkge1xuICAgICAgICBpZiAoY29uZmlnLmxpZmVzcGFuICYmIGNvbmZpZy5saWZlc3BhbiA+IDApIHtcbiAgICAgICAgICBpZiAoZW50cnkudGltZW91dCkgY2xlYXJUaW1lb3V0KGVudHJ5LnRpbWVvdXQpO1xuICAgICAgICAgIGVudHJ5LnRpbWVvdXQgPSBzZXRUaW1lb3V0KGVudHJ5LnJlbW92ZSwgY29uZmlnLmxpZmVzcGFuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRyeS5yZXNwb25zZTtcbiAgICAgIH0gLy8gSWYgdGhlIHByb21pc2UgaXMgc3RpbGwgdW5yZXNvbHZlZCwgdGhyb3dcblxuXG4gICAgICBpZiAoIXByZWxvYWQpIHRocm93IGVudHJ5LnByb21pc2U7XG4gICAgfVxuICB9IC8vIFRoZSByZXF1ZXN0IGlzIG5ldyBvciBoYXMgY2hhbmdlZC5cblxuXG4gIGNvbnN0IGVudHJ5ID0ge1xuICAgIGtleXMsXG4gICAgZXF1YWw6IGNvbmZpZy5lcXVhbCxcbiAgICByZW1vdmU6ICgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZ2xvYmFsQ2FjaGUuaW5kZXhPZihlbnRyeSk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSBnbG9iYWxDYWNoZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0sXG4gICAgcHJvbWlzZTogLy8gRXhlY3V0ZSB0aGUgcHJvbWlzZVxuICAgIChpc1Byb21pc2UoZm4pID8gZm4gOiBmbiguLi5rZXlzKSAvLyBXaGVuIGl0IHJlc29sdmVzLCBzdG9yZSBpdHMgdmFsdWVcbiAgICApLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgZW50cnkucmVzcG9uc2UgPSByZXNwb25zZTsgLy8gUmVtb3ZlIHRoZSBlbnRyeSBpbiB0aW1lIGlmIGEgbGlmZXNwYW4gd2FzIGdpdmVuXG5cbiAgICAgIGlmIChjb25maWcubGlmZXNwYW4gJiYgY29uZmlnLmxpZmVzcGFuID4gMCkge1xuICAgICAgICBlbnRyeS50aW1lb3V0ID0gc2V0VGltZW91dChlbnRyeS5yZW1vdmUsIGNvbmZpZy5saWZlc3Bhbik7XG4gICAgICB9XG4gICAgfSkgLy8gU3RvcmUgY2F1Z2h0IGVycm9ycywgdGhleSB3aWxsIGJlIHRocm93biBpbiB0aGUgcmVuZGVyLXBoYXNlIHRvIGJ1YmJsZSBpbnRvIGFuIGVycm9yLWJvdW5kXG4gICAgLmNhdGNoKGVycm9yID0+IGVudHJ5LmVycm9yID0gZXJyb3IpXG4gIH07IC8vIFJlZ2lzdGVyIHRoZSBlbnRyeVxuXG4gIGdsb2JhbENhY2hlLnB1c2goZW50cnkpOyAvLyBBbmQgdGhyb3cgdGhlIHByb21pc2UsIHRoaXMgeWllbGRzIGNvbnRyb2wgYmFjayB0byBSZWFjdFxuXG4gIGlmICghcHJlbG9hZCkgdGhyb3cgZW50cnkucHJvbWlzZTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuY29uc3Qgc3VzcGVuZCA9IChmbiwga2V5cywgY29uZmlnKSA9PiBxdWVyeShmbiwga2V5cywgZmFsc2UsIGNvbmZpZyk7XG5cbmNvbnN0IHByZWxvYWQgPSAoZm4sIGtleXMsIGNvbmZpZykgPT4gdm9pZCBxdWVyeShmbiwga2V5cywgdHJ1ZSwgY29uZmlnKTtcblxuY29uc3QgcGVlayA9IGtleXMgPT4ge1xuICB2YXIgX2dsb2JhbENhY2hlJGZpbmQ7XG5cbiAgcmV0dXJuIChfZ2xvYmFsQ2FjaGUkZmluZCA9IGdsb2JhbENhY2hlLmZpbmQoZW50cnkgPT4gc2hhbGxvd0VxdWFsQXJyYXlzKGtleXMsIGVudHJ5LmtleXMsIGVudHJ5LmVxdWFsKSkpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsQ2FjaGUkZmluZC5yZXNwb25zZTtcbn07XG5cbmNvbnN0IGNsZWFyID0ga2V5cyA9PiB7XG4gIGlmIChrZXlzID09PSB1bmRlZmluZWQgfHwga2V5cy5sZW5ndGggPT09IDApIGdsb2JhbENhY2hlLnNwbGljZSgwLCBnbG9iYWxDYWNoZS5sZW5ndGgpO2Vsc2Uge1xuICAgIGNvbnN0IGVudHJ5ID0gZ2xvYmFsQ2FjaGUuZmluZChlbnRyeSA9PiBzaGFsbG93RXF1YWxBcnJheXMoa2V5cywgZW50cnkua2V5cywgZW50cnkuZXF1YWwpKTtcbiAgICBpZiAoZW50cnkpIGVudHJ5LnJlbW92ZSgpO1xuICB9XG59O1xuXG5leHBvcnQgeyBjbGVhciwgcGVlaywgcHJlbG9hZCwgc3VzcGVuZCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/suspend-react/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function is(x, y) {\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n    }\n    function useSyncExternalStore$2(subscribe, getSnapshot) {\n      didWarnOld18Alpha ||\n        void 0 === React.startTransition ||\n        ((didWarnOld18Alpha = !0),\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.\"\n        ));\n      var value = getSnapshot();\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedValue = getSnapshot();\n        objectIs(value, cachedValue) ||\n          (console.error(\n            \"The result of getSnapshot should be cached to avoid an infinite loop\"\n          ),\n          (didWarnUncachedGetSnapshot = !0));\n      }\n      cachedValue = useState({\n        inst: { value: value, getSnapshot: getSnapshot }\n      });\n      var inst = cachedValue[0].inst,\n        forceUpdate = cachedValue[1];\n      useLayoutEffect(\n        function () {\n          inst.value = value;\n          inst.getSnapshot = getSnapshot;\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n        },\n        [subscribe, value, getSnapshot]\n      );\n      useEffect(\n        function () {\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n          return subscribe(function () {\n            checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n          });\n        },\n        [subscribe]\n      );\n      useDebugValue(value);\n      return value;\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      inst = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(inst, nextValue);\n      } catch (error) {\n        return !0;\n      }\n    }\n    function useSyncExternalStore$1(subscribe, getSnapshot) {\n      return getSnapshot();\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    var React = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\"),\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\n      useState = React.useState,\n      useEffect = React.useEffect,\n      useLayoutEffect = React.useLayoutEffect,\n      useDebugValue = React.useDebugValue,\n      didWarnOld18Alpha = !1,\n      didWarnUncachedGetSnapshot = !1,\n      shim =\n        \"undefined\" === typeof window ||\n        \"undefined\" === typeof window.document ||\n        \"undefined\" === typeof window.document.createElement\n          ? useSyncExternalStore$1\n          : useSyncExternalStore$2;\n    exports.useSyncExternalStore =\n      void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYixLQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxZQUFZO0FBQ3BFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxZQUFZO0FBQ3BFO0FBQ0EsMERBQTBELFlBQVk7QUFDdEUsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsZ0VBQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDRCQUE0QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLmRldmVsb3BtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0uZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgICAgcmV0dXJuICh4ID09PSB5ICYmICgwICE9PSB4IHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QpIHtcbiAgICAgIGRpZFdhcm5PbGQxOEFscGhhIHx8XG4gICAgICAgIHZvaWQgMCA9PT0gUmVhY3Quc3RhcnRUcmFuc2l0aW9uIHx8XG4gICAgICAgICgoZGlkV2Fybk9sZDE4QWxwaGEgPSAhMCksXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJZb3UgYXJlIHVzaW5nIGFuIG91dGRhdGVkLCBwcmUtcmVsZWFzZSBhbHBoYSBvZiBSZWFjdCAxOCB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdXNlU3luY0V4dGVybmFsU3RvcmUuIFRoZSB1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIHRvIGEgbmV3ZXIgcHJlLXJlbGVhc2UuXCJcbiAgICAgICAgKSk7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgaWYgKCFkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCkge1xuICAgICAgICB2YXIgY2FjaGVkVmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgICBvYmplY3RJcyh2YWx1ZSwgY2FjaGVkVmFsdWUpIHx8XG4gICAgICAgICAgKGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBcIlRoZSByZXN1bHQgb2YgZ2V0U25hcHNob3Qgc2hvdWxkIGJlIGNhY2hlZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIChkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9ICEwKSk7XG4gICAgICB9XG4gICAgICBjYWNoZWRWYWx1ZSA9IHVzZVN0YXRlKHtcbiAgICAgICAgaW5zdDogeyB2YWx1ZTogdmFsdWUsIGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCB9XG4gICAgICB9KTtcbiAgICAgIHZhciBpbnN0ID0gY2FjaGVkVmFsdWVbMF0uaW5zdCxcbiAgICAgICAgZm9yY2VVcGRhdGUgPSBjYWNoZWRWYWx1ZVsxXTtcbiAgICAgIHVzZUxheW91dEVmZmVjdChcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGluc3QudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICBpbnN0LmdldFNuYXBzaG90ID0gZ2V0U25hcHNob3Q7XG4gICAgICAgICAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVVwZGF0ZSh7IGluc3Q6IGluc3QgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtzdWJzY3JpYmUsIHZhbHVlLCBnZXRTbmFwc2hvdF1cbiAgICAgICk7XG4gICAgICB1c2VFZmZlY3QoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpICYmIGZvcmNlVXBkYXRlKHsgaW5zdDogaW5zdCB9KTtcbiAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkgJiYgZm9yY2VVcGRhdGUoeyBpbnN0OiBpbnN0IH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbc3Vic2NyaWJlXVxuICAgICAgKTtcbiAgICAgIHVzZURlYnVnVmFsdWUodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpIHtcbiAgICAgIHZhciBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7XG4gICAgICBpbnN0ID0gaW5zdC52YWx1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBsYXRlc3RHZXRTbmFwc2hvdCgpO1xuICAgICAgICByZXR1cm4gIW9iamVjdElzKGluc3QsIG5leHRWYWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVzZVN5bmNFeHRlcm5hbFN0b3JlJDEoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCkge1xuICAgICAgcmV0dXJuIGdldFNuYXBzaG90KCk7XG4gICAgfVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQgJiZcbiAgICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQoRXJyb3IoKSk7XG4gICAgdmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICAgICAgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcyxcbiAgICAgIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUsXG4gICAgICB1c2VFZmZlY3QgPSBSZWFjdC51c2VFZmZlY3QsXG4gICAgICB1c2VMYXlvdXRFZmZlY3QgPSBSZWFjdC51c2VMYXlvdXRFZmZlY3QsXG4gICAgICB1c2VEZWJ1Z1ZhbHVlID0gUmVhY3QudXNlRGVidWdWYWx1ZSxcbiAgICAgIGRpZFdhcm5PbGQxOEFscGhhID0gITEsXG4gICAgICBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9ICExLFxuICAgICAgc2hpbSA9XG4gICAgICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cgfHxcbiAgICAgICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fFxuICAgICAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbiAgICAgICAgICA/IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDFcbiAgICAgICAgICA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG4gICAgZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZSA9XG4gICAgICB2b2lkIDAgIT09IFJlYWN0LnVzZVN5bmNFeHRlcm5hbFN0b3JlID8gUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUgOiBzaGltO1xuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RvcCAmJlxuICAgICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdG9wKEVycm9yKCkpO1xuICB9KSgpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function is(x, y) {\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    var React = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\"),\n      shim = __webpack_require__(/*! use-sync-external-store/shim */ \"(pages-dir-browser)/./node_modules/use-sync-external-store/shim/index.js\"),\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\n      useSyncExternalStore = shim.useSyncExternalStore,\n      useRef = React.useRef,\n      useEffect = React.useEffect,\n      useMemo = React.useMemo,\n      useDebugValue = React.useDebugValue;\n    exports.useSyncExternalStoreWithSelector = function (\n      subscribe,\n      getSnapshot,\n      getServerSnapshot,\n      selector,\n      isEqual\n    ) {\n      var instRef = useRef(null);\n      if (null === instRef.current) {\n        var inst = { hasValue: !1, value: null };\n        instRef.current = inst;\n      } else inst = instRef.current;\n      instRef = useMemo(\n        function () {\n          function memoizedSelector(nextSnapshot) {\n            if (!hasMemo) {\n              hasMemo = !0;\n              memoizedSnapshot = nextSnapshot;\n              nextSnapshot = selector(nextSnapshot);\n              if (void 0 !== isEqual && inst.hasValue) {\n                var currentSelection = inst.value;\n                if (isEqual(currentSelection, nextSnapshot))\n                  return (memoizedSelection = currentSelection);\n              }\n              return (memoizedSelection = nextSnapshot);\n            }\n            currentSelection = memoizedSelection;\n            if (objectIs(memoizedSnapshot, nextSnapshot))\n              return currentSelection;\n            var nextSelection = selector(nextSnapshot);\n            if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))\n              return (memoizedSnapshot = nextSnapshot), currentSelection;\n            memoizedSnapshot = nextSnapshot;\n            return (memoizedSelection = nextSelection);\n          }\n          var hasMemo = !1,\n            memoizedSnapshot,\n            memoizedSelection,\n            maybeGetServerSnapshot =\n              void 0 === getServerSnapshot ? null : getServerSnapshot;\n          return [\n            function () {\n              return memoizedSelector(getSnapshot());\n            },\n            null === maybeGetServerSnapshot\n              ? void 0\n              : function () {\n                  return memoizedSelector(maybeGetServerSnapshot());\n                }\n          ];\n        },\n        [getSnapshot, getServerSnapshot, selector, isEqual]\n      );\n      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\n      useEffect(\n        function () {\n          inst.hasValue = !0;\n          inst.value = value;\n        },\n        [value]\n      );\n      useDebugValue(value);\n      return value;\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTtBQUNiLEtBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxnRUFBTztBQUMvQixhQUFhLG1CQUFPLENBQUMsOEdBQThCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0NBQXdDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZW5zbGVybnN0YWx3YWVybi9kZXYvM2Qtcm9vbS9yZWFjdC0zZC1yb29tL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gICAgICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG4gICAgfVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQgJiZcbiAgICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQoRXJyb3IoKSk7XG4gICAgdmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICAgICAgc2hpbSA9IHJlcXVpcmUoXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltXCIpLFxuICAgICAgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcyxcbiAgICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gc2hpbS51c2VTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgICAgIHVzZVJlZiA9IFJlYWN0LnVzZVJlZixcbiAgICAgIHVzZUVmZmVjdCA9IFJlYWN0LnVzZUVmZmVjdCxcbiAgICAgIHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vLFxuICAgICAgdXNlRGVidWdWYWx1ZSA9IFJlYWN0LnVzZURlYnVnVmFsdWU7XG4gICAgZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IGZ1bmN0aW9uIChcbiAgICAgIHN1YnNjcmliZSxcbiAgICAgIGdldFNuYXBzaG90LFxuICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICBzZWxlY3RvcixcbiAgICAgIGlzRXF1YWxcbiAgICApIHtcbiAgICAgIHZhciBpbnN0UmVmID0gdXNlUmVmKG51bGwpO1xuICAgICAgaWYgKG51bGwgPT09IGluc3RSZWYuY3VycmVudCkge1xuICAgICAgICB2YXIgaW5zdCA9IHsgaGFzVmFsdWU6ICExLCB2YWx1ZTogbnVsbCB9O1xuICAgICAgICBpbnN0UmVmLmN1cnJlbnQgPSBpbnN0O1xuICAgICAgfSBlbHNlIGluc3QgPSBpbnN0UmVmLmN1cnJlbnQ7XG4gICAgICBpbnN0UmVmID0gdXNlTWVtbyhcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmN0aW9uIG1lbW9pemVkU2VsZWN0b3IobmV4dFNuYXBzaG90KSB7XG4gICAgICAgICAgICBpZiAoIWhhc01lbW8pIHtcbiAgICAgICAgICAgICAgaGFzTWVtbyA9ICEwO1xuICAgICAgICAgICAgICBtZW1vaXplZFNuYXBzaG90ID0gbmV4dFNuYXBzaG90O1xuICAgICAgICAgICAgICBuZXh0U25hcHNob3QgPSBzZWxlY3RvcihuZXh0U25hcHNob3QpO1xuICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBpc0VxdWFsICYmIGluc3QuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGluc3QudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzRXF1YWwoY3VycmVudFNlbGVjdGlvbiwgbmV4dFNuYXBzaG90KSlcbiAgICAgICAgICAgICAgICAgIHJldHVybiAobWVtb2l6ZWRTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gKG1lbW9pemVkU2VsZWN0aW9uID0gbmV4dFNuYXBzaG90KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRTZWxlY3Rpb24gPSBtZW1vaXplZFNlbGVjdGlvbjtcbiAgICAgICAgICAgIGlmIChvYmplY3RJcyhtZW1vaXplZFNuYXBzaG90LCBuZXh0U25hcHNob3QpKVxuICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFNlbGVjdGlvbjtcbiAgICAgICAgICAgIHZhciBuZXh0U2VsZWN0aW9uID0gc2VsZWN0b3IobmV4dFNuYXBzaG90KTtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGlzRXF1YWwgJiYgaXNFcXVhbChjdXJyZW50U2VsZWN0aW9uLCBuZXh0U2VsZWN0aW9uKSlcbiAgICAgICAgICAgICAgcmV0dXJuIChtZW1vaXplZFNuYXBzaG90ID0gbmV4dFNuYXBzaG90KSwgY3VycmVudFNlbGVjdGlvbjtcbiAgICAgICAgICAgIG1lbW9pemVkU25hcHNob3QgPSBuZXh0U25hcHNob3Q7XG4gICAgICAgICAgICByZXR1cm4gKG1lbW9pemVkU2VsZWN0aW9uID0gbmV4dFNlbGVjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBoYXNNZW1vID0gITEsXG4gICAgICAgICAgICBtZW1vaXplZFNuYXBzaG90LFxuICAgICAgICAgICAgbWVtb2l6ZWRTZWxlY3Rpb24sXG4gICAgICAgICAgICBtYXliZUdldFNlcnZlclNuYXBzaG90ID1cbiAgICAgICAgICAgICAgdm9pZCAwID09PSBnZXRTZXJ2ZXJTbmFwc2hvdCA/IG51bGwgOiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbWVtb2l6ZWRTZWxlY3RvcihnZXRTbmFwc2hvdCgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBudWxsID09PSBtYXliZUdldFNlcnZlclNuYXBzaG90XG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbW9pemVkU2VsZWN0b3IobWF5YmVHZXRTZXJ2ZXJTbmFwc2hvdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfSxcbiAgICAgICAgW2dldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCwgc2VsZWN0b3IsIGlzRXF1YWxdXG4gICAgICApO1xuICAgICAgdmFyIHZhbHVlID0gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBpbnN0UmVmWzBdLCBpbnN0UmVmWzFdKTtcbiAgICAgIHVzZUVmZmVjdChcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGluc3QuaGFzVmFsdWUgPSAhMDtcbiAgICAgICAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIFt2YWx1ZV1cbiAgICAgICk7XG4gICAgICB1c2VEZWJ1Z1ZhbHVlKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RvcCAmJlxuICAgICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdG9wKEVycm9yKCkpO1xuICB9KSgpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/use-sync-external-store/shim/index.js":
/*!************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim.development.js */ \"(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw0TUFBOEU7QUFDaEYiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZW5zbGVybnN0YWx3YWVybi9kZXYvM2Qtcm9vbS9yZWFjdC0zZC1yb29tL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/use-sync-external-store/shim/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/use-sync-external-store/shim/with-selector.js":
/*!********************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/with-selector.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim/with-selector.development.js */ \"(pages-dir-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLHdPQUE0RjtBQUM5RiIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/use-sync-external-store/shim/with-selector.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/zustand/esm/traditional.mjs":
/*!**************************************************!*\
  !*** ./node_modules/zustand/esm/traditional.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWithEqualityFn: () => (/* binding */ createWithEqualityFn),\n/* harmony export */   useStoreWithEqualityFn: () => (/* binding */ useStoreWithEqualityFn)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(pages-dir-browser)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/vanilla */ \"(pages-dir-browser)/./node_modules/zustand/esm/vanilla.mjs\");\n\n\n\n\nconst { useSyncExternalStoreWithSelector } = use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__;\nconst identity = (arg) => arg;\nfunction useStoreWithEqualityFn(api, selector = identity, equalityFn) {\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getInitialState,\n    selector,\n    equalityFn\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue(slice);\n  return slice;\n}\nconst createWithEqualityFnImpl = (createState, defaultEqualityFn) => {\n  const api = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_2__.createStore)(createState);\n  const useBoundStoreWithEqualityFn = (selector, equalityFn = defaultEqualityFn) => useStoreWithEqualityFn(api, selector, equalityFn);\n  Object.assign(useBoundStoreWithEqualityFn, api);\n  return useBoundStoreWithEqualityFn;\n};\nconst createWithEqualityFn = ((createState, defaultEqualityFn) => createState ? createWithEqualityFnImpl(createState, defaultEqualityFn) : createWithEqualityFnImpl);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS90cmFkaXRpb25hbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEI7QUFDOEQ7QUFDMUM7O0FBRTlDLFFBQVEsbUNBQW1DLEVBQUUsMEVBQTJCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0RBQW1CO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNERBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZW5zbGVybnN0YWx3YWVybi9kZXYvM2Qtcm9vbS9yZWFjdC0zZC1yb29tL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS90cmFkaXRpb25hbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZUV4cG9ydHMgZnJvbSAndXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS93aXRoLXNlbGVjdG9yLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSAnenVzdGFuZC92YW5pbGxhJztcblxuY29uc3QgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciB9ID0gdXNlU3luY0V4dGVybmFsU3RvcmVFeHBvcnRzO1xuY29uc3QgaWRlbnRpdHkgPSAoYXJnKSA9PiBhcmc7XG5mdW5jdGlvbiB1c2VTdG9yZVdpdGhFcXVhbGl0eUZuKGFwaSwgc2VsZWN0b3IgPSBpZGVudGl0eSwgZXF1YWxpdHlGbikge1xuICBjb25zdCBzbGljZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yKFxuICAgIGFwaS5zdWJzY3JpYmUsXG4gICAgYXBpLmdldFN0YXRlLFxuICAgIGFwaS5nZXRJbml0aWFsU3RhdGUsXG4gICAgc2VsZWN0b3IsXG4gICAgZXF1YWxpdHlGblxuICApO1xuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHNsaWNlKTtcbiAgcmV0dXJuIHNsaWNlO1xufVxuY29uc3QgY3JlYXRlV2l0aEVxdWFsaXR5Rm5JbXBsID0gKGNyZWF0ZVN0YXRlLCBkZWZhdWx0RXF1YWxpdHlGbikgPT4ge1xuICBjb25zdCBhcGkgPSBjcmVhdGVTdG9yZShjcmVhdGVTdGF0ZSk7XG4gIGNvbnN0IHVzZUJvdW5kU3RvcmVXaXRoRXF1YWxpdHlGbiA9IChzZWxlY3RvciwgZXF1YWxpdHlGbiA9IGRlZmF1bHRFcXVhbGl0eUZuKSA9PiB1c2VTdG9yZVdpdGhFcXVhbGl0eUZuKGFwaSwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pO1xuICBPYmplY3QuYXNzaWduKHVzZUJvdW5kU3RvcmVXaXRoRXF1YWxpdHlGbiwgYXBpKTtcbiAgcmV0dXJuIHVzZUJvdW5kU3RvcmVXaXRoRXF1YWxpdHlGbjtcbn07XG5jb25zdCBjcmVhdGVXaXRoRXF1YWxpdHlGbiA9ICgoY3JlYXRlU3RhdGUsIGRlZmF1bHRFcXVhbGl0eUZuKSA9PiBjcmVhdGVTdGF0ZSA/IGNyZWF0ZVdpdGhFcXVhbGl0eUZuSW1wbChjcmVhdGVTdGF0ZSwgZGVmYXVsdEVxdWFsaXR5Rm4pIDogY3JlYXRlV2l0aEVxdWFsaXR5Rm5JbXBsKTtcblxuZXhwb3J0IHsgY3JlYXRlV2l0aEVxdWFsaXR5Rm4sIHVzZVN0b3JlV2l0aEVxdWFsaXR5Rm4gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/zustand/esm/traditional.mjs\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/zustand/esm/vanilla.mjs":
/*!**********************************************!*\
  !*** ./node_modules/zustand/esm/vanilla.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStore: () => (/* binding */ createStore)\n/* harmony export */ });\nconst createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = ((createState) => createState ? createStoreImpl(createState) : createStoreImpl);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS92YW5pbGxhLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SEFBOEg7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUV1QiIsInNvdXJjZXMiOlsiL1VzZXJzL2plbnNsZXJuc3RhbHdhZXJuL2Rldi8zZC1yb29tL3JlYWN0LTNkLXJvb20vbm9kZV9tb2R1bGVzL3p1c3RhbmQvZXNtL3ZhbmlsbGEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZVN0b3JlSW1wbCA9IChjcmVhdGVTdGF0ZSkgPT4ge1xuICBsZXQgc3RhdGU7XG4gIGNvbnN0IGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHNldFN0YXRlID0gKHBhcnRpYWwsIHJlcGxhY2UpID0+IHtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB0eXBlb2YgcGFydGlhbCA9PT0gXCJmdW5jdGlvblwiID8gcGFydGlhbChzdGF0ZSkgOiBwYXJ0aWFsO1xuICAgIGlmICghT2JqZWN0LmlzKG5leHRTdGF0ZSwgc3RhdGUpKSB7XG4gICAgICBjb25zdCBwcmV2aW91c1N0YXRlID0gc3RhdGU7XG4gICAgICBzdGF0ZSA9IChyZXBsYWNlICE9IG51bGwgPyByZXBsYWNlIDogdHlwZW9mIG5leHRTdGF0ZSAhPT0gXCJvYmplY3RcIiB8fCBuZXh0U3RhdGUgPT09IG51bGwpID8gbmV4dFN0YXRlIDogT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKHN0YXRlLCBwcmV2aW91c1N0YXRlKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRTdGF0ZSA9ICgpID0+IHN0YXRlO1xuICBjb25zdCBnZXRJbml0aWFsU3RhdGUgPSAoKSA9PiBpbml0aWFsU3RhdGU7XG4gIGNvbnN0IHN1YnNjcmliZSA9IChsaXN0ZW5lcikgPT4ge1xuICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgfTtcbiAgY29uc3QgYXBpID0geyBzZXRTdGF0ZSwgZ2V0U3RhdGUsIGdldEluaXRpYWxTdGF0ZSwgc3Vic2NyaWJlIH07XG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHN0YXRlID0gY3JlYXRlU3RhdGUoc2V0U3RhdGUsIGdldFN0YXRlLCBhcGkpO1xuICByZXR1cm4gYXBpO1xufTtcbmNvbnN0IGNyZWF0ZVN0b3JlID0gKChjcmVhdGVTdGF0ZSkgPT4gY3JlYXRlU3RhdGUgPyBjcmVhdGVTdG9yZUltcGwoY3JlYXRlU3RhdGUpIDogY3JlYXRlU3RvcmVJbXBsKTtcblxuZXhwb3J0IHsgY3JlYXRlU3RvcmUgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/zustand/esm/vanilla.mjs\n"));

/***/ })

}]);